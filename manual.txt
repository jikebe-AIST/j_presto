>
   #####  What is the content you would like to ask about?  #####
   #                                                            #
   #  j_presto manual (Version 1.3.0)                           #
   #	                       Author : Jinzen Ikebe            #
   #  	           First Release Date : 2024-11-11              #
   #	Release Date for Current ver. : 2025-07-10              #
   #                                                            #
   ##############################################################

If you'd like to look up a command or option, type its name like:
	j_presto

You can use the Tab key to auto-complete commands and option names.
Pressing Tab with an empty input shows a list of available choices.

If you want to return to the top page of the manual (this page), please just press Enter.

You can access various features by typing a single letter and pressing Enter.
  f: FAQ -- Check frequently asked questions.
  s: Search -- Find a word or phrase across the entire manual.
  t: Tutorial -- View the tutorial page.

  p: Previous -- Go to the previous term.
  n: Next -- Move to the next term.
  u: Up -- Go up one level in the hierarchy.

  q: Quit -- Exit the manual.

You can also use the up and down keys to browse your input history.
>j_presto
"j_presto" is a program for performing molecular dynamics (MD) simulations.
With j_presto, you can execute the following sub-programs using the command:
	j_presto [sub_program_name]
If you would like to know more about a specific sub-program, please enter its name.

Sub-program name list:
    For MD simulation,
	initpep		: Preperation of extended initial structures for folding simulation.
	pdb_alignfit	: Superimposition of query structure to target one based on sequence alignment.
	nt_gen		: Generation of atomic name correspondence table from a PREP and a PDB file.
	nt_conv		: Convert residue and atom names in a PREP and a PDB file based on a name table.
	gen_db     	: Generation of a database file (*.tpldb) for creating j_presto topology files (*.tpl).
	prep       	: Preparation of input files (*.pdb, *.tpl, and *.shk files) for MD simulations.
	md_run     	: Execution of MD simulation or energy minimization calculation.
	batch_set  	: Setting up all the necessary files and directories required to run multiple MD simulations efficiently.
	GEprep     	: Preparation of a parameter file (*.nf) for Generalized Ensemble MD simulations such as McMD and ALSD.

    For Analysis,
	Ens_Ana    	: Performing analysis of conformational ensembles obtained from simulation results.
	PCAaxis    	: Calculating axes for principal component analysis (PCA) through diagonalization.
	PCAproj    	: Projecting each structure onto PCA subspace.
	distrib    	: Generation of statistical distribution data from weighted input values for one- or two-dimensional variables.
	pick_conf	: Extraction and ranking structures based on user-defined conditions and event timings.
	ttp_se		: Calculation of weighted averages and standard errors of the data.
	pdb_movie       : Generation of a multi-model PDB file from sequential single-structure PDB files for trajectory visualization.

    For Enzyme development,
	MSPER		: Predict mutation sites to improve enzyme selectivity.
	conmut		: Propose mutations to improve enzyme stability from input amino acid sequences using the consensus mutagenesis.

    For user guidance,
	get_tmpl   	: Obtaining templates of input files and scripts for excuting j_presto.
	genlist		: Generate file path lists and data ranges for MD and analysis inputs.
	manual     	: Viewing the manual.

The simulations performed by j_presto support parallelization using OpenMP, but currently do not support parallelization via MPI or GPU.
However, you can use the programs j_presto_mpi and j_presto_master, which allow you to bundle multiple OpenMP-parallelized MD simulation runs and execute them as a single MPI job.
	j_presto_mpi    : Execute multiple MD simulation runs as a single MPI job using an embarrassingly parallel approach.
	j_presto_master : Execute multiple MD simulation runs as a single MPI job using a master-slave approach.
>initpep
@u:j_presto,n:pdb_alignfit
The command "j_presto initpep" prepares extended initial structures for folding simulation.
In typical simulations that reproduce structural fluctuations around the native conformation of a protein, experimentally determined structures downloaded from the PDB or model structures generated by tools such as AlphaFold are used as the initial structures.
In contrast, "folding simulations", which aim to reproduce the native conformation of a protein, require starting from a fully unfolded structure that must fold into the native state.
"initpep" is a program designed to generate the PDB file of such an extended initial structure.

How to use: j_presto initpep INPUT [options]

In the INPUT, the amino acid sequence of the target protein is provided. There are three input methods:
	1 : A string of the amino acid sequence in one-letter code
	2 : A FASTA file
	3 : A PDB file
When a PDB file is used as input, the coordinate information is ignored, and only the amino acid sequence is read.
If the PDB file contains "SSBOND" records, this information is retained and carried over into the output file.

Option list:
	initpep -o	: Output PDB file
	initpep -H	: Specifies helical regions
	initpep -s	: Specifies S-S bond pairs

If you would like to know how to use the arguments, please enter them such as "initpep -o".
>initpep -o
@u:initpep,n:initpep -H
How to use: j_presto initpep -o OUTPUT

This option specifies the output pdb file name.
The default name is "output.pdb"
>initpep -H
@u:initpep,p:initpep -o,n:initpep -s
How to use: j_presto initpep -H FIRST_RESIDUE:LAST_RESIDUE[,FIRST_RESIDUE2:LAST_RESIDUE2[,...]]

In initpep, an extended structure (with φ = 180° and ψ = 180°) is generated based on the input amino acid sequence.
However, if specific regions are to be modeled as a helical structure, this can be specified using this option.
For example, to model residues 1 to 10 and 20 to 30 as helices, you can specify it as follows:
	j_presto initpep -H 1:10,20:30
>initpep -s
@u:initpep,p:initpep -H
How to use: j_presto initpep -s CYS1:CYS2[,CYS3:CYS4[,...]]

This option provides the disulfide bond pairing information between CYS residues.
The specified information will be included as SSBOND records in the output PDB file.
If the input is a PDB file that already contains SSBOND records, the information is automatically inherited, and there is no need to specify it again using this option.
This option is intended for use when the input is given as a sequence string in one-letter code, a FASTA-formatted file, or a PDB file that lacks SSBOND information.

Note that even if SSBOND information is specified here, the coordinates in the output PDB file will still correspond to extended or helical structures (if the -H option is used).
Therefore, the distance between the specified disulfide-bonded pairs will not be automatically shortened.

To bring the disulfide-bonded residues closer together, the output PDB file should be subjected to an energy minimization calculation using "j_presto md_run".
However, be aware that if the system includes multiple disulfide bonds, there may be conflicts among distance constraints, and the structure may not converge to one that satisfies all disulfide bond distances simultaneously.
>pdb_alignfit
@u:j_presto,p:initpep,n:nt_gen
The command "j_presto pdb_alignfit" aligns amino acid sequences from two PDB files and superimposes their structure based on the alignment.
It compares the sequences of the reference and query structures, calculates the identify percentage, and outputs a new PDB file where the query structure is superimposed onto the reference structure.
Structure superimposition can also be performed with the "j_presto Ens_Ana" command, but pdb_alignfit was specifically developed for aligning two protein structures with low sequence homology.
For example, let's consider the structure of protein A, which is of interest to you, and its homologous protein B.
Protein A is a standalone structure, while protein B is a complex with a ligand.
In this case, A would be used as the reference structure, and B would be the query structure for alignment.
By superimposing B onto A, you can align the ligand in B with the structure of A, thereby creating a model of the complex between A and the ligand.

This program does not require an internet connection and performs all processing locally.
It allows you to carry out alignments and structural superimpositions securely, without uploading any sequence data externally, making it suitable for handling confidential information.

How to use: j_presto pdb_alignfit REFERENCE_PDB_FILE QUERY_PDB_FILE [options]

The REFERENCE_PDB_FILE and QUERY_PDB_FILE are required arguments.
	REFERENCE_PDB_FILE 	: The PDB file of the reference structure that will be used for alignment and superimposition.
	QUERY_PDB_FILE		: The PDB file of the query structure that will be aligned to the reference structure.

Option list:
	pdb_alignfit -a		: Alignment mode
	pdb_alignfit -s		: Specifies the atoms to use for superimposition (ca or backbone).
	pdb_alignfit -ogs	: Open gap score used in the sequence alignment.
	pdb_alignfit -egs	: Extension gap score used in the sequence alignment.
	pdb_alignfit -sm	: Substitution matrix used for sequence alignment.
	pdb_alignfit -o		: The name of output PDB file where the superimposed query structure will be saved.

If you would like to know how to use the arguments, please enter them such as "pdb_alignfit -a".
>pdb_alignfit -a
@u:pdb_alignfit,n:pdb_alignfit -s
How to use: j_presto pdb_alignfit -a {global, local}

This option sets alignment mode to "global" or "local".
Global alignment attempts to align the entire sequence.
Local alignment focuses on finding the best matching sub-sequence.
The default setting is local.
Note that the global alignment mode might be more computationally expensive than local one, especially for long sequence.
>pdb_alignfit -s
@u:pdb_alignfit,p:pdb_alignfit -a,n:pdb_alignfit -ogs
How to use: j_presto pdb_alignfit -s {ca, backbone}

This option specifies the atoms to use for superimposition.
Can be either "ca" (C-alpha atoms) or "backbone" (backbone atoms (Ca, C, N, and O))
The default is "ca".
>pdb_alignfit -ogs
@u:pdb_alignfit,p:pdb_alignfit -s,n:pdb_alignfit -egs
How to use: j_presto pdb_alignfit -ogs OPEN_GAP_SCORE

The open gap score used in the sequence alignment.
This score determines the penalty for introducing gaps in the alignment.
The default is -10.
>pdb_alignfit -egs
@u:pdb_alignfit,p:pdb_alignfit -ogs,n:pdb_alignfit -sm
How to use: j_presto pdb_alignfit -egs EXTEND_GAP_SCORE

The extend gap score used in the sequence alignment.
This score determines the penalty for extending gaps in the alignment.
The default is -0.2.
>pdb_alignfit -sm
@u:pdb_alignfit,p:pdb_alignfit -egs,n:pdb_alignfit -o
How to use: j_presto pdb_alignfit -sm MATRIX_NAME

This option specifies the substitution matrix used for sequence alignment.
It determines the scores for aligning defferent amino acids.
The default is "BLOSUM62".
>pdb_alignfit -o
@u:pdb_alignfit,p:pdb_alignfit -sm
How to use: j_presto pdb_alignfit -o OUTPUT_PDB_FILE_NAME

This option specifies the name of the output PDB file where the superimposed query structure will be saved.
The default is "superimposed_structure.pdb"
>nt_gen
@u:j_presto,p:pdb_alignfit,n:nt_conv
Simulation parameters for the 20 common amino acids and nucleic acid bases are typically prepared in advance.
However, for simulations involving specialized amino acids or ligand small molecules, it may be necessary to prepare a prep file containing the relevant parameters.
These files are often prepared using external programs such as Gaussian, but during this process, the atom names assigned to molecules in the original PDB file may change, resulting in different atom names in the prep file.
In such cases, manually matching the corresponding atom names in both the PDB and prep files can be time-consuming.
This program automates this process by creating a table of corresponding atom names using "j_presto nt_gen," and "j_presto nt_conv" performs the conversion based on this table.

The command "j_presto nt_gen" generates an atomic name correspondence table from a PREP file and a PDB file.
This program parses the PDB file, extracting information about atomic distances and bonds, and then matches the atom names to those in the PREP file.
The result is an output table showing the correspondence between atoms from both files.

This generated name table can be used as input for the "j_presto nt_conv" command, which automatically converts and matches atom names between the PDB and PREP files based on their corresponding relationships. 
The nt_conv command simplifies the process of aligning atom names from both files, ensuring that the atomic information is consistent and ready for further analysis or simulation.

How to use: j_presto nt_gen INPUT_PREP_FILE INPUT_PDB_FILE [options]

The INPUT_PREP_FILE and INPUT_PDB_FILE are required arguments.
        INPUT_PREP_FILE	: The input PREP file path.
        INPUT_PDB_FILE	: The input PDB file path.

Option list:
	nt_gen -o	: Specifies the output file name where the atomic correspondence table will be written.
	nt_gen -t	: Threshold distance for determining the presence of covalent bonds between atom in the PDB file.

If you would like to know how to use the arguments, please enter them such as "nt_gen -o".
>nt_gen -o
@u:nt_gen,n:nt_gen -t
How to use: j_presto nt_gen -o OUTPUT_FILE_NAME

This option specifies the output name table file name.
The default is "table.txt".
>nt_gen -t
@u:nt_gen,p:nt_gen -o
How to use: j_presto nt_gen -t THRESHOLD_DISTANCE

This option specifies the threshold distance for determining the presence of covalent bonds between atoms in the PDB file.
The default is 1.8 Å.
This program determines that there is a covalent bond between atoms in the PDB file if the distance between them is below the specified threshold.
It then infers the correspondence of atom names by comparing the bonding information with that listed in the PREP file.
>nt_conv
@u:j_presto,p:nt_gen,n:gen_db
Simulation parameters for the 20 common amino acids and nucleic acid bases are typically prepared in advance.
However, for simulations involving specialized amino acids or ligand small molecules, it may be necessary to prepare a prep file containing the relevant parameters.
These files are often prepared using external programs such as Gaussian, but during this process, the atom names assigned to molecules in the original PDB file may change, resulting in different atom names in the prep file.
In such cases, manually matching the corresponding atom names in both the PDB and prep files can be time-consuming.
This program automates this process by creating a table of corresponding atom names using "j_presto nt_gen," and "j_presto nt_conv" performs the conversion based on this table.

The command "j_presto nt_conv" converts residue and atom names in a PDB or PREP file based on the specified name table file.
The name table file can be automatically generated using "j_presto nt_gen" command, and contains a mapping of original names (on the left) to new names (on the right).
This tool allows you to convert names in bulk, or to reverse the conversion to restore the original names.

How to use: j_presto nt_conv INPUT_TABLE_NAME INPUT_FILE_NAME [options]

The INPUT_TABLE_NAME and INPUT_FILE_NAME are required arguments.
	INPUT_TABLE_NAME	: Name table file name including the mapping between original names and the new names.
	INPUT_FILE_NAME		: The input file (either PDB or prep format) to be processed.

Option list:
	nt_conv -o		: Specifies the output file name.
	nt_conv -r		: Performs the conversion in the reverse direction.
	nt_conv -rh		: Removes hydrogen atoms associated with converted residues; use 'all' to remove all hydrogen atoms from the PDB file.
	nt_conv -ra		: Renumbers atom IDs in the output file, making them sequential.
	nt_conv -rr		: Renumbers residue IDs in the output file, making them sequential.
	nt_conv -rph		: Renames hydrogen atoms in prep files based on their bonded atom.

If you would like to know how to use the arguments, please enter them such as "nt_gen -o".
>nt_conv -o
@u:nt_cont,n:nt_conv -r
How to use: j_presto nt_conv -o OUTPUT

This option specifies the output file name for the PDB or prep file.
If not specified, the default output file will be "output.pdb" or "output.prep".
>nt_conv -r
@u:nt_cont,p:nt_conv -o,n:nt_conv -rh
How to use: j_presto nt_conv -r

This option performs the conversion in the reverse direction.
Nomally, names are converted from the original name (on the left side of the name table file) to the new name (on the right side).
When this option is used, the conversion happens from the new names back to the original ones.
>nt_conv -rh
@u:nt_cont,p:nt_conv -r,n:nt_conv -ra
How to use: j_presto nt_conv -rh    or    j_presto nt_conv -rh all

This option removes hydrogen atoms related to converted residues in the PDB file.
Use "all" to remove all hydrogen atoms. 
>nt_conv -ra
@u:nt_cont,p:nt_conv -rh,n:nt_conv -rr
How to use: j_presto nt_conv -ra

This option renumbers atom IDs in the output PDB file, making them sequential.
>nt_conv -rr
@u:nt_cont,p:nt_conv -ra,n:nt_conv -rph
How to use: j_presto nt_conv -rr

This option renumbers residue IDs in the output PDB file, making them sequential.
>nt_conv -rph
@u:nt_cont,p:nt_conv -rr
How to use: j_presto nt_conv -rph

This option is used to rename hydrogen atoms within the prep file.
In PDB files, the names of hydrogen atoms are typically determined based on how they bond with other atoms in the molecule.
However, prep files may use a different naming convention.
By using this option, hydrogen atoms in the converted prep file will be renamed appropriately, ensuring consistency with the required format for simulations or calculations.
>gen_db
@u:j_presto,p:nt_conv,n:prep
The command "j_presto gen_db" generates topology database file (*.tpldb) and water solvent coordinate file (*.slv) for j_presto.
These files are created by specifying AMBER format file with the "j_presto gen_db -i" argument.
If you would like to know how to use the arguments, please enter them such as "gen_db -i"

Option list:
	gen_db -i  : Specification of the input AMBER parameter files.
	gen_db -o  : Specification of the output file name.
	gen_db -rr : Rename option for residue names.
	gen_db -s  : Specification of the output solvent coordinate files (*.slv).

By executing "j_presto get_tmpl gen_db", you can obtain a template for the script file that runs gen_db.
You can easily execute it by appropriately modifying this file according to your settings.
>gen_db -i
@u:gen_db,n:gen_db -o
How to use: j_presto gen_db -i INPUT [INPUT ...]

Argument for inputting AMBER parameter files.
This argument allows multiple files to be specified at once.
The supported file formats are dat, in, prep, lib, frcmod, and leaprc.
Please note that if there are multiple different inputs for the same parameter among the input files, the later input will overwrite the previous ones.
These files can be obtained by downloading AMBER Tools from the following link: https://ambermd.org/AmberTools.php.
Please ensure that you obtain these files at your own risk.
By setting the path to this database in the environment variable "J_PRESTO_AMBER_PATH", you will be able to use the files included in the database by specifying only their filenames without needing to provide relative paths.
>gen_db -o
@u:gen_db,p:gen_db -i,n:gen_db -rr
How to use: j_presto gen_db -o OUTPUT

Specification of the output file name.
If this argument is not set, the default name "test" will be used.
This means that the output files will be named test.tpldb.
>gen_db -rr
@u:gen_db,p:gen_db -o,n:gen_db -s
How to use: j_presto gen_db -rr RESIDUE_RENAME [RESIDUE_RENAME ...]

If you want to change the residue names defined in AMBER, you can use this argument.
For example, if you want to change the residue name of TIP3P water, which is named "TP3" in AMBER, to "WAT" in the tpldb file, you can specify it as follows:
	j_presto gen_db -rr TP3:WAT
connecting the old and new names with a colon.
To change multiple residue names, you can set it up like this:
	j_presto gen_db -rr aaa:AAA bbb:BBB ...
>gen_db -s
@u:gen_db,p:gen_db -rr
How to use: j_presto gen_db -s SOLVENT_BOX [SOLVENT_BOX ...]

If you want to create solvent coordinate database files (*.slv) for j_presto from the solvent coordinates listed in *.lib file, you should provide the name of the solvent box (for example, TIP3PBOX) using this argument.
Names of solvent boxes can be found within the contents of the *.lib file.
By specifying multiple solvent box names at once, you can output multiple slv files simultaneously.

Currently, j_presto does not have a method for controlling pressure, so it cannot adjust the solvent to an appropriate density with constant-pressure simulations.
Therefore, it is recommended to use the j_prestoBOX.slv file, which has been equilibrated at 300K and 1atm, rather than using the *.slv file created from the *.lib file.
If the 'j_presto prep -sdb' argument is not set, the j_prestoBOX.slv will be used automatically as the default setting.
>prep
@u:j_presto,p:gen_db,n:md_run
The command "j_presto prep" prepares the simulation system based on the input pdb file, the topology database file (*.tpldb) generated by gen_db, and, if applicable, the *.slv file for adding solvent.
Some typical tasks that can be performed with prep include:
	Automatically changing the charge state of certain amino acids according to the specified pH conditions.
	Trimming a portion of the system.
	Adding ACE and NME groups to the N and C termini of the protein.
	Adding solvent molecules.
	Adding ions to achieve the specified concentration.
	Translating the center of mass of the system.
	Changing residue names.
	Preparing input files for SHAKE.
	etc...

Option list:
	prep -o     : output
	prep -i     : input PDB
	prep -db    : input topology database
	prep -pH    : pH value
	prep -nah   : no auto histidine protonation state determination
	prep -dh    : default histidine
	prep -th    : threshold distance of hydrogen bond formation for histidine protonation check
	prep -ts    : trim shape
	prep -tc    : trim center
	prep -tr    : trim radius
	prep -tb    : trim boundary
	prep -pair  : DNA duplex pair
	prep -ACE   : adding ACE group for N-termini of proteins
	prep -NME   : adding NME group for C-termini of proteins
	prep -s     : solvent
	prep -sdb   : solvent coordinate database
	prep -ss    : solvent shape
	prep -sh    : solvent hydrogen option
	prep -sp    : padding to add solvent molecules
	prep -sc    : solvent center
	prep -sr    : solvent radius
	prep -sb    : solvent boundary
	prep -c     : classic option
	prep -mc    : move center
	prep -ia    : ion names to add
	prep -sd    : solvent density
	prep -ie    : ion exclusion distance
	prep -rr    : residue rename
	prep -shake : for SHAKE input

For detailed information about each argument, enter them such as "prep -i".
By executing "j_presto get_tmpl prep", you can obtain a template for the script file that runs prep.
You can easily execute it by appropriately modifying this file according to your settings.
>prep -o
@u:prep,n:prep -i
How to use: j_presto prep -o OUTPUT

Specification of the output file name.
If this argument is not specified, the default name "test" will be used.
This means that the output files will be named like test.pdb and test.tpl.
>prep -i
@u:prep,p:prep -o,n:prep -db
How to use: j_presto prep -i INPUT

Specification of the input PDB file name.
>prep -db
@u:prep,p:prep -i,n:prep -pH
How to use: j_presto prep -db TPLDB

Specification of the topology database file (*.tpldb).
>prep -pH
@u:prep,p:prep -db,n:prep -nah
How to use: j_presto prep -pH

Specification of pH value for the system.
If this argument is not set, the pH will be set to 7.0 by default.
Based on this value, the charge states of amino acids such as Glu and Lys are determined.
>prep -nah
@u:prep,p:prep -pH,n:prep -dh
How to use: j_presto prep -nah

Unless this option is set, the charge state of histidine residues specified as "HIS" in the pdb file will be automatically determined based on the system's pH and the hydrogen bonding state with other residues.
If you want to set all HIS residues to the default histidine specified by the -dh argument (without automatically determining the charge state), you should enable this option.
>prep -dh
@u:prep,p:prep -nah,n:prep -th
How to use: j_presto prep -dh DEFAULT_HIS

Setting the default histidine name.
If the -nah argument is set, or if the state of histidine cannot be determined through pH or hydrogen bonding pattern analyses, the residues designated as HIS in the pdb file will be to the histidine specified by this argument (HID or HIE).
If this argument is not specified, the default histidine will be set to HIE.
>prep -th
@u:prep,p:prep -dh,n:prep -ts
How to use: j_presto prep -th THRESHOLD_DISTANCE_HISPRO

The threshold distance used to determine hydrogen bond formation for checking the charge state of histidine.
It is typically set between 2.4 Å and 3.5 Å.
If this argument is not set, the default distance of 3.0 Å will be used.
>prep -ts
@u:prep,p:prep -th,n:prep -tc
How to use: j_presto prep -ts {CAP,BOX,ELL}

If you want to trim a part of the system, set this argument.
You can specify one of the following three shapes:
	CAP (spherical)
	BOX (rectangular body)
	ELL (ellipsoid body)
During trimming, a residue is removed only if all its atoms are outside the boundary.
If even one atom is inside the boundary, the residue will be preserved.
When peptide chains are cleaved by this trimming, an ACE and an NME group are automatically added to the N-terminus and C-terminus, respectively.
>prep -tc
@u:prep,p:prep -ts,n:prep -tr
How to use: j_presto prep -tc x y z

Argument for specifying the center coordinates of the boundary when using "j_presto prep -ts CAP" or "j_presto prep -ts ELL".
Three real numbers for x, y, and z must be provided.
>prep -tr
@u:prep,p:prep -tc,n:prep -tb
How to use: j_presto prep -tr radius1 [radius2 radius3]

Argument for specifying the radius when trimming the system with "j_presto prep -ts CAP" or "j_presto prep -ts ELL".
In the case of CAP, a single positive real number for the radius is specified using "j_presto prep -tr radius1".
For ELL, three positive real numbers for the radii along the x, y, and z axes are specified using "j_presto prep -r radius1 radius2 radius3".
>prep -tb
@u:prep,p:prep -tr,n:prep -pair
How to use: j_presto prep -tb x_min x_max y_min y_max z_min z_max

When specifying "j_presto prep -tb BOX", six real numbers are used to define the lower and upper bounds of the box for trimming the system.
The format is as follows:
	j_presto prep -tb x_min x_max y_min y_max z_min z_max
where x_min, y_min, and z_min are the coordinates for the lower bounds, and x_max, y_max, and z_max are the coordinates for the upper bounds of the box.
>prep -pair
@u:prep,p:prep -tb,n:prep -ACE
How to use: j_presto prep -pair DNA_DUPLEX_PAIR [DNA_DUPLEX_PAIR ...]

This argument specifies the base pair numbers that form a duplex pair in DNA.
When trimming the system with j_presto prep -ts, this option ensures that both bases involved in a salt bridge are retained, preventing one of the pair from being removed during the trimming process and maintaining the base pairing.
For instance, if DNA chains 1 and 2, and chains 3 and 4 are forming duplex pairs in the system, you would specify this as j_presto prep -pair 1:2 3:4, connecting the chain numbers forming the pairs with a colon.
>prep -ACE
@u:prep,p:prep -pair,n:prep -NME
How to use: j_presto prep -ACE ADD_ACE [ADD_ACE ...]

When you want to add ACE groups to N-termini of peptides, specify the chain numbers of the peptides with this argument.
>prep -NME
@u:prep,p:prep -ACE,n:prep -s
How to use: j_presto prep -NME ADD_NME [ADD_NME ...]

When you want to add NME groups to C-termini of peptides, specify the chain numbers of the peptides with this argument.
>prep -s
@u:prep,p:prep -NME,n:prep -sdb
How to use: j_presto prep -s SOLVENT

Specify the name of the solvent you want to use with this argument, when using the "j_presto prep -ss" argument to add solvent to the system.
Note that the parameters for the solvent specified here must be provided in the *.tpldb file.
If this argument is not set, the default solvent "TP3 (TIP3P water)" will be used.
>prep -sdb
@u:prep,p:prep -s,n:prep -ss
How to use: j_presto prep -sdb SOLVENT_COORDINATE_DATABASE

To specify the solvent coordinate database when adding solvent to the system using the "j_presto prep -ss" option, you can use this argument.
The database can be created using the "j_presto gen_db -s" command, but if this argument is not specified, the default solvent database (j_prestoBOX.slv) will be used.
Since the current version of j_presto does not implement pressure control methods, it is recommended to use the j_prestoBOX.slv, which is pre-equilibrated coordinates under a constant pressure at 300K.
>prep -ss
@u:prep,p:prep -sdb,n:prep -sh
How to use: j_presto prep -ss {CAP,BOX,ELL,PBC}

To add solvent molecules to the system, use this argument.
You can specify the shape of the solvent to be added from the following options:
	CAP (spherical)
	BOX (rectangular body)
	ELL (ellipsoid body)
	PBC (periodic boundary condition for a rectangular body)
>prep -sh
@u:prep,p:prep -ss,n:prep -sp
How to use: j_presto prep -sh

When adding solvent to the system using "j_presto prep -ss", the following calculations are typically performed using only heavy atoms (i.e., excluding hydrogen atoms):
	1) calculation of the geometric center of the system
	2) determination of whether the solvent exists within the boundary
	3) evaluation of solute-solvent overlap
If this argument is set, these calculations will also take hydrogen atoms into account.
>prep -sp
@u:prep,p:prep -sh,n:prep -sc
How to use: j_presto prep -sp SOLVENT_PADDING

When adding solvent to the system using "j_presto prep -ss", this argument is used to set the interference region size (padding).
When "j_presto prep -ss CAP" is specified, the radius is automatically set to the distance from the center of the system to the farthest atom, plus the padding length.
For "j_presto prep -ss BOX or ELL or PBC", the boundaries in the x, y, and z directions, or the elliptical radii, are automatically set to the farthest coordinates from the center of the system, plus the padding length.
This argument will be ignored if the radius or boundary values have already been set using -sr or -sb. If none of -sr, -sb, or -ss are explicitly specified, a default padding length of 12.0 Å will be used.
>prep -sc
@u:prep,p:prep -sp,n:prep -sr
How to use: j_presto prep -sc SOLVENT_CENTER [SOLVENT_CENTER ...]

When setting "j_presto prep -ss CAP" or "j_presto prep -ss ELL", you can specify the center of the solvent using this argument.
The specification methods are as follows:
	1: Specify coordinates as three real numbers for x, y, and z like "j_presto prep -sc x y z".
	2: Specify a chain number as a single integer like "j_presto prep -sc 3".
In the second case, the geometric center of atoms from chain 1 to chain 3 will be calculated, and the center will be set as the solvent center.
If you specify 0, the center will be calculated for all solute chains.
If this argument is not specified, the default value of "j_presto prep -sc 0" will be used.
Important Note: When trimming the system, the chain numbering may change if any molecular chains are severed, so be mindful to specify the chain number based on the configuration of the system after trimming.
>prep -sr
@u:prep,p:prep -sc,n:prep -sb
How to use: j_presto prep -sr radius1 [radius2 radius3]

You can specify the radius of the solvent using this argument.
When using "j_presto prep -ss CAP", set the radius with a single positive real number like "j_presto prep -sr 12.0".
When using "j_presto prep -ss ELL", set the radii for the x, y, and z axes with three positive real numbers like "j_presto prep -sr 14.0 13.5 20.0"
>prep -sb
@u:prep,p:prep -sr,n:prep -c
How to use: j_presto prep -sb x_min x_max y_min y_max z_min z_max

When you set "j_presto prep -ss BOX" or "j_presto prep -ss PBC", you can specify the upper and lower limits for the x, y, and z axes using six real numbers with this argument.
The syntax is as follows:
	j_presto prep -sb x_min x_max y_min y_max z_min z_max
Here, x_min, x_max, y_min, y_max, z_min, and z_max define the boundaries of the box or periodic boundary condition along each axis.
>prep -c
@u:prep,p:prep -sb,n:prep -mc
How to use: j_presto prep -c

This option is an argument for using the solvent and ion addition methods from previous versions of the program.
It has been introduced to compare with past computational results, so it is generally not necessary to use it.
When this argument is set, the name of the solvent can only be "WAT" (for water) and not any other solvent name.
Remember that using this option may limit your choices and is mainly intended for legacy compatibility.
>prep -mc
@u:prep,p:prep -c,n:prep -ia
How to use: j_presto prep -mc

This argument is used to translate the center coordinates of the system, which were set using "j_presto prep -tc" or "j_presto prep -sc", to the origin at [0, 0, 0].
>prep -ia
@u:prep,p:prep -mc,n:prep -sd
How to use: j_presto prep -ia ion_name1 value1 [ion_name2 value2 ...]

When you want to add ions to the system, you can set the ion names along with either the desired quantities or the desired concentrations using this argument:
	j_presto prep -ia FE2 0 K+ 3 Na+ 0.153M Cl- 0.153M
Here, "M" represents the unit of concentration in mol/L.
If the quantity of an ion is set to 0, the minimum number of ions required to neutralize the charge of the system will be added.
>prep -sd
@u:prep,p:prep -ia,n:prep -ie
How to use: j_presto prep -sd SOLVENT_DENSITY

When adding ions using "j_presto prep -ia", you can set the density (in kg/L) of the solvent used to calculate the ion concentrations with this argument.
If this argument is not specified, the default density of water (1.0 kg/L) will be used.
If you are using a solvent other than water, be sure to set this value appropriately.
>prep -ie
@u:prep,p:prep -sd,n:prep -rr
How to use: j_presto prep -ie ION_EXCLUSION_DISTANCE

When adding ions using "j_presto prep -ia", the electric field at the positions of the heavy atoms representing each solvent molecule (the oxygen atom for water molecules) is calculated.
When a positive ion is added by replacing the solvent molecules located at the lowest electric field, while a negative ion replaces that at the highest electric field.
In this case, the absolute value of the electric field of the solvent molecules nearby the replaced ions will increase, causing positive and negative ions to be arranged in alternating clumps.
To prevent this situation, when one ion is placed, solvent molecules within a radius specified by this argument from the placed ions will not be replaced for ions during subsequent ion addition.
This ensures that the ions are kept at a certain distance from each other, preventing a localized clumping of ions.
If this argument is not set, the default value of 9.0 Å will be used.
>prep -rr
@u:prep,p:prep -ie,n:prep -shake
How to use: j_presto prep -rr RESIDUE_RENAME [RESIDUE_RENAME ...]

You can change residue names with this argument.
For example, if you want to replace water molecules represented by the residue name "HOH" with "WAT," you would specify it as "j_presto prep -rr HOH:WAT".
You can also perform multiple residue name replacements simultaneously.
>prep -shake
@u:prep,p:prep -rr
How to use: j_presto prep -shake [{H,A}]

To apply the SHAKE method for constraining covalent bonds, you specify it with this argument.
If you only want to constrain covalent bonds involving hydrogen bonds, use j_presto prep -shake or j_presto prep -shake H.
To constrain all covalent bonds, specify j_presto prep -shake A.
(Note that this argument cannot constrain covalent bonds specified with SSBOND or LINK.)
By setting this argument, a configuration file (*.shk) necessary for applying SHAKE during the simulation will be generated.
>md_run
@u:j_presto,p:prep,n:batch_set
The command "j_presto md_run" executes molecular dynamics simulations or energy minimization calculations.
The usage is as follows:
	j_presto md_run [INPUT_FILE]
You need to specify the input file (INPUT_FILE) that contains the settings for the calculations you wish to perform.
For details about the input file for molecular dynamics simulations and energy minimization calculations, please ask them this manual regarding "md.inp," and "min.inp", respectively.
>md.inp
@u:md_run
The input file for molecular dynamics simulations consists of the following four EXECUTION blocks:
	EXE> INPUT  (input block)
	EXE> MD     (MD setting block)
	EXE> OUTPUT (output block)
	EXE> END    (end block)
The INPUT, MD, and OUTPUT blocks begin with lines that start with EXE> and end with lines that contain QUIT as follows.
	EXE> INPUT
	    OPTION1
	    OPTION2
	    .
	    .
	QUIT
EXE> END declares the end of the entire input file and does not need to be terminated with QUIT.
When creating the md.inp file, it will be easier to first obtain the template using the command "j_presto get_tmpl md.inp" and then adjust it to fit your own settings.
For options that can be configured within these blocks, please consult the manual by asking about the respective block names.
>min.inp
@u:md_run
The input file for energy minimization calculations consists of the following four EXECUTION blocks:
	EXE> INPUT  (input block)
	EXE> MINI   (Mimimization calculation setting block)
	EXE> OUTPUT (output block)
	EXE> END    (end block)
The INPUT, MINI, and OUTPUT blocks begin with lines that start with EXE> and end with lines that contain QUIT as follows.
	EXE> INPUT
	    OPTION1
	    OPTION2
	    .
	    .
	QUIT
EXE> END declares the end of the entire input file and does not need to be terminated with QUIT.
When creating the min.inp file, it will be easier to first obtain the template using the command "j_presto get_tmpl min.inp" and then adjust it to fit your own settings.
For options that can be configured within these blocks, please consult the manual by asking about the respective block names.
>EXE> INPUT
@u:md.inp,n:EXE> MINI
This block in the input file for "j_presto md_run" is used to configure the necessary input files for the calculation.
It is commonly utilized in both md.inp and min.inp files.
Options are set as follows:
	[OPTION name]= [setting content]
Note that there should be no space between the option name and =, but there must be a space between = and the setting content.
The main option list that can be configured is as follows:
	TOPOLO : Input topology file
	COORDI : Input PDB file
	SETSHK : Input file for SHAKE settings
	SETBOU : Configuration file for CAP boundary
	REFCOO : PDB file for coordinate information used for positional restraints
	POSITI : Positional restraint configuration file
	DISTAN : Distance restraint configuration file
	DIHEDR : Dihedral angle restraint configuration file
	CELLVL : Cell level setting for cell multipole expansion method (CMM)
	CELSIZ : Cell size setting for CMM
	CELRES : Specification of atoms for residue-level grid assignment in CMM
	CLUSTA : Specification of atoms (Region A) to enhance conformational changes in ALSD simulation
	GEPSME : Method of Generalized Ensemble method for enhancing conformational sampling in Partial System (GEPS)
	SCALET : Scaled energy term specification
	LWEIGH : Weight of lambda particle for ALSD simulation
	LTCNTL : Temperature control of lambda particle for ALSD simulation
For details about each option, please consult the manual.
>CAPbound.inp
@u:SETBOU
Input file to perform calculations with CAP boundary.
In simulations using CAP boundaries, the region where the solvent and solute can exist is defined, and when the molecules of the system move outside this region (beyond the CAP boundary), a force is applied to pull them back inside.
Unlike the Periodic Boundary Condition (PBC), which assumes that the system's copies are infinitely repeated, a CAP-based simulation treats the system as if it is a droplet floating in a vacuum.
Molecules near the boundary are influenced by the boundary, so it is necessary to set the distance between the solute and the boundary to be sufficiently large (at least 12 Å as a guideline).
On the other hand, there is no interaction with its own copies, as in PBC.
When simulating a system containing hydrophobic solute molecules, such as proteins, and polar solvent molecules, such as water, the solute molecules tend to adhere to the CAP boundary, avoiding the solvent.
To prevent this issue, the solute is assigned a smaller boundary than the solvent.
The length of the buffer region between the solute and solvent CAP boundaries can be specified in this file using "BOUND> BUFFER", and it is recommended to ensure a buffer of at least 4 Å.
The options in this file can be set as follows:
	BOUND> [option name]
	[setting 1]
	[setting 2]
	.
	.
The main option name list that can be configured is as follows:
	BOUND> SHAPE   : CAP boundary shape
	BOUND> CENTER  : CAP boundary center
	BOUND> INCLUDE : Specification molecules to which the CAP boundary for the solvent is applied
	BOUND> RADIUS  : Radius of sphere-shape CAP boundary for solvent
	BOUND> FORCE   : Force constant of CAP boundary for solvent
	BOUND> LIST    : Specification atoms to which the CAP boundary for solute is applied
	BOUND> BUFFER  : Length of the buffer region between the solute and solvent CAP boundaries
	BOUND> FORPRO  : Force constant of CAP boundary for solute
For details about each option, please consult the manual like "BOUND> SHAPE".
>psr.inp
@u:POSITI
This file is used to configure the settings for applying position restraints in simulations.
You can specify this file in the input file (md.inp or min.inp) for running "j_presto md_run" by using "POSITI" option in the "EXE> INPUT" block.
The specification is made through a PSR block, structured as:
	PSR> [Option Name]
	 .
	 .
	 .
	END
with two available options:
	PSR> LIST
	PSR> RADIUS
For detailed information about these options, please refer to the manual like "PSR> LIST".
Position restraints are useful for preventing structural collapse during the early stages of the simulation, such as maintaining the backbone structure of proteins.
The template for the psr.inp file can be obtained via "j_presto get_tmpl psr.inp", which can be conveniently modified to suit your needs.
> dsr.inp
@u:DISTAN
This file is used to configure the setting for applying distance restraints in simulations.
You can specify this file in the input file (md.inp or min.inp) for running "j_presto md_run" by using "DISTAN" option in the "EXE> INPUT" block.
The specification is made through a DSR block, structured as:
        DSR> LIST
         .
         .
         .
        END
For detailed information about "DSR> LIST" options, please refer to the manual.
The template for the dsr.inp file can be obtained via "j_presto get_tmpl dsr.inp", which can be conveniently modified to suit your needs.
> dhr.inp
@u:DIHEDR
This file is used to configure the setting for applying dihedral angle restraints in simulations.
You can specify this file in the input file (md.inp or min.inp) for running "j_presto md_run" by using "DIHEDR" option in the "EXE> INPUT" block.
The specification is made through a DHR block, structured as:
        DHR> [Option Name]
         .
         .
         .
        END
with two available options:
        DHR> NUMBER
        DHR> LIST
For detailed information about these options, please refer to the manual like "DHR> NUMBER".
The template for the dhr.inp file can be obtained via "j_presto get_tmpl dhr.inp", which can be conveniently modified to suit your needs.
>EXE> MD
@u:md.inp,p:EXE> INPUT,n:EXE> OUTPUT
This block in the input file for "j_presto md_run" is used to configure the necessary setting options for the MD simulations.
It is utilized only in md.inp file.
Options are set as follows:
        [OPTION name]= [setting content]
Note that there should be no space between the option name and =, but there must be a space between = and the setting content.
The main option list that can be configured is as follows:
	METHOD : Simulation method
	LOOPLI : Number of simulation steps
	TIMEST : Length of simulation time steps
	UPDATE : Frequency of nearest neighbor list updates
	CMMUPD : Frequency of parametr updates for CMM
	RESTAR : Specify restart for calculations
	NAMERI : Input restart file
	NAMERO : Output restart file
	TEMPCO : Temperature control
	SETTEM : Temperature of the system
	STARTT : Temperature at time step 0
	HEATLO : Simulation steps for heating
	RELAXA : Relaxation time for Berendsen thermostat
	CAL15M : Electrostatic interaction calculation method
	CUTLEN : Cut-off length
	INITIA : Initial velocity settings
	RANDOM : Random seed for initial velocity generation
	BOUNDA : Periodic boundary condition (PBC)
	XMINCL : Lower bound of X coordinate for PBC Cell
	XMAXCL : Upper bound of X coordinate for PBC Cell
	YMINCL : Lower bound of Y coordinate for PBC Cell
	YMAXCL : Upper bound of Y coordinate for PBC Cell
	ZMINCL : Lower bound of Z coordinate for PBC Cell
	ZMAXCL : Upper bound of Z coordinate for PBC Cell
	STOPCE : Fix the center of mass of the system
	NSTPCN : Chain number for fixing center of mass
	DIEVAL : Dielectric constant
	TEMPER : Temperature for constraint forces
	WETPSR : Weighting factor for position restraints
	WETDSR : Weighting factor for distance restraints
	WETDHR : Weighting factor for dihedral restraints
	COVSHK : Criterion of SHAKE convergence 
	LIMSHK : Loop limit for SHAKE convergence
	NAMEGE : Input parameter file for Generalized Ensemble method (McMD and ALSD)
	NAMETO : Total energy and lambda for ALSD output file
	MNTRTO : Total energy and lambda for ALSD output format
        LAMBDA : initial Lambda value for ALSD
	PARALV : Level of parallel computation
	N_SIMD : Number of parallelization for SIMD
	OUTATM : Final atom number for output coordinates
	NAMECO : Coordinate output file
	MNTRCO : Coordinate output format
	OUTCOO : Coordinate output frequency
	NAMEVE : Velocity output file
	MNTRVE : Velocity output format
	OUTVEL : Velocity output frequency
	NAMEEN : Energy output file
	MNTREN : Energy output format
	OUTLOG : Frequency of output log (and temporary restart file) steps
	LOGFOR : Level of log output
	FDEBUG : Flag for debug of j_presto md_run

For details about each option, please consult the manual like "METHOD".
>EXE> MINI
@u:min.inp,p:EXE> INPUT,n:EXE> OUTPUT
This block in the input file for "j_presto md_run" is used to configure the necessary setting options for the energy minimization calculations.
It is utilized only in min.inp file.
Options are set as follows:
        [OPTION name]= [setting content]
Note that there should be no space between the option name and =, but there must be a space between = and the setting content.
The main option list that can be configured is as follows:
	METHOD : Simulation method
	LOOPLI : Number of simulation steps
	UPDATE : Frequency of nearest neighbor list updates
	CONVGR : Threshold of RMSF convergence
	ISTEPL : Initial step length
	UPRATE : Up rate for steepest descent
	DOWNRA : Down rate for steepest descent
	LINESE : Loop limit of line search for conjugate gradient
	CONVLI : Conversion criterion of line search for conjugate gradient
	CAL15M : Electrostatic interaction calculation method
	CUTLEN : Cut-off length
	BOUNDA : Periodic boundary condition
	XMINCL : Lower bound of X coordinate for PBC Cell
	XMAXCL : Upper bound of X coordinate for PBC Cell
	YMINCL : Lower bound of Y coordinate for PBC Cell
	YMAXCL : Upper bound of Y coordinate for PBC Cell
	ZMINCL : Lower bound of Z coordinate for PBC Cell
	ZMAXCL : Upper bound of Z coordinate for PBC Cell
	DIEVAL : Dielectric constant
	TEMPER : Temperature for constraint forces
	WETPSR : Weighting factor for position restraints
	WETDSR : Weighting factor for distance restraints
	WETDHR : Weighting factor for dihedral restraints
	COVSHK : Criterion of SHAKE convergence 
	LIMSHK : Loop limit for SHAKE convergence
        LAMBDA : Lambda value for energy scaling
	PARALV : Level of parallel computation
	N_SIMD : Number of parallelization for SIMD
	MONITO : Frequency of monitoring log
	LOGFOR : Level of log output

For details about each option, please consult the manual like "METHOD".
>EXE> OUTPUT
@u:md.inp,p:EXE> MD,n:EXE> END
This block in the input file for "j_presto md_run" is used to configure the output file for the calculation.
It is commonly utilized in both md.inp and min.inp files.
The following option can be set:
	OCOORD: output PDB file
For details about each option, please consult the manual.
>EXE> END
@u:md.inp,p:EXE> OUTPUT
This block in the input file for "j_presto md_run" is used to declare the end of the input file.
>TOPOLO
@u:EXE> INPUT,n:COORDI
This option sets the input topology file (*.tpl) and can be set in the "EXE> INPUT" block of md.inp and min.inp.
This topology file can be created using "j_prest prep".
>COORDI
@u:EXE> INPUT,p:TOPOLO,n:SETSHK
This option specifies the input PDB file (*.pdb) and can be set in the "EXE> INPUT" blocks of md.inp and min.inp.
The PDB file formatted for j_presto can be created using "j_presto prep".
>OCOORD
@u:EXE> OUTPUT
This option can be set in the "EXE> OUTPUT" blocks of md.inp and min.inp.
This option sets the output PDB file name for the final conformation of the simulation or the energy minimization calculation.
>SETSHK
@u:EXE> INPUT,p:COORDI,n:SETBOU
This option sets the input SHAKE file (*.shk) and can be set in the "EXE> INPUT" block of md.inp and min.inp.
The SHAKE file can be created using "j_presto prep".
>SETBOU
@u:EXE> INPUT,p:SETSHK,n:REFCOO
This is a configuration option for the input file used in calculations with CAP boundaries and can be set in the "EXE> INPUT" block in md.inp and min.inp.
You can obtain a template for this file using "j_presto get_tmpl CAPbound.inp".
For details on the settings that can be specified in this file, refer to "CAPbound.inp".
>REFCOO
@u:EXE> INPUT,p:SETBOU,n:POSITI
This option specifies the PDB file containing the structure used as a reference for applying position restraints during the simulation.
It is important to ensure that this PDB file is consistent with the initial structure PDB file specified in the "COORDI" option.
When applying position constraints, it is essential to input not only this file but also the position constraint settings file (psr.inp) through the "POSITI" option.
>POSITI
@u:EXE> INPUT,p:REFCOO,n:DISTAN
This option specifies the input file related to position restraints (psr.inp).
You can obtain the template for the psr.inp file using the command:
	j_presto get_tmpl psr.inp
making it convenient to modify this file appropriately for your use.
For detailed settings of the psr.inp file, please refer to "j_presto manual" and inquire "psr.inp".
>DISTAN
@u:EXE> INPUT,p:POSITI,n:DIHEDR
This option specifies the input file related to distance restraints (dsr.inp).
You can obtain the template for the dsr.inp file using the command:
	j_presto get_tmpl dsr.inp
making it convenient to modify this file appropriately for your use.
For detailed settings of the dsr.inp file, please refer to "j_presto manual" and inquire "dsr.inp".
>DIHEDR
@u:EXE> INPUT,p:DISTAN,n:CELLVL
This option specifies the input file related to dihedral angle restraints (dhr.inp).
You can obtain the template for the dhr.inp file using the command:
        j_presto get_tmpl dhr.inp
making it convenient to modify this file appropriately for your use.
For detailed settings of the dhr.inp file, please refer to "j_presto manual" and inquire "dhr.inp".
> CELLVL
@u:EXE> INPUT,p:DIHEDR,n:CELSIZ
When you choose cell multipole expansion method (CMM) for electrostatic interaction calculation (when you set CAL15M= CMM), space is divided into a grid structure.
The smallest grid (level 1 grid) consists of 2x2x2 = 8 cells, which are then grouped into a level 2 grid.
Similarly, a level 3 grid is formed by grouping eight level 2 grids, and so on, creating a hierarchical structure.

When calculating the electrostatic interactions acting on a specific atom, the interactions from atoms belonging to nearby grids are computed precisely.
For atoms in slightly farther grids, the interactions are approximated using contributions from level 1 grids.
Even more distant interactions are approximated based on contributions from level 2 grids.
This hierarchical approach allows for both high accuracy and computational efficiency.

In this option, you can set the maximum level of the grid.
The j_presto corresponds to level 3 to 5.
The default setting is 3.
If you wish to configure a cell level other than the default, you can do so using this option.
Please note that even if you set this value, j_presto may internally adjust it to an appropriate level.
>CELSIZ
@u:EXE> INPUT,p:CELLVL,n:CELRES
When you choose cell multipole expansion method (CMM) for electrostatic interaction calculation (when you set CAL15M= CMM), space is divided into a grid structure.
The smallest grid (level 1 grid) consists of 2x2x2 = 8 cells, which are then grouped into a level 2 grid.
Similarly, a level 3 grid is formed by grouping eight level 2 grids, and so on, creating a hierarchical structure.

When calculating the electrostatic interactions acting on a specific atom, the interactions from atoms belonging to nearby grids are computed precisely.
For atoms in slightly farther grids, the interactions are approximated using contributions from level 1 grids.
Even more distant interactions are approximated based on contributions from level 2 grids.
This hierarchical approach allows for both high accuracy and computational efficiency.

In this option, you can set the level 1 grid size.
The default setting is 6.0 Å.
If you wish to configure a cell level other than the default, you can do so using this option.
Please note that even if you set this value, j_presto may internally adjust it to an appropriate level.
> CELRES
@u:EXE> INPUT,p:CELSIZ,n:CLUSTA
When you choose cell multipole expansion method (CMM) for electrostatic interaction calculation (when you set CAL15M= CMM), space is divided into a grid structure.
The smallest grid (level 1 grid) consists of 2x2x2 = 8 cells, which are then grouped into a level 2 grid.
Similarly, a level 3 grid is formed by grouping eight level 2 grids, and so on, creating a hierarchical structure.

When calculating the electrostatic interactions acting on a specific atom, the interactions from atoms belonging to nearby grids are computed precisely.
For atoms in slightly farther grids, the interactions are approximated using contributions from level 1 grids.
Even more distant interactions are approximated based on contributions from level 2 grids.
This hierarchical approach allows for both high accuracy and computational efficiency.

In this calculation, it is necessary to determine which grid each atom belongs to.
Instead of using the individual positions of each atom, you can determine the grid for a residue by using the position of its center of mass.
This allows you to assign the same grid to all atoms of a residue such as water molecule.
Specify the atom groups to which grids should be assigned for each residue using the "atom specifier" as follows:
	CELRES= [atom_specifier]
For details on atom specification using the atom specifier, refer to the "atom specifier" section.
However, all residues that include at least one of the specified atoms are applied for the residue-wise grid assignment.
When you use CMM, "CELRES= WAT:*" is recommended.
>CLUSTA
@u:EXE> INPUT,p:CELRES,n:GEPSME
If you want to conduct ALSD simulations, you need to select the region (Region A) where you wish to enhance confirmational changes using this option.
Specify the atom groups for the Region A using the "atom specifier" as follows: 
        CLUSTA= [atom_specifier]
For details on atom specification using the atom specifier, refer to the "atom specifier" section.
> GEPSME
@u:EXE> INPUT,p:CLUSTA,n:SCALET
When you want to perform ALSD simulation, please set this option as follows:
	GEPSME= LMD
>SCALET
@u:EXE> INPUT,p:GEPSME,n:LWEIGH
This option allows you to select which energy terms to enhance when performing ALSD simulations.
The selection is made using a four-digit number as follows:
	SCALET= 0010
It is known that ALSD simulations that do not scale both the electrostatic interaction energy and van der Waals energy, or at least one of these two energy terms, have low structural exploration efficiency.
Therefore, in j_presto, these two energy terms are always scaled.
The four-digit number provided in this option specifies the scaling for the bond, angle, torsion, and improper torsion terms, respectively.
0 means "not scaled" and 1 means "scaled".
Only for the torsion term, you can also select options 2 (scale all except peptide bonds) or 3 (scale all except peptide bonds, but scale the XXX-PRO peptide bond).
The default setting is "0030".
>LWEIGH
@u:EXE> INPUT,p:SCALET,n:LTCNTL
In ALSD simulations, just like the atoms consisting the system, the scaling factor λ also moves according to the Hamiltonian.
This option specifies the mass of the λ particle.
If this option is not specified, the mass is set to the total mass of the atoms in the region where conformation changes are enhanced (i.e. the atoms selected by "CLUSTA" option).
However, if you explicitly want to set this value, you can use this option as follows:
	LWEIGH= 1000.0
>LTCNTL
@u:EXE> INPUT,p:LWEIGH
In ALSD simulations, just like the atoms consisting the system, the scaling factor λ also moves according to the Hamiltonian.
If you want to control the temperature of the λ particle, set this option as follows:
	LTCNTL= YES
In the above example, the temperature control of λ is coupled with the atoms of the system.
The default setting is "NO," which means that temperature control is not applied directly, but is controlled indirectly through the Hamiltonian.
>METHOD
@u:EXE> MD,n:LOOPLI
This option allows you to set the calculation method, with different parameters available for configuration in the "EXE> MD" block of md.inp and "EXE> MINI" block of min.inp.
In EXE> MD in md.inp, the following options can be selected:
	CONS : MD with constant temperature (Berendsen method)
	MICR : Micro-canonical MD
	CANO : Canonical MD (Hoover & Evans method)
	  GE : Generalized Ensemble method such as McMD and ALSD
The default setting is "CANO".
In EXE> MINI in min.inp, the following options are available:
	STEE : Steepest descent
	CONJ : Conjugate gradient
The default setting is "STEE".
>LOOPLI
@u:EXE> MD,p:METHOD,n:TIMEST
This option sets loop limit number (number of steps) of MD simulation or energy minimization calculation and can be set in the "EXE> MD" block of md.inp and "EXE> MINI" block of min.inp.
The default is 0.
>TIMEST
@u:EXE> MD,p:LOOPLI,n:UPDATE
This option sets the length of one step in the MD simulation (in femtoseconds) and can be set in "EXE> MD" block of md.inp.
The default is 2.0 (fs).
>UPDATE
@u:EXE> MD,p:TIMEST,n:CMMUPD
This option sets the update frequency for the nearest neighbor list used to calculate interactions.
It can be set in "EXE> MD" block of md.inp and "EXE> MINI" block of min.inp.
The default is 10 (every ten steps).
>CMMUPD
@u:EXE> MD,p:UPDATE,n:RESTAR
This option specifies the update frequency for long-range electrostatic interactions when "CAL15M= CMM" (setting the electrostatic interaction calculation method to CMM) is configured.
It can be set in "EXE> MD" block of md.inp.
Since this parameter must be updated whenever the nearest neighbor list is updated, the value specified in "UPDATE" must be divisible by the value set in this option.
The default is 5 (every five steps).
Even when using CMM, this option cannot be set for energy minimization calculations; however, it is updated internally at every step, meaning it effectively is 1.
>RESTAR
@u:EXE> MD,p:CMMUPD,n:NAMERI
By setting this option to "RESTAR= YES," you can read the restart file specified by the "NAMERI" option and continue the calculation from the previous simulation.
It can be set in "EXE> MD" block of md.inp.
The default setting is "NO.
>NAMERI
@u:EXE> MD,p:RESTAR,n:NAMERO
When "RESTAR= YES" is set, this option is used to specify the input restart file.
It can be set in "EXE> MD" block of md.inp.
>NAMERO
@u:EXE> MD,p:TEMPCO,n:NAMERI
This option sets the name of the output restart file.
It can be set in "EXE> MD" block of md.inp.
By specifying the output file with the "NAMERI" option and setting "RESTAR= YES," you can restart the simulation from the final step of the current simulation.
>TEMPCO
@u:EXE> MD,p:NAMERO,n:SETTEM
This option allows you to choose the temperature control method when "METHOD= CANO or GE" is set.
It can be set in "EXE> MD" block of md.inp.
In the thermostat used for CANO and GE (Hoover & Evans method), differences in temperature (i.e., differences of average velocities of constituent atoms) may arise between the solute and solvent during the simulation.
To suppress this effect, you can implement a temperature control method that operates on each molecular species rather than the entire system.
If you choose to use this method, set "TEMPCO= YES" (default).
If you prefer to control the temperature for the entire system, set "TEMPCO= NO."
>SETTEM
@u:EXE> MD,p:TEMPCO,n:STARTT
This option sets the temperature of the system.
It can be set in "EXE> MD" block of md.inp.
The default is 300K.
Be careful not to confuse it with the similarly named option "TEMPER".
>STARTT
@u:EXE> MD,p:SETTEM,n:HEATLO
This option sets the temperature at simulation step 0.
This option is used when you want to change the system's temperature during the simulation.
It can be set in "EXE> MD" block of md.inp.
From step 0 to the number of steps specified in the "HEATLO" option, the system's temperature will change linearly from the temperature set in "STARTT" to the temperature set in "SETTEM".
After that, the simulation will be conducted at a constant temperature.
The default value is 300 K.
>HEATLO
@u:EXE> MD,p:STARTT,n:RELAXA
This option specifies the number of steps to change the system's temperature from the temperature set by "STARTT" to the temperature set by "SETTEM".
This option is used when you want to vary the system's temperature during the simulation.
The default value is 0.
>RELAXA
@u:EXE> MD,p:HEATLO,n:CAL15M
This option sets the relaxation time of the Berendsen thermostat when using the method "METHOD= CONS," which refers to MD with constant temperature (Berendsen method).
It can be set in "EXE> MD" block of md.inp.
The default value is 40.0.
>CONVGR
@u:EXE> MINI,p:UPDATE,n:ISTEPL
This option sets the RMSF (root mean square force) threshold for determining the convergence of an energy minimization calculation.
It can be specified in the "EXE> MINI" block of min.inp file.
The default value is 0.1.
>ISTEPL
@u:EXE> MINI,p:CONVGR,n:UPRATE
This option sets the initial step size for changing the structure during an energy minimization calculation.
It can be specified in the "EXE> MINI" block of min.inp file.
The default value is 0.01.
>UPRATE
@u:EXE> MINI,p:ISTEPL,n:DOWNRA
This option sets the scaling factor for adjusting the step size in the steepest descent energy minimization calculation when a decrease in energy is achieved by a structural change.
It can be specified in the "EXE> MINI" block of min.inp file.
The default value is 1.2.
>DOWNRA
@u:EXE> MINI,p:UPRATE,n:LINESE
This option sets the scaling factor for adjusting the step size in the steepest descent energy minimization calculation when a structural change does not result in an energy decrease.
It can be specified in the "EXE> MINI" block of min.inp file.
The default value is 0.6.
>LINESE
@u:EXE> MINI,p:DOWNRA,n:CONVLI
This option sets the loop limit for line searches in conjugate gradient (energy minimization calculation), and it can be configured in the "EXE> MINI" block of min.inp file.
The default value is 10.
>CONVLI
@u:EXE> MINI,p:LINESE,n:CAL15M
This option sets the conversion criterion for determining the convergence of line searches in conjugate gradient (energy minimization calculation) and can be configured in the "EXE> MINI" block of min.inp file.
The default value is 0.1.
>CAL15M
@u:EXE> MD,p:RELAXA,n:CUTLEN
This option is used to specify the method for calculating electrostatic interactions and can be set in both "EXE> MD" block of md.inp and "EXE> MINI" block of min.inp.
The available options are as follows:
	CMM  : cell multipole expansion method
	ATOM : atom-based cutoff
	RESI : residue-based cutoff
	ZD   : zero dipole summation method
The default setting is "CMM".
>CUTLEN
@u:EXE> MD,p:CAL15M,n:INITIA
This option is used to set the cutoff distance (Å) for calculating long-range interactions, and it can be specified in both "EXE> MD" block of md.inp and "EXE> MINI" block of min.inp.
The default value is 12.0 Å.
When the method for calculating electrostatic interactions is set to cell multipole expansion (CMM), this cutoff distance is applied only to the calculation of van der Waals (vdW) interactions.
For other methods, this cutoff distance is used for both van der Waals and electrostatic interactions.
>INITIA
@u:EXE> MD,p:CUTLEN,n:RANDOM
This option is used to set the initial velocities of atoms when performing a simulation without using a restart file.
It can be specified in the "EXE> MD" block of md.inp file, with the following settings:
	ZERO : Sets the initial velocities of the atoms to zero.
	SET  : Sets the initial velocities based on the random number seed provided by the "RANDOM" option.
The default is "SET".
>RANDOM
@u:EXE> MD,p:INITIA,n:BOUNDA
This option is used to set the random number seed for generating the initial velocities of atoms when performing a simulation without using a restart file.
It can be specified in the "EXE> MD" block of md.inp file, and any integer value can be assigned.
The default is "584287".
>BOUNDA
@u:EXE> MD,p:RANDOM,n:XMINCL
To use periodic boundary conditions (PBC), set this option to "BOUNDA= PBC".
It can be configured in both "EXE> MD" block of md.inp and "EXE> MINI" block of min.inp.
The default setting is "NO".
When this option is set, you must specify the lower and upper bounds of the coordinates for the PBC cell using "XMINCL," "XMAXCL," "YMINCL," "YMAXCL," "ZMINCL," and "ZMAXCL."
>XMINCL
@u:EXE> MD,p:BOUNDA,n:XMAXCL
This option is used to set the lower boundary coordinate of the x-axis for the periodic boundary condition (PBC) cell and can be configured in both "EXE> MD" block of md.inp and "EXE> MINI" block of min.inp.
Please note that to perform calculations with PBC, it is necessary to separately set "BOUNDA= PBC."
>XMAXCL
@u:EXE> MD,p:XMINCL,n:YMINCL
This option is used to set the upper boundary coordinate of the x-axis for the periodic boundary condition (PBC) cell and can be configured in both "EXE> MD" block of md.inp and "EXE> MINI" block of min.inp.
Please note that to perform calculations with PBC, it is necessary to separately set "BOUNDA= PBC."
>YMINCL
@u:EXE> MD,p:XMAXCL,n:YMAXCL
This option is used to set the lower boundary coordinate of the y-axis for the periodic boundary condition (PBC) cell and can be configured in both "EXE> MD" block of md.inp and "EXE> MINI" block of min.inp.
Please note that to perform calculations with PBC, it is necessary to separately set "BOUNDA= PBC."
>YMAXCL
@u:EXE> MD,p:YMINCL,n:ZMINCL
This option is used to set the upper boundary coordinate of the y-axis for the periodic boundary condition (PBC) cell and can be configured in both "EXE> MD" block of md.inp and "EXE> MINI" block of min.inp.
Please note that to perform calculations with PBC, it is necessary to separately set "BOUNDA= PBC."
>ZMINCL
@u:EXE> MD,p:YMAXCL,n:ZMAXCL
This option is used to set the lower boundary coordinate of the z-axis for the periodic boundary condition (PBC) cell and can be configured in both "EXE> MD" block of md.inp and "EXE> MINI" block of min.inp.
Please note that to perform calculations with PBC, it is necessary to separately set "BOUNDA= PBC."
>ZMAXCL
@u:EXE> MD,p:ZMINCL,n:STOPCE
This option is used to set the upper boundary coordinate of the z-axis for the periodic boundary condition (PBC) cell and can be configured in both "EXE> MD" block of md.inp and "EXE> MINI" block of min.inp.
Please note that to perform calculations with PBC, it is necessary to separately set "BOUNDA= PBC."
>STOPCE
@u:EXE> MD,p:ZMAXCL,n:NSTPCN
This option is used to fix the translational and/or rotational motion of the system's center of mass during MD simulations and can be set in "EXE> MD" block of md.inp.
By default, the atoms used to calculate the center of mass are from the first chain, but this can be extended to atoms from the first chain to a specified chain using the NSTPCN option.
The STOPCE option allows you to choose from four settings:
	TRAN : fix translational motion
	ROTA : fix rotational motion
	BOTH : fix both translational and rotational motion
	NO   : do not fix
The default is "NO".
>NSTPCN
@u:EXE> MD,p:STOPCE,n:DIEVAL
This option specifies the last chain number used to calculate the center of mass when fixing the translational or rotational motion of the system using the STOPCE option.
It can be set in the "EXE> MD" block of md.inp file.
For example, if "NSTPCN= 3" is specified, atoms from the first chain to the third chain are used for the center of mass calculation.
The default value is 1.
>DIEVAL
@u:EXE> MD,p:NSTPCN,n:TEMPER
This option sets the dielectric constant and can be configured in both "EXE> MD" block of md.inp and "EXE> MINI" block of min.inp.
Any positive real number can be specified, with the default value being 1.
>TEMPER
@u:EXE> MD,p:DIEVAL,n:WETPSR
This option sets the temperature used when calculating restraint forces for position restraints, distance restraints, and dihedral angle restraints.
It can be configured in both "EXE> MD" block of md.inp and "EXE> MINI" block of min.inp.
Any positive real number can be specified, with the default value being 300 K.
>WETPSR
@u:EXE> MD,p:TEMPER,n:WETDSR
This option sets a scaling factor for position restraints, which can be configured in both "EXE> MD" block of md.inp and "EXE> MINI" block of min.inp.
Any positive real number can be specified, with the default value being 1.
The force constants for each restraint are input in the psr.inp file, but this option is used to temporarily scale them uniformly.
>WETDSR
@u:EXE> MD,p:WETPSR,n:WETDHR
This option sets a scaling factor for distance restraints, which can be configured in both "EXE> MD" block of md.inp and "EXE> MINI" block of min.inp.
Any positive real number can be specified, with the default value being 1.
The force constants for each restraint are input in the dsr.inp file, but this option is used to temporarily scale them uniformly.
>WETDHR
@u:EXE> MD,p:WETDSR,n:COVSHK
This option sets a scaling factor for dihedral angle restraints, which can be configured in both "EXE> MD" block of md.inp and "EXE> MINI" block of min.inp.
Any positive real number can be specified, with the default value being 1.
The force constants for each restraint are input in the dhr.inp file, but this option is used to temporarily scale them uniformly.
>COVSHK
@u:EXE> MD,p:WETDHR,n:LIMSHK
This option is to set criterion of SHAKE convergence and can be set in both "EXE> MD" block of md.inp and "EXE> MINI" block of min.inp.
The default is 0.000001
>LIMSHK
@u:EXE> MD,p:COVSHK,n:NAMEGE
This option sets the loop limit value for converging the SHAKE algorithm and can be set in "EXE> MD" block of md.inp and "EXE> MINI" block of min.inp.
Any positive integer can be specified, with the default value being 1000.
>NAMEGE
@u:EXE> MD,p:LIMSHK,n:NAMETO
This option specifies an input parameter file name for Generalized Ensemble method (GE) such as McMD and ALSD and can be set in the "EXE> MD" block of md.inp.
This parameter file (*.nf) is generated by "j_presto GEprep".
>NAMETO
@u:EXE> MD,p:NAMEGE,n:MNTRTO
This option specifies the output file name for total energy and lambda for ALSD and can be set in the "EXE> MD" block of md.inp.
This file is required to make parameter files for GE (*.nf) set with "NAMEGE", the parameter file can be created by "j_presto GEprep".
>MNTRTO
@u:EXE> MD,p:NAMETO,n:LAMBDA
This option specifies the format of the output file for total energy and lambda for ALSD required when running McMD or ALSD simulations, and can be set in the "EXE> MD" block of md.inp.
You can choose from the following four options:
        NO   : no output
        ASCI : ASCII
        SING : single-precision binary
        DOUB : double-precision binary
The default is ASCI.
To input this output file into the program that creates parameter files (*.nf, set with "NAMEGE" option) for running McMD or ALSD simulations, please select the "ASCI" format.
>LAMBDA
@u:EXE> MD,p:MNTRTO,n:PARALV
This option is for setting the variable "lambda," which scales interatomic interactions in the ALSD simulation, a proprietary method implemented in the j_presto program.
It can be used in both "EXE> MD" block of md.inp and "EXE> MINI" block of min.inp.
When the value of lambda is set to 1, the interactions are equivalent to those in a conventional simulation.
When lambda is less than 1, the interactions weaken, promoting structural changes.
You can set any positive real number, but be cautious that as the value approaches 0 (generally below 0.3), atom collisions and other issues may occur, potentially leading to unstable calculations.
At the start of the simulation, the value of λ for ALSD is forcibly set to the value specified by this option.
If you are using a restart file to continue the simulation from the last calculation, you can carry over the λ value from the final step of the previous simulation if this option is not set.
However, be aware that specifying this option will forcibly change the λ value.
>PARALV
@u:EXE> MD,p:LAMBDA,n:N_SIMD
The option to set a method for OpenMP parallel calculations, which can be set in both "EXE> MD" block of md.inp and "EXE> MINI" block of min.inp.
With this option, you can choose one of the following three methods:
	REDU (reduction): Parallelization using OpenMP's reduction. Generally slower and not recommended.
	HIGH            : The fastest option for systems with around tens of thousands of atoms or for moderate levels of parallelization.
	DOUB (double)   : Typically faster than HIGH for large-scale systems with over a hundred thousand atoms or for highly parallelized calculations.
While the guidelines for choosing the appropriate method are provided, it is recommended to perform test calculations and compare the computation speed to determine the most effective parallelization method for your specific system.
>N_SIMD
@u:EXE> MD,p:PARALV,n:OUTATM
The option to set the number of SIMD parallel calculations, which can be set in both "EXE> MD" block of md.inp and "EXE> MINI" block of min.inp.
The optimal parallel number for the fastest computation depends on the system and environment, so it is necessary to test various values to find the best conditions.
If this option is not set, md_run will sequentially change the SIMD count (1, 2, 4, 8, etc.) while measuring computation time to automatically determine the most efficient SIMD parallel number.
The selected parallel number will be output in the log file as "SIMD PARALLELAZATION was set to ...".
While this mechanism generally works well, there are rare occasions when it fails to determine the optimal parallel number, resulting in slower computations.
It is advisable to first conduct test calculations without setting this option and, once the optimal SIMD parallel number is found, to explicitly provide this option in the actual computations.
>OUTATM
@u:EXE> MD,p:N_SIMD,n:NAMECO
An option to specify the last atomic number to output in the coordinate output file, which can be set in "EXE> MD" block of md.inp.
When outputting coordinates for large systems, the data volume can become very large.
This option can be used to save disk space.
For example, if only the solute's coordinate information is needed for analysis and there's no need to output information about ions or solvent, setting "OUTATM= 300" (for a solute with 300 atoms) will output the coordinate information for atoms numbered 1 to 300 only in the output coordinate file set in "NAMECO" option.
>NAMECO
@u:EXE> MD,p:OUTATM,n:MNTRCO
The option to set the coordinate output file name, which can be set in "EXE> MD" block of md.inp.
>MNTRCO
@u:EXE> MD,p:NAMECO,n:OUTCOO
The option to set the format for the coordinate output file set by "NAMECO", which can be set in "EXE> MD" block of md.inp.
You can choose from the following four options:
	NO   : no output
	ASCI : ASCII
	SING : single-precision binary
	DOUB : double-precision binary
The default is SING.
>OUTCOO
@u:EXE> MD,p:MNTRCO,n:NAMEVE
The option to set the frequency of outputting values to the coordinate output file set by "NAMECO", which can be set in "EXE> MD" block of md.inp.
For example, if OUTCOO=10, values will be output every 10 steps.
If this option is not set, coordinate data will not be output.
>NAMEVE
@u:EXE> MD,p:OUTCOO,n:MNTRVE
The option to set the velocity output file name, which can be set in "EXE> MD" block of md.inp.
>MNTRVE
@u:EXE> MD,p:NAMEVE,n:OUTVEL
The option to set the format for the velocity output file set by "NAMEVE", which can be set in "EXE> MD" block of md.inp.
You can choose from the following four options:
	NO   : no output
	ASCI : ASCII
	SING : single-precision binary
	DOUB : double-precision binary
The default is NO.
>OUTVEL
@u:EXE> MD,p:MNTRVE,n:NAMEEN
The option to set the frequency of outputting values to the velocity output file set by "NAMEVE", which can be set in "EXE> MD" block of md.inp.
For example, if OUTVEL=10, values will be output every 10 steps.
If this option is not set, velocity data will not be output.
>NAMEEN
@u:EXE> MD,p:OUTVEL,n:MNTREN
The option to set the energy output file name, which can be set in "EXE> MD" block of md.inp.
>MNTREN
@u:EXE> MD,p:NAMEEN,n:OUTENE
The option to set the format for the energy output file set by "NAMEEN", which can be set in "EXE> MD" block of md.inp.
You can choose from the following four options:
	NO   : no output
	ASCI : ASCII
	SING : single-precision binary
	DOUB : double-precision binary
The default is NO.
>OUTENE
@u:EXE> MD,p:MNTREN,n:OUTLOG
The option to set the frequency of outputting values to the energy output file set by "NAMEEN", which can be set in "EXE> MD" block of md.inp.
For example, if OUTENE=10, values will be output every 10 steps.
If this option is not set, energy values will not be output.
>OUTLOG
@u:EXE> MD,p:OUTENE,n:MONITO
The setting option for log output frequency that can be used in "EXE> MD" block of md.inp.
At the same time, temporary restart file is output.
For example, if "OUTLOG= 10", the log will be output every 10 steps.
If this option is not set, logs during the calculation will not be output.
>MONITO
@u:EXE> MD,p:OUTLOG,n:LOGFOR
The setting option for log output frequency that can be used in "EXE> MINI" block of min.inp.
For example, if "MONITO= 10", the log will be output every 10 steps.
If this option is not set, the default is 10.
>LOGFOR
@u:EXE> MD,p:MONITO,n:FDEBUG
The setting option for log output levels that can be used in both "EXE> MD" block of md.inp and "EXE> MINI" block of min.inp.
You can specify either SHOR (short log) or DETA (detailed log).
The default value is SHOR.
>FDEBUG
@u:EXE> MD,p:LOGFOR
An option for debugging j_presto md_run and can be set in "EXE> MD" block of md.inp.
The default is "FDEBUG= NO".
When specified as "FDEBUG= MAKE" during the simulation, a binary file (1stp_force.bin) containing the energy and forces after one step is generated.
This file should be created before any modifications to the program.
After making changes to the program, if you run the simulation with "FDEBUG= YES" while this file is present in the current directory, it calculates the energy and forces after one step and computes the error against the values output in 1stp_force.bin.
This option allows checking for bugs in the modified program by comparing the energy and force values.
>BOUND> SHAPE
@u:CAPbound.inp,n:BOUND> CENTER
In the input file for using CAP boundaries (CAPbound.inp), you can specify the shape of the CAP boundary by this option.
To set a spherical CAP boundary, configure it as follows:
	BOUND> SHAPE
	SPHERE
>BOUND> CENTER
@u:CAPbound.inp,p:BOUND> SHAPE,n:BOUND> INCLUDE
In the input file for using CAP boundaries (CAPbound.inp), you can specify the CAP boundary center by this option.
To set the center, you can specify by the following three ways:
	COORDINATE
	ATOM
	CHAIN
When you specify the center by "COORDINATE", please give x, y, z coordinates like:
	BOUND> CENTER
	COORDINATE  0.0 0.0 0.0
If you have prepared the PDB file for the simulation using "j_presto prep", the coordinates of the system's center was displayed in the execution log, and you can specify that value here.
When you specify the center by "ATOM", please give an atom number in the PDB file as follows:
	BOUND> CENTER
	ATOM  346
When you specify the center by "CHAIN", the center of mass of the selected chain is set as the CAP center.
Please give a molecular number in the PDB file as follows:
	BOUND> CENTER
	CHAIN  1
When "ATOM" or "CHAIN" is used, the center coordinates are determined by referring to the structural data of the PDB file specified in the 'COORDI' option of the input file for "j_presto md_run" (min.inp or md.inp).
>BOUND> INCLUDE
@u:CAPbound.inp,p:BOUND> CENTER,n:BOUND> RADIUS
This option specify the molecules for which the CAP boundary for solvent is applied.
The format consists of the following four components:
	BOUND> INCLUDE
	WAT 1  999999  NO
The first component (WAT) represents the name of the molecular species to which the CAP boundary is applied. The molecular species name is described under "TPL> MOLECULES" in the topology file (*.tpl) as follows:
	.
	.
	TPL> MOLECULES
	; NUMBER OF MOLECULES : 4
	test_1                       1
	Na+                         34
	Cl-                         35
	WAT                      12187
	.
	.
In the example above, system contains four types of molecular species (test_1, Na+, Cl-, and WAT).
The CAP boundary is applied to WAT (i.e., water molecules).
The second and third components (1 and 999999) specify the minimum and maximum molecular number ID of the "WAT" to which the CAP boundary is applied (i.e., from 1 to 999999).
In this case, since there are only 12,187 WAT molecules, the CAP boundary is applied to all of them.
In this case, the ions (Na+ and Cl−) do not have the CAP boundary applied; however, since these charged particles are energetically unstable when they drift into the vacuum region outside the CAP boundary, they are naturally pulled back into the boundary by the solvent molecules.
The fourth component (NO) is an option to specify whether to log the information of the molecules to which the CAP boundary is applied.
If set to YES, the information is output.
>BOUND> RADIUS
@u:CAPbound.inp,p:BOUND> INCLUDE,n:BOUND> FORCE
This option specifies the radius from the center of the CAP boundary for solvents when using a sphere-shaped CAP boundary.
>BOUND> FORCE
@u:CAPbound.inp,p:BOUND> RADIUS,n:BOUND> LIST
This option specifies the force constant of CAP boundary for solvents.
The default is 150.0 (Kcal/mol).
>BOUND> LIST
@u:CAPbound.inp,p:BOUND> FORCE,n:BOUND> BUFFER
This option specifies atoms to apply CAP boundary for solute.
The format consists of the following seven components:
	BOUND> LIST
	1 1 1 99999 C* * NO
	1 1 1 99999 N* * NO
	1 1 1 99999 O* * NO
	1 1 1 99999 P* * NO
	1 1 1 99999 S* * NO
The 1st and 2nd components specify the first and last chain number IDs to which the CAP boundary is applied.
Note that the behavior of the settings changes depending on whether the 1st value is set to 0 or not.
	When the 1st value is NOT 0,
		In the above case, from the first chain (1) to the last (1), i.e. only the first chain is selected.
		The 3rd and 4th components specify the first and last residue number IDs "in the selected chain" (i.e., from 1 to 99999).
		If this chain has fewer than 99999 residues, the CAP boundary is applied up to the last residue available.
	When the 1st value is 0,
		The 3rd and 4th components specify the first and last residue number IDs based on "the sequential numbering of residues written in the PDB".
The 5th component specifies the atom names to which the CAP boundary is applied.
In addition to specifying exact atom names, wildcards using the asterisk (*) can also be employed.
For example, "*" represents all atoms, and "C*" refers to all atoms whose first character is C.
However, note that wildcards can only be used at the end of the name; therefore, specifications like "*A" or "*C*" are not allowed.
There are special designations as follows:
	HEAV : heavy atoms (atoms other than hydrogen)
	SIDE : atoms other than the backbone of proteins or nucleic acids
The 6th component is the residue name.
Similar to the atom names, wildcard specifications can also be used.
The 7th component is an option to output information about the atoms to which the CAP boundary has been applied when executing "j_presto md_run".
Setting this option to "YES" enable the output.
>BOUND> BUFFER
@u:CAPbound.inp,p:BOUND> LIST,n:BOUND> FORPRO
When simulating a system containing hydrophobic solute molecules, such as proteins, and polar solvent molecules, such as water, the solute molecules tend to adhere to the CAP boundary, avoiding the solvent.
To prevent this issue, the solute is assigned a smaller boundary than the solvent.
This option specifies the length of the buffer region between the solute and solvent CAP boundaries.
it is recommended to ensure a buffer of at least 4 Å.
For example, with a sphere-shaped CAP boundary where the solvent CAP radius is 30.0 Å and the buffer distance is 4.0 Å, the solute CAP radius is 30.0 - 4.0 = 26.0 Å.
>BOUND> FORPRO
@u:CAPbound.inp,p:BOUND> BUFFER
This option specifies the force constant of CAP boundary for solutes.
The default is 150.0 (Kcal/mol).
>PSR> LIST
@u:psr.inp,n:RADIUS
This option is for specifying the atoms to be applied position restraints in the input file (psr.inp).
The usage is:
	PSR> LIST
	1  1  1  99999  CA   *   1.0  NOMA  NO
	1  1  1  99999  N    *   1.0  NOMA  NO
	1  1  1  99999  C    *   1.0  NOMA  NO
	1  1  1  99999  O    *   1.0  NOMA  NO
	END
The PSR block starts with the line "PSR>" and ends with the line "END".
The meaning of each line is as follows.
The 1st and 2nd components specify the first and last chain number IDs to which the position restraints are applied.
Note that the behavior of the settings changes depending on whether the 1st value is set to 0 or not.
        When the 1st value is NOT 0,
                In the above case, from the first chain (1) to the last (1), i.e. only the first chain is selected.
                The 3rd and 4th components specify the first and last residue number IDs "in the selected chain" (i.e., from 1 to 99999).
                If this chain has fewer than 99999 residues, the CAP boundary is applied up to the last residue available.
        When the 1st value is 0,
                The 3rd and 4th components specify the first and last residue number IDs based on "the sequential numbering of residues written in the PDB".
The 5th component specifies the atom names to which the position restraints are applied.
In addition to specifying exact atom names, wildcards using the asterisk (*) can also be employed.
For example, "*" represents all atoms, and "C*" refers to all atoms whose first character is C.
However, note that wildcards can only be used at the end of the name; therefore, specifications like "*A" or "*C*" are not allowed.
There are special designations as follows:
        HEAV : heavy atoms (atoms other than hydrogen)
        SIDE : atoms other than the backbone of proteins or nucleic acids
The 6th component is the residue name.
Similar to the atom names, wildcard specifications can also be used.
The 7th component is force constant (Kcal/mol) for the position restraints.
If you want to make the positional restraint force proportional to the mass of the atom, i.e., the value of the seventh component multiplied by the mass, set the 8th component to "MASS".
In the above example, it is set to "NOMA" (NOMASS), meaning this option is not used.
The 9th component is an option to output information about the atoms to which the position restraints has been applied when executing "j_presto md_run".
Setting this option to "YES" enable the output.
>PSR> RADIUS
@u:psr.inp,n:LIST
This option is for specifying the atoms to be applied position restraints in the input file (psr.inp).
The usage is:
	GROUP> RADIUS
	1  5  CA  10.0 20.0  CA  1.0  NOMA  NO
	1  5  CA  10.0 20.0  N   1.0  NOMA  NO
	1  5  CA  10.0 20.0  C   1.0  NOMA  NO
	1  5  CA  10.0 20.0  O   1.0  NOMA  NO
	END
The PSR block starts with the line "PSR>" and ends with the line "END".
"PSR> LIST" directly specifies the atoms to which positional restraints are applied, while "PSR> RADIUS" selects one atom (the center atom) and applies positional restraints to atoms with the specified atom name that are located within a distance between rmin and rmax from the center atom.
The meaning of each line is as follows.
The 1st, 2nd, and 3rd components specify the chain number ID, residue number ID, and atom name of the center atom, respectively.
The 4th and 5th components are rmin and rmax, respectively, and the 6th component specifies the atom name to which the positional restraints are applied.
For the 6th component, in addition to specifying exact atom names, wildcards using the asterisk (*) can also be employed.
For example, "*" represents all atoms, and "C*" refers to all atoms whose first character is C.
However, note that wildcards can only be used at the end of the name; therefore, specifications like "*A" or "*C*" are not allowed.
The 7th component is force constant (Kcal/mol) for the position restraints.
If you want to make the positional restraint force proportional to the mass of the atom, i.e., the value of the seventh component multiplied by the mass, set the 8th component to "MASS".
In the above example, it is set to "NOMA" (NOMASS), meaning this option is not used.
The 9th component is an option to output information about the atoms to which the position restraints has been applied when executing "j_presto md_run".
Setting this option to "YES" enable the output.
>DSR> LIST
@u:dsr.inp
This option is for specifying the atoms to be applied distance restraints in the input file (dsr.inp).
The usage is:
	DSR> LIST
	1   1  ASN  CA   1   2  LEU  CA  1.0  10.0  2.0  17.0  NO
	1   3  TYR  N    1   4  ILE  N   1.0  10.0  2.0  17.0  NO
	END
The DSR block starts with the line "DSR>" and ends with the line "END".
The meaning of each line is as follows.
In the specification of distance restraints, two atoms are designated, and when the distance between them becomes less than rmin or greater than rmax, harmonic spring forces with force constants, fmin or fmax (Kcal/mol), are applied to keep the distance within the specified range.
The 1st to 4th components are the chain number, residue number (within the chain), residue name, and atom name for the first atom.
The 5th to 8th components are the same for the second atom.
The 9th to 12th components represent fmin, fmax, rmin, and rmax, respectively.
The 13th component is an option to output information about the atoms to which the distance restraints has been applied when executing "j_presto md_run".
Setting this option to "YES" enable the output.
>DHR> NUMBER
@u:dhr.inp,n:DHR> LIST
This option is for specifying the atoms to be applied dihedral angle restraints in the input file (dhr.inp).
The usage is:
	DHR> NUMB
	1  2  3  4  10.0  10.0  40.0  80.0  NO
	5  6  7  8  10.0  10.0  40.0  80.0  NO
	END
The DHR block starts with the line "DHR>" and ends with the line "END".
The meaning of each line is as follows.
In the specification of dihedral angle restraints, four atoms are designated, and when the dihedral angle bewtween them becames less than rmin or greater than rmax (degree), harmonic spring forces with force constants, fmin or fmax (Kcal/mol), are applied to keep the dihedral angle within the specified range.
The 1st to 4th components are atomic numbers listed in the input PDB file of the 1st to 4th atoms to specify to which are applied the dihedral angle restraints, respectively.
The 5th to 8th components represent fmin, fmax, rmin, and rmax, respectively.
The 9th component is an option to output information about the atoms to which the dihedral angle restraints has been applied when executing "j_presto md_run".
Setting this option to "YES" enable the output.
>DHR> LIST
@u:dhr.inp,p:DHR> NUMBER
This option is for specifying the atoms to be applied dihedral angle restraints in the input file (dhr.inp).
The usage is:
	DHR> LIST
	1  1  N  1  CA  1  C  2  N  10.0  10.0  40.0  80.0  NO
	1  2  N  2  CA  2  C  3  N  10.0  10.0  40.0  80.0  NO
	END
The DHR block starts with the line "DHR>" and ends with the line "END".
The meaning of each line is as follows.
In the specification of dihedral angle restraints, four atoms are designated, and when the dihedral angle bewtween them becames less than rmin or grea
ter than rmax (degree), harmonic spring forces with force constants, fmin or fmax (Kcal/mol), are applied to keep the dihedral angle within the speci
fied range.
The chain number is specified in the 1st component.
Then, from the 2nd to the 9th components, the residue number IDs within the specified chain and atom names for the 1st to the 4th atoms are specified in order.
The 10th to 13th components represent fmin, fmax, rmin, and rmax, respectively.
The 14th component is an option to output information about the atoms to which the dihedral angle restraints has been applied when executing "j_presto md_run".
Setting this option to "YES" enable the output.
>batch_set
@u:j_presto,p:md_run,n:GEprep
The "j_presto batch_set" automatically generates input files and execution scripts necessary for running multiple MD simulation runs.
When you execute a single MD simulation run, you prepare an input file (md.inp) describing the desired settings, and then execute the calculation with "j_presto md_run md.inp".
However, in practical operations, you may need to run multiple MD simulations simultaneously with different initial velocities, or in McMD or ALSD simulations, repeatedly execute numerous MD runs for conformational sampling.
Preparing input files and executing for each of these runs is a very labor-intensive task.
In j_presto, bundle programs, j_presto_mpi or j_presto_master, is provided to execute multiple MD runs collectively as a single MPI job, and the batch_set is responsible for automatically preparing the input files and execution scripts necessary for these runs.
Before using the command, you must to prepare the following 3 files:
	1 : An input file for MD schedule (batch_set.inp or batch_set_ALSD.inp)
	2 : An template file for md_run execusion script (md_run.exe)
	3 : An template file for md_multi execusion script (md_multi.exe)
The names in parentheses are the default names of each file.

If the files named "batch_set.inp", "md_run.exe", and "md_multi.exe" exist in the directory where you execute "j_presto batch_set", "j_presto batch_set" will automatically use these three files as input.
If you want to use different input file names, you can specify them with -b, -r, and -m options, respectively. For more details, check the help with "j_presto batch_set -h".

"j_presto batch_set" automatically prepares the necessary files and directories (md*/n*) for multiple MD runs according to the MD simulation schedule file (batch_set.inp), instead of requiring you to manually prepare input file (md.inp) and the executable file (md_run.exe) for each run.
For details on how to prepare each file, please refer to the manual, where these file names are mentioned, such as "batch_set.inp".

The batch_set program automatically creates multiple directories named md*, where * is arbitrary positive integer.
Within each of these directories, it creates subdirectories named n1 to n[NRUN], for a total of [NRUN] specified runs in this example.
Each directory contains an input file (md.inp) created based on batch_set.inp, and a single-run execution script (md_run.exe) is copied into each directory.
Additionally, in the current directory, an executable file (e.g., md_multi_*.exe) is generated based on md_multi.exe.
By running this file, all [NRUN] MD runs in md* can be executed together as a single MPI job.
>batch_set.inp
@u:batch_set,n:batch_set_ALSD.inp
The batch_set.inp is an input file that specifies the schedule for executing MD simulations.
Based on this input file, the necessary input files (md.inp) and directory structures are prepared.
We provide two template files for batch_set.inp: one for regular MD simulation (batch_set.inp) and one for ALSD simulation (batch_set_ALSD.inp).
If you would like to know about the input files for ALSD, please refer to "batch_set_ALSD.inp".
You can obtain the required template by running "j_presto get_tmpl batch_set.inp" and modify it according to your settings.

Below, I will explain the contents of the batch_set.inp template:
*****************************************************************
nmd 0 2
nrun 60
nmpi 60

0
COORDI= ../../test_min.pdb
TOPOLO= ../../test.tpl
SETSHK= ../../test.shk
REFCOO= ../../test_min.pdb
POSITI= ../../psr.inp
;SETBOU= ../../CAPbound.inp
METHOD= CANO
LOOPLI= 500000
RESTAR= NO
NAMERO= restart.dat
SETTEM= 300.0
STARTT= 100.0
HEATLO= 500000
STOPCE= BOTH
;NSTPCN= 1
NAMECO= md.cod
OUTCOO= 2500
;OUTATM=
NAMETO= test.ene
PARALV= DOUB
N_SIMD= 256
RANDOM= #RNDSED
;OCOORD= test_md.pdb

1
RESTAR= YES
POSITI= OFF
LOOPLI= 5000000
INITIA= OFF
STARTT= OFF
HEATLO= OFF
RANDOM= OFF
NAMERI= ../../md#PMD/n#RUN/restart.dat
*****************************************************************
In the initial part of this file, several variables necessary for executing multiple MD runs are defined.
The available options are the following five:
	1 : nmd i j
		nmd specifies the first and last IDs of the MD runs you wish to execute.
		The integers i and j must satisfy the condition i <= j.
		For example, if you set it as "nmd 0 2," three directories md0, md1, and md2 will be created.
		The calculations will be executed in the order of md0 → md1 → md2.
	2 : nrun i
		nrun specifies the number of MD runs you want to execute simultaneously (where i is any natural number).
		For example, if you set it as "nrun 60," subdirectories named n1 through n60 will be created within each of the md* directories.
		Each of these subdirectories will contain the corresponding input file (md.inp) and executable file (md_run.exe).
		When executing the MD simulations using j_presto_mpi or j_presto_master, the 60 MD runs within the md* directories will be executed simultaneously as a single MPI job.
	3 : nmpi i
		nmpi specifies the number of MPI processes to be used, where i is any natural number.
		When executing calculations with j_presto_mpi, the number of processes specified in nmpi must match the number of MD runs indicated by nrun to allow for simultaneous execution.
		If you do not have enough computational resources to run all the specified MD runs concurrently, you can use j_presto_master for a master-slave parallel computation setup.
		In this case, you can set nmpi to a smaller value than what is specified in nrun.
	4 : temper r s
		temper is a variable used when you want to set different temperatures for each MD run.
		In the example above, it is not utilized.
		The variables r and s should be any positive real numbers.
		By setting this variable, the placeholder "#TEMPER" in the file will be replaced with evenly distributed temperatures ranging from r to s for each run specified by nrun.
	5 : lambda r s
		lambda is a variable used when you execute ALSD simulations and want to set different lambda values for each MD run.
		In the example above, it is not utilized.
		The variables r and s should be any positive real numbers.
		By setting this variable, the placeholder "#LAMBDA" in the file will be replaced with evenly distributed lambda values ranging from r to s for each run specified by nrun.
The three variables, nmd, nrun, and nmpi, are required in batch_set.inp.


After these variables, there will be blocks that start with an integer and ends with a blank line.
In the "0" block, you can specify the options you want to use for calculations from md0 onwards.
For available options, refer to "EXE> INPUT", "EXE> MD", and "EXE> OUTPUT".
The semicolon (;) is a comment character, meaning that any text following it on the same line will be ignored.
The placeholder "#RNDSED" specifies the random seed for each MD run.
By default, each run receives a unique seed value, with md0/n1 assigned a seed of 1, md0/n2 a seed of 2, and so on, up to md0/n60, which receives a seed of 60.
If you wish to adjust these seed values, you can use the -r option followed by an integer.
For instance, executing the command "j_presto batch_set -r 4" will add 4 to each default seed.
Therefore, the seeds for this example would change from their original values (1 to 60) to new values ranging from 5 (1 + 4) to 64 (60 + 4).

In the "1" block, you will specify the options that you want to set for runs starting from md1.
The options set in md0 will be inherited as they are, but if you want to change an option set in md0 or set an option that was not specified in md0, you will write it here.
By specifying [option name]= OFF, you can revert any previously set options to an unset state.
For instance, in the "1" block, the application of position restraints is removed (POSITI= OFF), and settings related to temperature increase (INITIA, STARTT, HEATLO) as well as the random seed for initial velocities (RANDOM) are also disabled.
Additionally, you modify the length of the simulation (LOOPLI) and set the configuration to resume the simulation from a previous calculation using the restart file specified in NAMERI (RESTAR= YES).
Here, the NAMERI variable includes placeholders (#PMD, #RUN).
The placeholder #PMD is automatically assigned the ID of the previous MD run (0 for md1), while #RUN is assigned the ID of the current MD run (4 for md1/n4), and these placeholders will be replaced accordingly.

In this example, nmd is set to 2, but since the "2" block is not specified, md2 will inherit the same settings as md1.
If you want to change the settings for md2, please specify them accordingly in this block.

In batch_set.inp, you can use the following placeholders:
	   #CMD : Current MD ID (2 for md2/n5)
	   #PMD : Previous MD ID (1 for md2/n5)
	   #RUN : Current run ID (5 for md2/n5)
	#LAMBDA : Lambda value (refer to the explanation in the text above)
	#TEMPER : Temperature (refer to the explanation in the text above)
	#RNDSED : Random seed (refer to the explanation in the text above)
	  #NRUN : Number of runs in an MD set by "nrun"
	  #NMPI : Numper of MPI parallelization set by "nmpi"
>batch_set_ALSD.inp
@u:batch_set,p:batch_set.inp
The batch_set.inp is an input file that specifies the schedule for executing MD simulations.
Based on this input file, the necessary input files (md.inp) and directory structures are prepared.
For ALSD simulation, you can obtain the required template by running "j_presto get_tmpl batch_set_ALSD.inp" and modify it according to your settings.
If you use the batch_set_ALSD.inp template, note that "j_presto batch_set" will try to use "batch_set.inp" as the default input file name.
You should either rename the file accordingly or specify the file name using the "j_presto batch_set -b" option.
Below, I will explain the contents of the batch_set_ALSD.inp template:
*****************************************************************
nmd 0 27
nrun 60
nmpi 60
lambda 0.6 0.85

0
COORDI= ../../test_min.pdb
TOPOLO= ../../test.tpl
SETSHK= ../../test.shk
REFCOO= ../../test_min.pdb
POSITI= ../../psr.inp
;SETBOU= ../../CAPbound.inp
METHOD= CANO
LOOPLI= 500000
RESTAR= NO
NAMERO= restart.dat
SETTEM= 300.0
STARTT= 100.0
HEATLO= 500000
STOPCE= BOTH
;NSTPCN= 1
NAMECO= md.cod
OUTCOO= 2500
;OUTATM=
NAMETO= test.ene
PARALV= DOUB
N_SIMD= 256
RANDOM= #RNDSED
LAMBDA= 0.6
;OCOORD= test_md.pdb

1
RESTAR= YES
POSITI= OFF
LOOPLI= 4000000
INITIA= OFF
STARTT= OFF
HEATLO= OFF
RANDOM= OFF
NAMERI= ../../md#PMD/n#RUN/restart.dat

2
LOOPLI= 500000
LAMBDA= #LAMBDA
; For GEprep
PROJNM= test
SIMTYP= CLMD    ; Constant LaMbDa MD simulation
CODLST= file.list
MINVAL= 0.6
MAXVAL= 0.85
FITDIM= 2
NWINDO= 1
SIMTEM= 300.0
FORCES= 3000.0
INPENE= n#1:#RUN/test.ene
NFIRST= 250001
NFINAL= 15000000

3
METHOD= GE
LAMBDA= OFF
NAMEP1= ../../md#PMD/test.nf
; For GEprep
SIMTYP= ALSD
PREFIT= ../md#PMD/test.nf
FORCES= 2500.0
NFIRST= 100001
FITDIM= 4

6
FORCES= 1800.0

9
NXMAXV= 0.88

10
LOOPLI= 1000000

12
NXMAXV= 0.90

14
FORCES= 1500.0

15
NXMAXV= 0.93

18
NXMAXV= 0.96

21
NXMAXV= 1.0

24
NXMAXV= 1.03
FORCES= 1500.0

26
LOOPLI= 15000000
NFIRST= 1
MINLMD= 0.75
MAXLMD= 1.25
MINEAA= -630.0
MAXEAA= -170.0
MINEAB= -1220.0
MAXEAB= -440.0

27
PREFIT= ../md25/test.nf
NAMEGE= ../../md25/test.nf
INPENE= ../md#26:#CMD/n#1:#NRUN/test.ene
*****************************************************************
In the initial part of this file, several variables necessary for executing multiple MD runs are defined.
The available options are the following five:
        1 : nmd i j
                nmd specifies the first and last IDs of the MD runs you wish to execute.
                The integers i and j must satisfy the condition i <= j.
                For example, if you set it as "nmd 0 2," three directories md0, md1, and md2 will be created.
                The calculations will be executed in the order of md0 → md1 → md2.
        2 : nrun i
                nrun specifies the number of MD runs you want to execute simultaneously (where i is any natural number).
                For example, if you set it as "nrun 60," subdirectories named n1 through n60 will be created within each of the md* directories.
                Each of these subdirectories will contain the corresponding input file (md.inp) and executable file (md_run.exe).
                When executing the MD simulations using j_presto_mpi or j_presto_master, the 60 MD runs within the md* directories will be executed simultaneously as a single MPI job.
        3 : nmpi i
                nmpi specifies the number of MPI processes to be used, where i is any natural number.
                When executing calculations with j_presto_mpi, the number of processes specified in nmpi must match the number of MD runs indicated by nrun to allow for simultaneous execution.
                If you do not have enough computational resources to run all the specified MD runs concurrently, you can use j_presto_master for a master-slave parallel computation setup.
                In this case, you can set nmpi to a smaller value than what is specified in nrun.
        4 : temper r s
                temper is a variable used when you want to set different temperatures for each MD run.
                In the example above, it is not utilized.
                The variables r and s should be any positive real numbers.
                By setting this variable, the placeholder "#TEMPER" in the file will be replaced with evenly distributed temperatures ranging from r to s for each run specified by nrun.
        5 : lambda r s
                lambda is a variable used when you execute ALSD simulations and want to set different lambda values for each MD run.
                The variables r and s should be any positive real numbers.
                By setting this variable, the placeholder "#LAMBDA" in the file will be replaced with evenly distributed lambda values ranging from r to s for each run specified by nrun.
The three variables, nmd, nrun, and nmpi, are required in batch_set.inp.

After these variables, there will be blocks that start with an integer and ends with a blank line.
In the "0" block, you can specify the options you want to use for calculations from md0 onwards.
For available options, refer to "EXE> INPUT", "EXE> MD", and "EXE> OUTPUT" for conventional MDs, and "GEprep" for McMD and ALSD simulations.
The semicolon (;) is a comment character, meaning that any text following it on the same line will be ignored.
The placeholder "#RNDSED" specifies the random seed for each MD run.
By default, each run receives a unique seed value, with md0/n1 assigned a seed of 1, md0/n2 a seed of 2, and so on, up to md0/n60, which receives a seed of 60.
If you wish to adjust these seed values, you can use the -r option followed by an integer.
For instance, executing the command "j_presto batch_set -r 4" will add 4 to each default seed.
Therefore, the seeds for this example would change from their original values (1 to 60) to new values ranging from 5 (1 + 4) to 64 (60 + 4).

In the "1" block, you will specify the options that you want to set for runs starting from md1.
The options set in md0 will be inherited as they are, but if you want to change an option set in md0 or set an option that was not specified in md0, you will write it here.
By specifying [option name]= OFF, you can revert any previously set options to an unset state.
For instance, in the "1" block, the application of position restraints is removed (POSITI= OFF), and settings related to temperature increase (INITIA, STARTT, HEATLO) as well as the random seed for initial velocities (RANDOM) are also disabled.
Additionally, you modify the length of the simulation (LOOPLI) and set the configuration to resume the simulation from a previous calculation using the restart file specified in NAMERI (RESTAR= YES).
Here, the NAMERI variable includes placeholders (#PMD, #RUN).
The placeholder #PMD is automatically assigned the ID of the previous MD run (0 for md1), while #RUN is assigned the ID of the current MD run (4 for md1/n4), and these placeholders will be replaced accordingly.

In the "2" block, preparations for starting the ALSD simulation begin.
The ALSD simulation divides the system into two regions:
	region A, which promotes structural changes
	region B, which maintains structural changes equivalent to conventional MD
As a result, the system's energy can be expressed as 
	E = E_AA + E_AB + E_BB
represent the energies within region A, between regions A and B, and within region B, respectively.
In ALSD, a scaling factor, denoted as λ, is introduced to scale the interactions related to region A.
The potential energy of the system is modified as follows:
	E_ALSD = λ^2 * E_AA + λ * E_AB + E_BB + RT lnP(λ)
where R is the gas constant, T is the simulation temperature, and P(λ) is the canonical distribution function along the lambda axis.
The λ particle recieves a force given by
	F_ALSD = -2 * E_AA * λ -E_AB -RT dlnP(λ)/dλ
while moving within a specified range (for example, from 0.6 to 1.03).
When λ=1, the forces acting on the atoms of the system are equivalent to those in conventional MD.
However, when λ<1, the interactions related to region A are weakened, thereby promoting the structural changes.
At the initial stage of the calculation, the term, dlnP(λ)/dλ, is unknown.
Therefore, it is estimated through iterative simulationss.
Once dlnP(λ)/dλ is accurately estimated, ALSD can perform a random walk over the specified range of λ, allowing for efficient conformational sampling.

In md2, as a precursor to ALSD, an initial estimate of dlnP(λ)/dλ will be obtained through multiple MD runs, each configured with different values of λ.
By setting LAMBDA= #LAMBDA, different λ values ranging from 0.6 to 0.85 set by "lambda" will be assigned for each MD run.
The lines below "; For GEprep" contain options for the GEprep program, which estimates dlnP(λ)/dλ.
The simulation type "SIMTYP" is specified as constant lambda MD (CLMD).
In this calculation, the λ particle is fixed at an initial value and does not change during the computation.
For other setting options, please refer to the manual for each option name.

In the "3" and the later blocks, the ALSD simulation begins using the estimated dlnP(λ)/dλ from the CLMD simulation.
The LAMBDA option must be disabled here (set to LAMBDA= OFF); otherwise, even if the calculation is resumed from a restart file, the value of λ will not be carried over and will be forcibly reverted to the value set by the LAMBDA option.
Please take note of this.
In GEprep, the energy and λ values from the simulation trajectory specified in the INPENE option are read, and the predicted function parameters for 
dlnP(λ)/dλ  are outputted as a *.nf file.
This file can be read using the "PREFIT" option to run the ALSD simulation.
In the subsequent blocks, structural relaxation and estimation of dlnP(λ)/dλ are repeatedly conducted up to md25, while adjusting the range of λ values to explore (NXMAXV) and the force that pulls the λ particle back when it goes beyond the specified range (FORCES).
Finally, the last MD run is executed at md26 for analysis.
For the meaning of each option, please refer to their respective names, and for the list of options available in GEprep, consult the "GEprep" documentation.

In ALSD, if these options are not set appropriately, it may lead to abnormal termination of the calculation during the process.
Specifically, if λ takes on extreme values that are too small or too large, it can cause atomic collisions or structural twists that do not occur in normal MD, resulting in instability of the system.
The settings for controlling the motion of the λ particle, such as "FORCES," and for fitting dlnP(λ)/dλ), like "FITDIM" and "NXMAXV," are crucial for the success of the calculation.
Therefore, it is highly recommended to refer to these terms in the manual and read the explanations thoroughly.

In batch_set.inp, you can use the following placeholders:
           #CMD : Current MD ID (2 for md2/n5)
           #PMD : Previous MD ID (1 for md2/n5)
           #RUN : Current run ID (5 for md2/n5)
        #LAMBDA : Lambda value (refer to the explanation in the text above)
        #TEMPER : Temperature (refer to the explanation in the text above)
        #RNDSED : Random seed (refer to the explanation in the text above)
          #NRUN : Number of runs in an MD set by "nrun"
          #NMPI : Numper of MPI parallelization set by "nmpi"
>GEprep
@u:j_presto,p:batch_set,n:Ens_Ana
"j_presto GEprep" prepares a parameter file (*.nf) for Generalized Ensemble (GE) MD simulations such as McMD and ALSD.
This program is required when running Generalized Ensemble MD simulations such as McMD or ALSD, but these simulations are usually set up through "j_presto batch_set".
In the execution script (md_multi_*.exe) generated during this process, "j_presto GEprep" is automatically executed, so you rarely need to run this program explicitly.
Execution is performed as follows:
	j_presto GEprep [input file for GEprep (GEprep.inp)]
As mentioned earlier, the input file required for this program (GEprep.inp) is usually automatically generated, so the template is not provided by "j_presto get_tmpl".
The options for GEprep are set in batch_set.inp, and based on this file, GEprep.inp is automatically generated.
The main options that can be configured for GEprep are as follows:
	PROJNM : Project name for output file names
	SIMTYP : Simulation type
	DATLST : Data file list for input energy and lambda values
	MINVAL : The minimum limit of energy or lambda sampling range
	MAXVAL : The maximum limit of energy or lambda sampling range
	SIMTEM : Simulation temperature
	FITDIM : The maximum degree of the polynomial used for function fitting
	NWINDO : Number of windows for spline fitting
	NXMINV : The minimum limit of energy or lambda sampling range for next simulation
	NXMAXV : The maximum limit of energy or lambda sampling range for next simulation
	PREFIT : function parameter data for previous simulation
	TMPSMP : Temperature for reweighting
	NXTEMP : Temperature for next simulation
	LAMBDA : Lambda for reweighting
	MINLMD : The minimum limit of lambda for ALSD reweighting
	MAXLMD : The maximum limit of lambda for ALSD reweighting
	MINEAA : The minimum limit of Energy in region A for ALSD reweighting
	MAXEAA : The maximum limit of Energy in region A for ALSD reweighting
	MINEAB : The minimum limit of Energy between region A and B for ALSD reweighting
	MAXEAB : The maximum limit of Energy between region A and B for ALSD reweighting
	FORCES : Force size applied to lambda particle when it goes out of the range from MINVAL to MAXVAL
	ADJENE : Frag for automatically redefining energy ranges for ALSD reweighting
	INPENE : Input energy and lambda values file (*.ene) to estimate the function dlnP(λ)/dλ
	NFIRST : The initial structure number used for the function estimation
	NFINAL : The final structure number used for the function estimation
For details on each option, refer to the option names in the manual.

McMD realizes a wide conformational search of molecules by balancing the search for stable conformations and the promotion of conformational changes through a random walk of the system's potential energy, E, from low energy regions corresponding to low temperatures to high energy regions corresponding to high temperatures.
In McMD, the simulation is performed using the multicanonical energy (E_McMD), which modifies E as follows:
        E_McMD = E + RTlnP(E)
where R is gas constant, T is simulation temperature, and P(E) is the canonical distribution.
In McMD, each atom in the system moves under forces (F_McMD) derived from the differentiation of E_McMD:
        F_McMD = F + RT dlnP(E)/dE

Adaptive Lambda Square Dynamics (ALSD) is a variant of McMD that enables the calculation to promote only conformational changes in a specific region of the system (Region A) selected by the user, while maintaining conventional MD-like conformational changes in the rest of the system (Region B).
In ALSD, the system's potential energy is divided as follows.
        E = E_AA + E_AB + E_BB
E_AA, E_AB, and E_BB represent the energies within region A, between regions A and B, and within region B, respectively.
ALSD is an MD simulation that introduces a scaling factor λ to scale the energies related to region A.
The potential energy of the system is modified as follows:
        E_ALSD = λ^2 * E_AA + λ * E_AB + E_BB + RT lnP(λ)
where P(λ) is the canonical distribution function along the lambda axis.
In ALSD, each atom in the system and λ moves under forces (F_ALSD) derived from the differentiation of E_ALSD:
        F_ALSD = λ^2 * F_AA + λ * F_AB + F_BB (for atoms)
        F_ALSD = -2 * E_AA * λ -E_AB -RT dlnP(λ)/dλ (for λ)
where F_AA, F_AB, and F_BB are the forces in conventional MD simulation for intra-region A, inter region A-B, and intra-region B, respectively.

The functions (dlnP(E)/dE, dlnP(λ)/dλ) in the force equations for McMD and ALSD are artificially introduced to allow E and λ to undergo a random walk.
At the begining of the simulation, the form of these functions are unknown.
Therefore, the shape of these functions are predicted and refined by iterative simulations to achieve efficient conformational exploration.
These functions are predicted from the values of E and λ obtained from the simulations and are fitted as polynomial spline functions.

Here is an explanation of the contents of the main files generated after executing "j_presto GEprep":
Many files are generated in this process, but the following two are especially important:
	*.nf file: Required as an input when running McMD or ALSD simulations.
	*.prob file: Contains weighting factors necessary for constructing the canonical ensemble from simulation results.
The other files are primarily used for visualizing the simulation results.

	*.bar	:
		This file is intended for use in Trivial Trajectory Parallelization (TTP), a method in which multiple molecular dynamics (MD) simulations are run in parallel starting from different initial structures.
		This file is output when you set "SIMTYP" option to "CANO", "MULT", or "ALSD".
		The file helps verify which energy or λ range each simulation trajectory has explored.
		Data for each trajectory is recorded as a block consisting of six elements, with each block separated by a blank line.
		The structure of each data block is as follows:

			minval1   runID   minval2   
			maxval2   runID   maxval1

		The meaning of each element is:
			runID		: Identifier of the simulation trajectory.
			minval1, maxval1: The minimum and maximum energy or λ values visited by the trajectory.
			minval2, maxval2: The minimum and maximum energy or λ values in the region where the trajectory frequently appears, defined as having a log-probability lnP(E) or lnP(λ) greater than -1.5 (i.e., corresponding to at least ~22% of the peak probability region).

		If this file is saved under a name such as *.bar, it can be visualized using gnuplot with the following command:

			plot "*.bar" u 1:2 w l, "" u 3:2 w l

		This command will plot energy or λ on the horizontal axis and trajectory ID on the vertical axis, allowing visual inspection of the explored regions by each trajectory.

	*.cdist :
		This file is used in McMD simulations to visualize the logarithmic canonical distribution lnP(E) along the E axis, which is constructed through reweighting.
		Each line in the file contains 1: E value, 2: lnP(E).
		It can visualize the relationship of the entire distribution and the canonical one using gnuplot with the following command:
			plot "*.dist" u 1:2 w l, "*.cdist" u 1:2 w l

	*.cprob :
		This file is used to visualize the canonical distribution on the EAA–EAB energy plane when reweighting the occurrence probabilities of each structure in ALSD.
		Each row in the file consists of the following four columns:

			1: EAA value
			2: EAB value
			3: Canonical probability distribution on the EAA–EAB grid
			4: Number of samples collected at each grid point

		If this file is saved with a name such as "*.cprob", the canonical distribution can be visualized using gnuplot with the following command:
			splot "*.cprob" u 1:2:3 w l
		This command displays the canonical distribution as a 3D plot over the EAA–EAB energy plane.

	*.dist	:
		This file is output to confirm whether the simulation is performing a random walk within the specified E or λ range.
		In the case of McMD, the first column of this file contains the values of potential energy E.
		The second column contains the logarithm of the distribution function along the E-axis (lnP(E)).
		In the case of ALSD, the first column contains λ.
		The second column contains the logarithm of the distribution function along the λ-axis (lnP(λ)).
		If these distributions become flat within the region selected by "MINVAL" and "MAXVAL", it indicates that the estimation of dlnP(E)/dE or dlnP(λ)/dλ is successful.
		If not, you should review settings such as "FITDIM", "NWINDO", "NXMINV", "NXMAXV", and "FORCES" to achieve flatness.

	*.dlnN (for McMD) or *.dlnP (for ALSD)	:
		This file is output to confirm the estimated function from the simulations and its fitted counterpart with a polynomial spline fitting.
		The first column contains the values of potential energy E or λ.
		The second column contains the raw function data calculated from the input data.
		The third column containts the function data fitted using a polynomial spline.
		The fourth column represents the function data with the forces specified by "FORCES" option applied to the data in the third column.
		If there is a significant deviation between the data in the second and third columns, indicating that the fitting is not working well, the efficiency of conformational exploration in subsequent simulations may decrease, and in some cases, the simulation may terminate abnormally.
		In such cases, it is recommended to review settings such as "FITDIM", "NWINDO", "NXMINV", "NXMAXV", and "FORCES" to achieve flatness.

	*.edist :
		This file is generated during ALSD simulation and contains the logarithmic distribution functions lnP(λ) for each simulation trajectory that was parallelized using Trivial Trajectory Parallelization (TTP).
		Assuming there are N trajectories, each line in this file consists of N+1 columns:
			        Column 1: The λ value
			Columns 2 to N+1: The values of lnP(λ) for each of the N trajectories (from trajectory 1 to N)

		To visualize the distribution function for the m-th trajectory, use gnuplot with the following command:
			plot "*.edist" u 1:m+1 w l
		In addition, the combined lnP(λ) over all N trajectories is output separately as a "*.dist" file.

	*.et    :
		This file records the relationship between energy (first column) and the corresponding temperature (second column) during an McMD simulation.

	*.ldist :
		This file is used in ALSD simulations to visualize the logarithmic canonical distribution lnP(λ) along the λ axis, which is constructed through reweighting.
		Each line in the file contains 1: λ value, 2: lnP(λ).
		It can visualize the relationship of the entire distribution and the canonical one using gnuplot with the following command:
			plot "*.dist" u 1:2 w l, "*.ldist" u 1:2 w l

	*.nf	:
		This file outputs the parameter information for the function needed to execute McMD and ALSD.
		When running McMD or ALSD simulations with "j_presto md_run," it is necessary to specify this file using the "NAMEGE" option in the input file (md.inp).

	*.prob  :
		This file is required when performing reweighting of a structure ensemble obtained from a simulation to analyze it according to the canonical distribution.
		It contains a mapping between the energy values of each structure and the corresponding weighting factors in the canonical ensemble.
		To perform ensemble analysis with weighting, you must specify this file using the "input_prob_file" option in the input file when executing "j_presto Ens_Ana".

	*.sph     :
		This file records the relationship between temperature (first column) and the specific heat (second column) during an McMD simulation.

	*.TTPdist :
		This file is used to visualize how many trajectories explored each energy range (for McMD) or each λ range (for ALSD) when multiple simulations were executed using TTP (Trivial Trajectory Parallelization).
		Each row of the file contains the following four columns:
			1: Energy or lambda value
			2: Number of trajectories that visited this range at least once
			3: Number of trajectories that visited this range with lnP > -1.5 (i.e., with a frequency greater than approximately 0.22 times the mode)
			4: Number of trajectories that visited this range with lnP > -0.5 (i.e., with a frequency greater than approximately 0.61 times the mode)

		The distribution of trajectory coverage can be visualized using gnuplot with the following command:
			plot "*.TTPdist" u 1:2 w l, "" u 1:3 w l, "" u 1:4 w l
>PROJNM
@u:GEprep,n:SIMTYP
Option for the input file (GEprep.inp) for the subprogram "j_presto GEprep" that prepares parameter files needed for Generalized Ensemble MD simulations like McMD and ALSD.
This option sets the output file name when the GEprep program is executed:
	PROJNM= test 
If this option is not set, the default name "test" will be used.
>SIMTYP
@u:GEprep,p:PROJNM,n:DATLST
Option for the input file (GEprep.inp) for the subprogram "j_presto GEprep" that prepares parameter files needed for Generalized Ensemble MD simulations like McMD and ALSD.
This option specifies the simulation type being executed.
The types that can be specified are the following:
	SIMTYP= CANO : Canonical MD simulation
	SIMTYP= MULT : Multicanonical MD (McMD) simulation
	SIMTYP= CLMD : Constant Lambda MD (CLMD) simulation
	SIMTYP= ALSD : Adaptive Lambda Square Dynamics (ALSD) simulation
In McMD and ALSD simulations, it is necessary to initially perform either Canonical MD or CLMD to determine the parameters required for the calculations.
For specific operational details regarding ALSD, please also refer to the description in "batch_set_ALSD.inp".
> DATLST
@u:GEprep,p:SIMTYP,n:MINVAL
"j_presto GEprep" estimates the function parameters necessary for executing McMD and ALSD simulations.
This estimation requires the energy and lambda values from the previous simulation.
The "DATLST" option specifies the names of the energy and λ data files (.ene) output from the previous simulation, along with the range of data to be used for the estimation.
The format for this file is as follows:
	n1/test.ene
	100001 500000
	n2/test.ene
	100001 500000
	n3/test.ene
	100001 500000
	.
	.
	.
In this file, the settings for each input file are described in two lines.
The first line contains the file name, and the second line consists of two integers.
In this example, it indicates that data will be input from line 100,001 to line 500,000 of the file.
If the input files are prepared using "j_presto batch_set," this file will be automatically generated as "file.list" within the md* directory, so please modify it as necessary.
The *.ene data file can be output by specifying the "NAMETO" option in the configuration file "md.inp" when running MD with "j_presto md_run".
>MINVAL
@u:GEprep,p:DATLST,n:MAXVAL
Option for the input file (GEprep.inp) for the subprogram "j_presto GEprep" that prepares parameter files needed for Generalized Ensemble MD simulations like McMD and ALSD.
This option specifies the minimum limit for energy sampling in McMD or for lambda sampling in ALSD.
>MAXVAL
@u:GEprep,p:MINVAL,n:SIMTEM
Option for the input file (GEprep.inp) for the subprogram "j_presto GEprep" that prepares parameter files needed for Generalized Ensemble MD simulations like McMD and ALSD.
This option specifies the maximum limit for energy sampling in McMD or for lambda sampling in ALSD.
>SIMTEM
@u:GEprep,p:MAXVAL,n:FITDIM
Option for the input file (GEprep.inp) for the subprogram "j_presto GEprep" that prepares parameter files needed for Generalized Ensemble MD simulations like McMD and ALSD.
This option specifies the simulation temperature for current MD simulations.
>FITDIM
@u:GEprep,p:SIMTEM,n:NWINDO
Option for the input file (GEprep.inp) for the subprogram "j_presto GEprep" that prepares parameter files needed for Generalized Ensemble MD simulations like McMD and ALSD.
This option specifies the order of the polynomial spline function for McMD or ALSD.

McMD realizes a wide conformational search of molecules by balancing the search for stable conformations and the promotion of conformational changes through a random walk of the system's potential energy, E, from low energy regions corresponding to low temperatures to high energy regions corresponding to high temperatures.
In McMD, the simulation is performed using the multicanonical energy (E_McMD), which modifies E as follows:
	E_McMD = E + RTlnP(E)
where R is gas constant, T is simulation temperature, and P(E) is the canonical distribution.
In McMD, each atom in the system moves under forces (F_McMD) derived from the differentiation of E_McMD:
	F_McMD = F + RT dlnP(E)/dE

Adaptive Lambda Square Dynamics (ALSD) is a variant of McMD that enables the calculation to promote only conformational changes in a specific region of the system (Region A) selected by the user, while maintaining conventional MD-like conformational changes in the rest of the system (Region B).
In ALSD, the system's potential energy is divided as follows.
	E = E_AA + E_AB + E_BB
E_AA, E_AB, and E_BB represent the energies within region A, between regions A and B, and within region B, respectively.
ALSD is an MD simulation that introduces a scaling factor λ to scale the energies related to region A.
The potential energy of the system is modified as follows:
        E_ALSD = λ^2 * E_AA + λ * E_AB + E_BB + RT lnP(λ)
where P(λ) is the canonical distribution function along the lambda axis.
In ALSD, each atom in the system and λ moves under forces (F_ALSD) derived from the differentiation of E_ALSD:
	F_ALSD = λ^2 * F_AA + λ * F_AB + F_BB (for atoms)
        F_ALSD = -2 * E_AA * λ -E_AB -RT dlnP(λ)/dλ (for λ)
where F_AA, F_AB, and F_BB are the forces in conventional MD simulation for intra-region A, inter region A-B, and intra-region B, respectively.

The functions (dlnP(E)/dE, dlnP(λ)/dλ) in the force equations for McMD and ALSD are artificially introduced to allow E and λ to undergo a random walk.
At the begining of the simulation, the form of these functions are unknown.
Therefore, the shape of these functions are predicted and refined by iterative simulations to achieve efficient conformational exploration.
These functions are predicted from the values of E and λ obtained from the simulations and are fitted as polynomial spline functions.
The option "FITDIM" specifies the order of the polynomial spline function.
In this fitting, increasing the order reduces the fitting error but may lead to overfitting, causing the function to violate when extrapolated.
Therefore, it is recommended to keep the order between 2 and 6.
In the early stages of the simulations, it is advisable to use a small value like 2, and gradually increase the order to around 4 or 6 as the estimation of the function stabilizes.

The distributions (lnP(E) or lnP(λ)) explored by the simulations and the estimated functions can be checked in the "dist" file and the "dlnN (or dlnP)" file, respectively.
For more details, please refer to the description of "GEprep".
If you feel that the fitting error is large, it is recommended to increase the number of windows for spline fitting using "NWINDO" instead.
>NWINDO
@u:GEprep,p:FITDIM,n:NXMINV
Option for the input file (GEprep.inp) for the subprogram "j_presto GEprep" that prepares parameter files needed for Generalized Ensemble MD simulations like McMD and ALSD.
This option specifies the number of windows for the polynomial spline function of McMD or ALSD.

McMD realizes a wide conformational search of molecules by balancing the search for stable conformations and the promotion of conformational changes through a random walk of the system's potential energy, E, from low energy regions corresponding to low temperatures to high energy regions corresponding to high temperatures.
In McMD, the simulation is performed using the multicanonical energy (E_McMD), which modifies E as follows:
        E_McMD = E + RTlnP(E)
where R is gas constant, T is simulation temperature, and P(E) is the canonical distribution.
In McMD, each atom in the system moves under forces (F_McMD) derived from the differentiation of E_McMD:
        F_McMD = F + RT dlnP(E)/dE

Adaptive Lambda Square Dynamics (ALSD) is a variant of McMD that enables the calculation to promote only conformational changes in a specific region of the system (Region A) selected by the user, while maintaining conventional MD-like conformational changes in the rest of the system (Region B).
In ALSD, the system's potential energy is divided as follows.
        E = E_AA + E_AB + E_BB
E_AA, E_AB, and E_BB represent the energies within region A, between regions A and B, and within region B, respectively.
ALSD is an MD simulation that introduces a scaling factor λ to scale the energies related to region A.
The potential energy of the system is modified as follows:
        E_ALSD = λ^2 * E_AA + λ * E_AB + E_BB + RT lnP(λ)
where P(λ) is the canonical distribution function along the lambda axis.
In ALSD, each atom in the system and λ moves under forces (F_ALSD) derived from the differentiation of E_ALSD:
        F_ALSD = λ^2 * F_AA + λ * F_AB + F_BB (for atoms)
        F_ALSD = -2 * E_AA * λ -E_AB -RT dlnP(λ)/dλ (for λ)
where F_AA, F_AB, and F_BB are the forces in conventional MD simulation for intra-region A, inter region A-B, and intra-region B, respectively.

The functions (dlnP(E)/dE, dlnP(λ)/dλ) in the force equations for McMD and ALSD are artificially introduced to allow E and λ to undergo a random walk.
At the begining of the simulation, the form of these functions are unknown.
Therefore, the shape of these functions are predicted and refined by iterative simulations to achieve efficient conformational exploration.
These functions are predicted from the values of E and λ obtained from the simulations and are fitted as polynomial spline functions.
The option "NWINDO" specifies the number of windows for the polynomial spline function.

In this fitting, increasing the order reduces the fitting error but may lead to overfitting, causing the function to violate when extrapolated.
Therefore, it is recommended to keep the order between 2 and 6.
In the early stages of the simulations, it is advisable to use a small value like 2, and gradually increase the order to around 4 or 6 as the estimation of the function stabilizes.

The distributions (lnP(E) or lnP(λ)) explored by the simulations and the estimated functions can be checked in the "dist" file and the "dlnN (or dlnP)" file, respectively.
For more details, please refer to the description of "GEprep".
If you feel that the fitting error is large, it is recommended to increase the number of windows for spline fitting using "NWINDO" instead.
>NXMINV
@u:GEprep,p:NWINDO,n:NXMAXV
Option for the input file (GEprep.inp) for the subprogram "j_presto GEprep" that prepares parameter files needed for Generalized Ensemble MD simulations like McMD and ALSD.
This option specifies the minimum limit of energy or lambda sampling range for next simulation.
In McMD and ALSD simulations, it is common to initially explore conformations in a relatively high energy or low λ region to promote conformational changes.
Gradually, the range is extended toward lower energy or higher λ values to search for stable conformations.
The option "NXMINV" allows for changing the minimum limit of the search currently set by "MINVAL" in the next simulation.
If "NXMINV" is changed significantly from the current value set by "MINVAL," it may lead to poor extrapolation of the fitting function used in McMD and ALSD calculations.
This can result in abnormal terminations in the next simulation or significant deviations in the distribution along the potential energy E or λ axis from a flat state.
In such cases, it is necessary to reassess the value of "NXMINV" and recalculate.
>NXMAXV
@u:GEprep,p:NXMINV,n:PREFIT
Option for the input file (GEprep.inp) for the subprogram "j_presto GEprep" that prepares parameter files needed for Generalized Ensemble MD simulations like McMD and ALSD.
This option specifies the maximum limit of energy or lambda sampling range for next simulation.
In McMD and ALSD simulations, it is common to initially explore conformations in a relatively high energy or low λ region to promote conformational changes.
Gradually, the range is extended toward lower energy or higher λ values to search for stable conformations.
The option "NXMAXV" allows for changing the maximum limit of the search currently set by "MAXVAL" in the next simulation.
If "NXMAXV" is changed significantly from the current value set by "MAXVAL," it may lead to poor extrapolation of the fitting function used in McMD and ALSD calculations.
This can result in abnormal terminations in the next simulation or significant deviations in the distribution along the potential energy E or λ axis from a flat state.
In such cases, it is necessary to reassess the value of "NXMAXV" and recalculate.
>PREFIT
@u:GEprep,p:NXMAXV,n:TMPSMP
Option for the input file (GEprep.inp) for the subprogram "j_presto GEprep" that prepares parameter files needed for Generalized Ensemble MD simulations like McMD and ALSD.
This option specifies the function parameter file (*.nf) currently used in the simulation.
McMD and ALSD simulations require function parameter to be executed.
At the beginning of the simulation, this function parameter is estimated using Canonical MD or Constant lambda MD (CLMD), and the results are output to a file named "*.nf".
In subsequent steps of McMD and ALSD, the following are used to update the function parameter for the next simulation:
	1) this *.nf file
	2) the data of the potential energy E and λ values obtained from the simulation
"PREFIT" is the option for specifying the "*.nf" file in this process.
>TMPSMP
@u:GEprep,p:PREFIT,n:NXTEMP
Option for the input file (GEprep.inp) for the subprogram "j_presto GEprep" that prepares parameter files needed for McMD.
This option specifies the temperature of the conformational ensemble you want to reconstruct in McMD.
McMD is a simulation method that explores a wide energy range from low to high temperatures.
The resulting confirmational ensemble includes a variety of conformations, ranging from stable to unstable configurations.
In McMD, you can perform reweighting to reconstruct a conformational ensemble corresponding to any desired temperature from the resulting ensemble.
"TMPSMP" allows you to specify the temperature of the ensemble you want to reconstruct.
>NXTEMP
@u:GEprep,p:TMPSMP,n:LAMBDA
Option for the input file (GEprep.inp) for the subprogram "j_presto GEprep" that prepares parameter files needed for McMD.
This option specifies the simulation temperature for the next simulation.
If you want to change the current simulation temperature set by "SIMTMP" for the next simulation, you specify that temperature using "NXTMP".
>LAMBDA
@u:GEprep,p:NXTEMP,n:MINLMD
Option for the input file (GEprep.inp) for the subprogram "j_presto GEprep" that prepares parameter files needed for ALSD.
This option specifies the lambda value for ALSD reweighting.
The default is "1.0".
ALSD is a simulation method that allows users to explore a wide range of λ values by varying λ during the simulation to sample various conformations related to the region of interest (Region A) where the user wants to promote the conformational changes.
The resulting confirmational ensemble includes a variety of conformations, ranging from stable to unstable configurations.
In ALSD, you can perform reweighting to reconstruct a conformational ensemble corresponding to any desired λ from the resulting ensemble.
In general, ensembles with λ values other than 1 do not hold physical significance in ALSD, so it is not necessary to explicitly set this option.
This option is used when there is a specific purpose for reconstructing ensembles with λ values other than 1.
>MINLMD
@u:GEprep,p:LAMBDA,n:MAXLMD
Option for the input file (GEprep.inp) for the subprogram "j_presto GEprep" that prepares parameter files needed for ALSD.
This option specifies the minimum limit of lambda for ALSD reweighting.
ALSD is a simulation method that allows users to explore a wide range of λ values by varying λ during the simulation to sample various conformations related to the region of interest (Region A) where the user wants to promote the conformational changes.
The resulting confirmational ensemble includes a variety of conformations, ranging from stable to unstable configurations.

In ALSD, you can perform reweighting to reconstruct a conformational ensemble corresponding to any desired λ from the resulting ensemble.
To perform this reweighting, it is necessary to determine the distribution in the three-dimensional space of 1) λ, 2) potential energy within region A (E_AA), and 3) potential energy between regions A and B (E_AB) based on the conformational ensemble obtained from the ALSD simulation.
This allows for the calculation of the probability of occurrence of each conformation when λ = 1.
In practical computation, obtaining this three-dimensional distribution requires a significant amount of memory.
To keep the memory usage for reweighting calculations within feasible limits, it is essential to narrow down the ranges for λ, E_AA, and E_AB necessary for reproducing the conformational ensemble at λ = 1.

First, specify the range of λ to obtain conformations using "MINLMD" and "MAXLMD".
The range specified for λ should be centered around λ = 1, with some width on either side (for example, from 0.75 to 1.25).
Initially, arbitrary real numbers should be assigned to "MINEAA," "MAXEAA," "MINEAB," and "MAXEAB". 
Once these settings are made, running "j_presto GEprep" will produce a log with messages similar to the following:
	* Selected min & max lambda or the square for CANO dist.
             	0.750 -      1.250
  	* min & max EAA & EAB in the selected lrange
        	EAA :        -621.246 -        -173.357
        	EAB :       -1208.770 -        -440.000
Based on these values, adjust "MINEAA," "MAXEAA," "MINEAB," and "MAXEAB" appropriately, and run "j_presto GEprep" again.
If this re-execution is bothersome, it is recommended to set the option "ADJENE= YES".
If you set it, GEprep will automatically reset the values of MINEAA, MAXEAA, MINEAB, and MAXEAB and perform the re-execution.
This will yield an output file (*.prob) that assigns the probability of occurrence of each conformation when λ = 1, which can be analyzed using the program "j_presto Ens_Ana".
>MAXLMD
@u:GEprep,p:MINLMD,n:MINEAA
Option for the input file (GEprep.inp) for the subprogram "j_presto GEprep" that prepares parameter files needed for ALSD.
This option specifies the maximum limit of lambda for ALSD reweighting.
ALSD is a simulation method that allows users to explore a wide range of λ values by varying λ during the simulation to sample various conformations related to the region of interest (Region A) where the user wants to promote the conformational changes.
The resulting confirmational ensemble includes a variety of conformations, ranging from stable to unstable configurations.

In ALSD, you can perform reweighting to reconstruct a conformational ensemble corresponding to any desired λ from the resulting ensemble.
To perform this reweighting, it is necessary to determine the distribution in the three-dimensional space of 1) λ, 2) potential energy within region A (E_AA), and 3) potential energy between regions A and B (E_AB) based on the conformational ensemble obtained from the ALSD simulation.
This allows for the calculation of the probability of occurrence of each conformation when λ = 1.
In practical computation, obtaining this three-dimensional distribution requires a significant amount of memory.
To keep the memory usage for reweighting calculations within feasible limits, it is essential to narrow down the ranges for λ, E_AA, and E_AB necessary for reproducing the conformational ensemble at λ = 1.

First, specify the range of λ to obtain conformations using "MINLMD" and "MAXLMD".
The range specified for λ should be centered around λ = 1, with some width on either side (for example, from 0.75 to 1.25).
Initially, arbitrary real numbers should be assigned to "MINEAA," "MAXEAA," "MINEAB," and "MAXEAB".
Once these settings are made, running "j_presto GEprep" will produce a log with messages similar to the following:
        * Selected min & max lambda or the square for CANO dist.
                0.750 -      1.250
        * min & max EAA & EAB in the selected lrange
                EAA :        -621.246 -        -173.357
                EAB :       -1208.770 -        -440.000
Based on these values, adjust "MINEAA," "MAXEAA," "MINEAB," and "MAXEAB" appropriately, and run "j_presto GEprep" again.
If this re-execution is bothersome, it is recommended to set the option "ADJENE= YES".
If you set it, GEprep will automatically reset the values of MINEAA, MAXEAA, MINEAB, and MAXEAB and perform the re-execution.
This will yield an output file (*.prob) that assigns the probability of occurrence of each conformation when λ = 1, which can be analyzed using the program "j_presto Ens_Ana".
>MINEAA
@u:GEprep,p:MAXLMD,n:MAXEAA
Option for the input file (GEprep.inp) for the subprogram "j_presto GEprep" that prepares parameter files needed for ALSD.
This option specifies the minimum limit of E_AA for ALSD reweighting.
ALSD is a simulation method that allows users to explore a wide range of λ values by varying λ during the simulation to sample various conformations related to the region of interest (Region A) where the user wants to promote the conformational changes.
The resulting confirmational ensemble includes a variety of conformations, ranging from stable to unstable configurations.

In ALSD, you can perform reweighting to reconstruct a conformational ensemble corresponding to any desired λ from the resulting ensemble.
To perform this reweighting, it is necessary to determine the distribution in the three-dimensional space of 1) λ, 2) potential energy within region A (E_AA), and 3) potential energy between regions A and B (E_AB) based on the conformational ensemble obtained from the ALSD simulation.
This allows for the calculation of the probability of occurrence of each conformation when λ = 1.
In practical computation, obtaining this three-dimensional distribution requires a significant amount of memory.
To keep the memory usage for reweighting calculations within feasible limits, it is essential to narrow down the ranges for λ, E_AA, and E_AB necessary for reproducing the conformational ensemble at λ = 1.

First, specify the range of λ to obtain conformations using "MINLMD" and "MAXLMD".
The range specified for λ should be centered around λ = 1, with some width on either side (for example, from 0.75 to 1.25).
Initially, arbitrary real numbers should be assigned to "MINEAA," "MAXEAA," "MINEAB," and "MAXEAB".
Once these settings are made, running "j_presto GEprep" will produce a log with messages similar to the following:
        * Selected min & max lambda or the square for CANO dist.
                0.750 -      1.250
        * min & max EAA & EAB in the selected lrange
                EAA :        -621.246 -        -173.357
                EAB :       -1208.770 -        -440.000
Based on these values, adjust "MINEAA," "MAXEAA," "MINEAB," and "MAXEAB" appropriately, and run "j_presto GEprep" again.
If this re-execution is bothersome, it is recommended to set the option "ADJENE= YES".
If you set it, GEprep will automatically reset the values of MINEAA, MAXEAA, MINEAB, and MAXEAB and perform the re-execution.
This will yield an output file (*.prob) that assigns the probability of occurrence of each conformation when λ = 1, which can be analyzed using the program "j_presto Ens_Ana".
>MAXEAA
@u:GEprep,p:MINEAA,n:MINEAB
Option for the input file (GEprep.inp) for the subprogram "j_presto GEprep" that prepares parameter files needed for ALSD.
This option specifies the maximum limit of E_AA for ALSD reweighting.
ALSD is a simulation method that allows users to explore a wide range of λ values by varying λ during the simulation to sample various conformations related to the region of interest (Region A) where the user wants to promote the conformational changes.
The resulting confirmational ensemble includes a variety of conformations, ranging from stable to unstable configurations.

In ALSD, you can perform reweighting to reconstruct a conformational ensemble corresponding to any desired λ from the resulting ensemble.
To perform this reweighting, it is necessary to determine the distribution in the three-dimensional space of 1) λ, 2) potential energy within region A (E_AA), and 3) potential energy between regions A and B (E_AB) based on the conformational ensemble obtained from the ALSD simulation.
This allows for the calculation of the probability of occurrence of each conformation when λ = 1.
In practical computation, obtaining this three-dimensional distribution requires a significant amount of memory.
To keep the memory usage for reweighting calculations within feasible limits, it is essential to narrow down the ranges for λ, E_AA, and E_AB necessary for reproducing the conformational ensemble at λ = 1.

First, specify the range of λ to obtain conformations using "MINLMD" and "MAXLMD".
The range specified for λ should be centered around λ = 1, with some width on either side (for example, from 0.75 to 1.25).
Initially, arbitrary real numbers should be assigned to "MINEAA," "MAXEAA," "MINEAB," and "MAXEAB".
Once these settings are made, running "j_presto GEprep" will produce a log with messages similar to the following:
        * Selected min & max lambda or the square for CANO dist.
                0.750 -      1.250
        * min & max EAA & EAB in the selected lrange
                EAA :        -621.246 -        -173.357
                EAB :       -1208.770 -        -440.000
Based on these values, adjust "MINEAA," "MAXEAA," "MINEAB," and "MAXEAB" appropriately, and run "j_presto GEprep" again.
If this re-execution is bothersome, it is recommended to set the option "ADJENE= YES".
If you set it, GEprep will automatically reset the values of MINEAA, MAXEAA, MINEAB, and MAXEAB and perform the re-execution.
This will yield an output file (*.prob) that assigns the probability of occurrence of each conformation when λ = 1, which can be analyzed using the program "j_presto Ens_Ana".
>MINEAB
@u:GEprep,p:MAXEAA,n:MAXEAB
Option for the input file (GEprep.inp) for the subprogram "j_presto GEprep" that prepares parameter files needed for ALSD.
This option specifies the minimum limit of E_AB for ALSD reweighting.
ALSD is a simulation method that allows users to explore a wide range of λ values by varying λ during the simulation to sample various conformations related to the region of interest (Region A) where the user wants to promote the conformational changes.
The resulting confirmational ensemble includes a variety of conformations, ranging from stable to unstable configurations.

In ALSD, you can perform reweighting to reconstruct a conformational ensemble corresponding to any desired λ from the resulting ensemble.
To perform this reweighting, it is necessary to determine the distribution in the three-dimensional space of 1) λ, 2) potential energy within region A (E_AA), and 3) potential energy between regions A and B (E_AB) based on the conformational ensemble obtained from the ALSD simulation.
This allows for the calculation of the probability of occurrence of each conformation when λ = 1.
In practical computation, obtaining this three-dimensional distribution requires a significant amount of memory.
To keep the memory usage for reweighting calculations within feasible limits, it is essential to narrow down the ranges for λ, E_AA, and E_AB necessary for reproducing the conformational ensemble at λ = 1.

First, specify the range of λ to obtain conformations using "MINLMD" and "MAXLMD".
The range specified for λ should be centered around λ = 1, with some width on either side (for example, from 0.75 to 1.25).
Initially, arbitrary real numbers should be assigned to "MINEAA," "MAXEAA," "MINEAB," and "MAXEAB".
Once these settings are made, running "j_presto GEprep" will produce a log with messages similar to the following:
        * Selected min & max lambda or the square for CANO dist.
                0.750 -      1.250
        * min & max EAA & EAB in the selected lrange
                EAA :        -621.246 -        -173.357
                EAB :       -1208.770 -        -440.000
Based on these values, adjust "MINEAA," "MAXEAA," "MINEAB," and "MAXEAB" appropriately, and run "j_presto GEprep" again.
If this re-execution is bothersome, it is recommended to set the option "ADJENE= YES".
If you set it, GEprep will automatically reset the values of MINEAA, MAXEAA, MINEAB, and MAXEAB and perform the re-execution.
This will yield an output file (*.prob) that assigns the probability of occurrence of each conformation when λ = 1, which can be analyzed using the program "j_presto Ens_Ana".
>MAXEAB
@u:GEprep,p:MINEAB,n:FORCES
Option for the input file (GEprep.inp) for the subprogram "j_presto GEprep" that prepares parameter files needed for ALSD.
This option specifies the maximum limit of E_AB for ALSD reweighting.
ALSD is a simulation method that allows users to explore a wide range of λ values by varying λ during the simulation to sample various conformations related to the region of interest (Region A) where the user wants to promote the conformational changes.
The resulting confirmational ensemble includes a variety of conformations, ranging from stable to unstable configurations.

In ALSD, you can perform reweighting to reconstruct a conformational ensemble corresponding to any desired λ from the resulting ensemble.
To perform this reweighting, it is necessary to determine the distribution in the three-dimensional space of 1) λ, 2) potential energy within region A (E_AA), and 3) potential energy between regions A and B (E_AB) based on the conformational ensemble obtained from the ALSD simulation.
This allows for the calculation of the probability of occurrence of each conformation when λ = 1.
In practical computation, obtaining this three-dimensional distribution requires a significant amount of memory.
To keep the memory usage for reweighting calculations within feasible limits, it is essential to narrow down the ranges for λ, E_AA, and E_AB necessary for reproducing the conformational ensemble at λ = 1.

First, specify the range of λ to obtain conformations using "MINLMD" and "MAXLMD".
The range specified for λ should be centered around λ = 1, with some width on either side (for example, from 0.75 to 1.25).
Initially, arbitrary real numbers should be assigned to "MINEAA," "MAXEAA," "MINEAB," and "MAXEAB".
Once these settings are made, running "j_presto GEprep" will produce a log with messages similar to the following:
        * Selected min & max lambda or the square for CANO dist.
                0.750 -      1.250
        * min & max EAA & EAB in the selected lrange
                EAA :        -621.246 -        -173.357
                EAB :       -1208.770 -        -440.000
Based on these values, adjust "MINEAA," "MAXEAA," "MINEAB," and "MAXEAB" appropriately, and run "j_presto GEprep" again.
If this re-execution is bothersome, it is recommended to set the option "ADJENE= YES".
If you set it, GEprep will automatically reset the values of MINEAA, MAXEAA, MINEAB, and MAXEAB and perform the re-execution.
This will yield an output file (*.prob) that assigns the probability of occurrence of each conformation when λ = 1, which can be analyzed using the program "j_presto Ens_Ana".
>ADJENE
@u:GEprep,p:FORCES,n:INPENE
Option for the input file (GEprep.inp) for the subprogram "j_presto GEprep" that prepares parameter files needed for ALSD.
When this option is set to "YES" (ADJENE= YES), energy ranges for ALSD reweighting (MINEAA, MAXEAA, MINEAB, and MAXEAB) are automatically determined.
The default setting is "NO".
Note that enabling this option will cause the program to first read all the energy data to determine the range and then read the same data again, effectively doubling the computational time.
ALSD is a simulation method that allows users to explore a wide range of λ values by varying λ during the simulation to sample various conformations related to the region of interest (Region A) where the user wants to promote the conformational changes.
The resulting confirmational ensemble includes a variety of conformations, ranging from stable to unstable configurations.

In ALSD, you can perform reweighting to reconstruct a conformational ensemble corresponding to any desired λ from the resulting ensemble.
To perform this reweighting, it is necessary to determine the distribution in the three-dimensional space of 1) λ, 2) potential energy within region A (E_AA), and 3) potential energy between regions A and B (E_AB) based on the conformational ensemble obtained from the ALSD simulation.
This allows for the calculation of the probability of occurrence of each conformation when λ = 1.
In practical computation, obtaining this three-dimensional distribution requires a significant amount of memory.
To keep the memory usage for reweighting calculations within feasible limits, it is essential to narrow down the ranges for λ, E_AA, and E_AB necessary for reproducing the conformational ensemble at λ = 1.

First, specify the range of λ to obtain conformations using "MINLMD" and "MAXLMD".
The range specified for λ should be centered around λ = 1, with some width on either side (for example, from 0.75 to 1.25).
Initially, arbitrary real numbers should be assigned to "MINEAA," "MAXEAA," "MINEAB," and "MAXEAB".
Once these settings are made, running "j_presto GEprep" will produce a log with messages similar to the following:
        * Selected min & max lambda or the square for CANO dist.
                0.750 -      1.250
        * min & max EAA & EAB in the selected lrange
                EAA :        -621.246 -        -173.357
                EAB :       -1208.770 -        -440.000
Based on these values, adjust "MINEAA," "MAXEAA," "MINEAB," and "MAXEAB" appropriately, and run "j_presto GEprep" again.
If this re-execution is bothersome, it is recommended to set the option "ADJENE= YES".
If you set it, GEprep will automatically reset the values of MINEAA, MAXEAA, MINEAB, and MAXEAB and perform the re-execution.
This will yield an output file (*.prob) that assigns the probability of occurrence of each conformation when λ = 1, which can be analyzed using the program "j_presto Ens_Ana".
>FORCES
@u:GEprep,p:MAXEAB,n:ADJENE
Option for the input file (GEprep.inp) for the subprogram "j_presto GEprep" that prepares parameter files needed for ALSD.
This option specifies the force size applied to λ particle when it goes out of the λ range set by "MINVAL" and "MAXVAL".

In ALSD simulations, it is crucial to carefully set "FORCES" to ensure successful simulation outcomes. The λ particle scales the interactions within the region of interest (Region A) to promote the conformational change.
Similar to the atoms in the system, the λ particle undergoes motion while experiencing forces. In ALSD, if the λ particle moves outside the range set by "MINVAL" and "MAXVAL", an additional force is applied to bring it back within the specified range.
The "FORCES" option designates the magnitude of this force.

There is no strict rule for determining this force's magnitude, but empirically, setting it to roughly half the mass of the λ particle has been effective.
By default, the mass of λ is set as the sum of the atomic masses in Region A.
This value is logged as "LAMBDA WEIGHT: ***" in the output when you execute "j_presto md_run", which can be referenced when tuning "FORCES".

Setting this value too small may cause the λ particle to deviate significantly from the desired range, leading to simulation instability or unexpected terminations.
Conversely, if this value is set too large, the system will experience excessive force along the λ direction near the boundary.
This could interfere with conformational sampling, as conformations trying to fold in low-λ regions may be forcibly shifted towards high-λ values, thus hindering the sampling of stable conformations.

In the early stages of ALSD calculations, the estimate of the function dlnP(λ)/dλ, which governs λ’s motion, is less accurate (For details, refer to the description of "NWINDO"), making it more likely for the λ particle to deviate from the range.
Therefore, it is advisable to start with a larger "FORCES" value and gradually reduce it as the simulation progresses and the estimation accuracy improves, bringing it closer to the final target value.
For specific setup examples, you may refer to the template file settings available in "j_presto get_tmpl batch_set_ALSD.inp".
>INPENE
@u:GEprep,p:ADJENE,n:NFIRST
Option for the input file (batch_set.inp) for the subprogram "j_presto GEprep" that prepares parameter files needed for Generalized Ensemble MD simulations like McMD and ALSD.
This option specifies the location of input "*.ene" file to calculate the function, which is necessary for executing McMD and ALSD.
It automatically generates a list of *.ene files, which contain energy and λ values by executing "j_presto genlist" command inside.
Please check "genlist" term for usage of "genlist" command.
As described in the template file obtained with "j_presto get_tmpl batch_set_ALSD.inp", placeholders (e.g., #RUN) can be used in the description.
The pattern given by INPENE is used for the argument of genlist, and file.list including the input file paths of *.ene files are automatically generated.
Note that in this option, argument for "genlist -r" is given from "NFIRST" and "NFINAL" options.
>NFIRST
@u:GEprep,p:INPENE,n:NFINAL
Option for the input file (batch_set.inp) for the subprogram "j_presto GEprep" that prepares parameter files needed for Generalized Ensemble MD simulations like McMD and ALSD.
This option specifies from which data point in the *.ene file, containing energy and λ values, to use data essential for calculating functions necessary to execute McMD or ALSD.
In McMD and ALSD, iterative calculations are performed while updating the functions.
Since these simulations resume from the previous one, the initial stage of the simulation partly inherits the effects of the previously used function.
To avoid this influence, if you want to exclude information from the first 100,000 steps after starting the calculation and use information from step 100,001 onwards for function estimation, set NFIRST=100001.
>NFINAL
@u:GEprep,p:NFIRST
Option for the input file (batch_set.inp) for the subprogram "j_presto GEprep" that prepares parameter files needed for Generalized Ensemble MD simulations like McMD and ALSD.
This option specifies to which data point in the *.ene file, containing energy and λ values, to use data essential for calculating functions necessary to execute McMD or ALSD.
If you want to include data up to a specific data point, set that value here.
If you want to use all data up to the end of the file, specify a sufficiently large number.
>j_presto_mpi
@u:j_presto,n:j_presto_master
"j_presto_mpi" executes multiple MD simulation runs as a single MPI job using an embarrassingly parallel approach.
This program may require different MPI execution commands depending on your computing environment, such as mpirun, mpiexec, or mpiexec.hydra.
For example, if your environment uses mpiexec.hydra, you would run the following command:
	mpiexec.hydra j_presto_mpi [MD ID] [Number of MD runs] [Number of MPI parallel processes]
When generating input files using the "j_presto batch_set" command, first retrieve the template script "md_multi.exe" by running:
	j_presto get_tmpl md_multi
After obtaining this template, modify it as necessary.
Depending on the computer environment you are using, specify the necessary options for job schedulers such as QSUB (for PBS or Torque), PJSUB (for NQSII or Fugaku), sbatch (for SLURM), or bsub (for LSF), and also appropriately modify the number of OpenMP threads (e.g., export OMP_NUM_THREADS=8).
If you are unsure about this content, it is recommended that you check the manual of the computer you are using for the section on how to execute parallel computations.
This template file contains scripts for both running parallel execution command (j_presto_mpi) and master-slave execution command (j_presto_master).
Use the one you need and either comment out the unnecessary one with # or delete it.
The "batch_set" will then use this modified file to automatically generate scripts, named md_multi_*.exe (where * corresponds to the MD ID), to execute multiple MD runs as a single MPI job.
>j_presto_master
@u:j_presto,p:j_presto_mpi
"j_presto_master" executes multiple MD simulation runs as a single MPI job using a master-slave approach.
This program may require different MPI execution commands depending on your computing environment, such as mpirun, mpiexec, or mpiexec.hydra.
For example, if your environment uses mpiexec.hydra, you would run the following command:
        mpiexec.hydra j_presto_master [MD ID] [Number of MD runs] [Number of MPI parallel processes]
When generating input files using the "j_presto batch_set" command, first retrieve the template script "md_multi.exe" by running:
        j_presto get_tmpl md_multi
After obtaining this template, modify it as necessary.
Depending on the computer environment you are using, specify the necessary options for job schedulers such as QSUB (for PBS or Torque), PJSUB (for NQSII or Fugaku), sbatch (for SLURM), or bsub (for LSF), and also appropriately modify the number of OpenMP threads (e.g., export OMP_NUM_THREADS=8).
If you are unsure about this content, it is recommended that you check the manual of the computer you are using for the section on how to execute parallel computations.
This template file contains scripts for both running parallel execution command (j_presto_mpi) and master-slave execution command (j_presto_master).
Use the one you need and either comment out the unnecessary one with # or delete it.
The "batch_set" will then use this modified file to automatically generate scripts, named md_multi_*.exe (where * corresponds to the MD ID), to execute multiple MD runs as a single MPI job.
>md_multi.exe
@u:batch_set
md_multi.exe is a script used to execute multiple MD runs prepared with "j_presto batch_set" as a single MPI job.
You can obtain the template file by using "j_presto get_tmpl md_multi" command.
After obtaining this template, modify it as necessary.
This script executes "j_presto_mpi" or "j_presto_master".
These program may require different MPI execution commands depending on your computing environment, such as mpirun, mpiexec, or mpiexec.hydra.
For example, if your environment uses mpiexec.hydra, you would run the following command:
        mpiexec.hydra (j_presto_mpi or j_presto_master) [MD ID] [Number of MD runs] [Number of MPI parallel processes]
Depending on the computer environment you are using, specify the necessary options for job schedulers such as QSUB (for PBS or Torque), PJSUB (for NQSII or Fugaku), sbatch (for SLURM), or bsub (for LSF), and also appropriately modify the number of OpenMP threads (e.g., export OMP_NUM_THREADS=8).
If you are unsure about this content, it is recommended that you check the manual of the computer you are using for the section on how to execute parallel computations.
This template file contains scripts for both running parallel execution command (j_presto_mpi) and master-slave execution command (j_presto_master).
Use the one you need and either comment out the unnecessary one with # or delete it.
The "batch_set" will then use this modified file to automatically generate scripts, named md_multi_*.exe (where * corresponds to the MD ID), to execute multiple MD runs as a single MPI job.
>Ens_Ana
@u:j_presto,p:GEprep,n:PCAaxis
"j_presto Ens_Ana" performs analysis of conformational ensembles obtainted from simulation results.
The usege is as follows:
	j_presto Ens_Ana [input file name]
Ens_Ana performs various ensemble analyses according to the settings specified in the input file (Ens_Ana.inp).
The template file for Ens_Ana.inp can be obtained using the command "j_presto get_tmpl Ens_Ana.inp", and it is recommended to modify this template to suit your desired setting.
Additionally, the execution script for Ens_Ana (Ens_Ana.exe) can be obtained using "j_presto get_tmpl Ens_Ana", so please make use of it.
For details on the various options that can be configured in the input file, refer to the "Ens_Ana.inp" file.

In Ens_Ana, analysis results are output to various files, which are stored in an output directory.
Representative file extensions are listed below.

Output file list:
	*_ave.pdb    : The average position of each atom in the ensemble in PDB format.
	*_con.pdb    : Contact probabilities between atoms specified by the atom_spec_contact option in the Ens_Ana.inp file.
		       These values are output in PDB file format and recorded in the B-factor field of the ATOM records.
	*_dist.dx    : Spatial charge distribution of the selected group of atoms.
		       The output is provided in the dx format (OpenDX format) and can be visualized using software such as UCSF Chimera.
	*_dist.xplor : Spatial distribution of the selected group of atoms.
		       Output is provided in Xplor format and can be visualized using software capable of displaying electron density maps, such as UCSF Chimera.
	*_RMSF.pdb   : Root Mean Square Fluctuation (RMSF) values from the average position of each atom in the ensemble.
		       This file is output in PDB format, and the RMSF values are recorded in the B-factor field of the ATOM records.
	*.cod        : coordinate file in j_presto binary format.
		       This format can be used as input for Ens_Ana and allows coordinate data to be stored more compactly than the PDB format.
	*.distan     : distances between selected atom pairs (Å)
			Column 1  : Weight for GEPS (1 for standard simulations)
			Column 2- : distances between selected atom pairs.
	*.PCAcod     : A binary-format coordinate data for PCA analysis.
		       PCA can be performed by using this file as input for the "j_presto PCAaxis" and "j_presto PCAproj" commands.
	*.Qval       : Reproduction rate (Q value) of inter-residue contact pairs formed in the native structure.
			Column 1 : Structure index
			Column 2 : Weight for GEPS (1 for standard simulations)
			Column 3 : Q value
	*.Rg         : Radius of gyration (Å)
			Column 1 : Structure index
			Column 2 : Radius of gyration
			Column 3 : Distance from the center of mass to the farthest atom
			Column 4 : Weight for GEPS (1 for standard simulations)
	*.rmsd       : Root Mean Square Deviation (RMSD) to the reference coordinates (Å)
			Column 1 : Structure index
			Column 2 : RMSD
			Column 3 : Weight for GEPS (1 for standard simulations)
	*.SS	     : Secondary structure of each residue as assigned by the DSSP program.
		       Secondary structure type list defined by DSSP
			H : Alpha helix
			B : Isolated beta-bridge residue
			E : Extended strand, part of a beta-sheet
			G : 3_10 helix
			I : Pi helix
			T : Hydrogen-bonded turn
			S : Bend
		  {space} : Loop, coil, or irregular structure (not assigned to any regular secondary structure)
	*.sscr       : The probability of secondary structure for each residue within the input ensemble.
			Column 1 : Residue number
			Column 2 : Alpha helix (H)
			Column 3 : 3_10 helix (G)
			Column 4 : Pi helix (I)
			Column 5 : Isolated beta-bridge residue (B)
			Column 6 : Extended strand, part of a beta-sheet (E)
			Column 7 : Hydrogen-bonded turn (T)
			Column 8 : Bend (S)
			Column 9 : Loop, coil, or irregular structure (not assigned to any regular secondary structure)
	*.sscs       : The number of residues assigned a secondary structure in each structure.
			Column 1 : Structure index
			Column 2 : Alpha helix (H)
			Column 3 : 3_10 helix (G)
			Column 4 : Pi helix (I)
			Column 5 : Isolated beta-bridge residue (B)
			Column 6 : Extended strand, part of a beta-sheet (E)
			Column 7 : Hydrogen-bonded turn (T)
			Column 8 : Bend (S)
			Column 9 : Loop, coil, or irregular structure (not assigned to any regular secondary structure)
        *.sscw       : The probability of secondary structure of the input ensemble.
			Column 1 : Alpha helix (H)
			Column 2 : 3_10 helix (G)
			Column 3 : Pi helix (I)
			Column 4 : Isolated beta-bridge residue (B)
			Column 5 : Extended strand, part of a beta-sheet (E)
			Column 6 : Hydrogen-bonded turn (T)
			Column 7 : Bend (S)
			Column 8 : Loop, coil, or irregular structure (not assigned to any regular secondary structure)
	*.TTPncnf    : The number of structures output from each simulation run.
		       Each line corresponds to number from a simulation run.
		       In the case of Trivial Trajectory Parallelization (TTP)-- a parallel simulation approach in which multiple runs explore a single ensemble-- this file indicates which simulation run each structure originated from.
		       By providing this file along with various analysis result files (e.g., *.rmsd, *.Rg) generated by running Ens_Ana as input to the "j_presto distrib" command, you can calculate the standard error of the distribution across simulation runs.
	*.weight     : weight, energy, and lambda values.
		       Each line corresponds to a structure.
			Column 1 : Structure index
			Column 2 : Weight for GEPS (1 for standard simulations)
			Column 3 : Lambda value for ALSD
			Column 4 : Total potential energy of the system
			Column 5 : EAA energy for ALSD (see the "MINEAA" term for details)
			Column 6 : EAB energy for ALSD (see the "MINEAA" term for details)
			Column 7 : EBB energy for ALSD (see the "MINEAA" term for details)
>Ens_Ana.inp
@u:Ens_Ana
The input file for the program "j_presto Ens_Ana" to analyze simulation results.
It is executed with this input file using the following command:
	j_presto Ens_Ana [input file name]
The main options that can be set in this file are as follows:
	overwrite_flag			: Flag that allows overwriting of analysis results
	project_name			: Specification of the output name for the analysis results
	log_level			: Output log level
	template_PDB			: Template PDB file name
	input_topology			: Input topology file name
	input_PDB_list			: List file for input PDB files
	PDB_consistency_check		: Flag to check consistency of input PDB files
	input_binary_list		: List file for Input j_presto binary files
	output_PDB_flag			: Flag to output conformations in PDB format
	output_binary_flag		: Flag to output conformations in j_presto binary format
	reference_PDB			: Reference PDB file name
	input_reference_PDB_list	: List file to input multiple PDB files as reference
	input_reference_binary_list	: List file to input multiple j_presto binary files as reference
	atom_spec_output		: Atom specifier for output
	interval			: Interval for analysis
	input_prob_file			: Probability file name for reweighing of GE calculations
	weight_method			: Method for reweighting
	weight_threshold		: Thresold for trimming conformations with low probability
	random_seed			: random seed
	input_energy_file		: Energy file name
	periodic_boundary		: Boundary information for periodic boundary condition
	DSSP_flag			: Flag to execute DSSP analysis
	atom_spec_Rg			: Atom specifier to be used for radius of gyration calculation
	atom_spec_RMSD			: Atom specifier to be used for RMSD calculate
	atom_spec_RMSD_fit		: Atom specifier used for superimposing conformations during RMSD calculation
	atom_spec_RMSD_ref		: Atom specifier in reference conformation for RMSD calculate
	atom_spec_RMSD_ref_fit		: Atom specifier in reference conformation for superimposing during RMSD calculation
	RMSD_mode			: RMSD calculation mode
	interval_for_timeseries_RMSD	: The interval for RMSD calculation to track conformational changes over time in the simulation trajectory
	RMSF_flag			: Flag for RMSF calculation 
	PCA_method			: Specification of the coordinate format for PCA analysis
	atom_spec_PCA			: Atom specifier to be used for PCA analysis
	neighbor_residue_PCA		: Threshold for excluding nearby residues from the PCA coordinate calculation
	tolerance_PCA			: Tolerance distance for determining residue-residue contacts in PCA analysis
	atom_spec_Qvalue		: Atom specifier to be used for Qvalue calculation
	tolerance_Qvalue		: Tolerance distance for determining residue-residue contacts in Qvalue analysis
	tolerance_NCP			: Tolerance distance for determining Native Contact Pairs (NCPs) in reference conformations for Qvalue analysis
	NCP_rate			: Threshold percentage of reference conformations where residue-residue contacts are considered Native Contact Pairs (NCPs)
	cell_boundary			: Cell range for performing distribution analysis
	atom_spec_distribution		: Atom specifier for distribution analysis
	distribution_cell_size		: Grid cell size for distribution analysis
	atom_spec_contact		: Atom specifier for contact analysis
	water_radius_for_contact	: Tolerance distance for judging contact formation
	measurements			: Specifier for distance, angle, dihedral angle analyses
Each option can be set in the input file as follows:
	[Option name] = [Option Value]
For detailed information about each option, refer to the manual by looking up the option name.
>overwrite_flag
@u:Ens_Ana.inp,n:project_name
An option that can be set in the input file (Ens_Ana.inp) for the ensemble analysis program, "j_presto Ens_Ana".
In "j_presto Ens_Ana", when outputting analysis result files, the program checks if a file with the same name already exists.
To skip this check and automatically overwrite the file, set "overwrite_flag = YES".
The defalut is "NO".
>project_name
@u:Ens_Ana.inp,p:overwrite_flag,n:log_level
An option that can be set in the input file (Ens_Ana.inp) for the ensemble analysis program, "j_presto Ens_Ana".
This option specifies the file name for the output analysis results.
The default is "a".
If the file name is set to "test", a directory named "Ens_Ana_test" will be created in the same directory as the program execution, and all analysis result files will be stored there.
>log_level
@u:Ens_Ana.inp,p:project_name,n:template_PDB
An option that can be set in the input file (Ens_Ana.inp) for the ensemble analysis program, "j_presto Ens_Ana".
This option specifies the log level when running Ens_Ana.
Three levels are available:
	log_level = long	: Displays detailed logs
	log_level = short	: Displays simplified logs
	log_level = no		: Disables logging (default)
>template_PDB
@u:Ens_Ana.inp,p:log_level,n:input_topology
An option that can be set in the input file (Ens_Ana.inp) for the ensemble analysis program, "j_presto Ens_Ana".
This option specifies the PDB file of the system to be analyzed.
Information such as atom and residue names will be taken from the specified PDB file.
Note that when using the "input_binary_list" option to provide data in j_presto binary format, the number of atoms in the system must match.
If only partial atomic coordinate information was output as a binary file using the "OUTATM" option during the "j_presto md_run", the PDB file specified here must align with it; otherwise, the Ens_Ana program will terminate abnormally with an error.
>input_topology
@u:Ens_Ana.inp,p:template_PDB,n:input_PDB_list
An option that can be set in the input file (Ens_Ana.inp) for the ensemble analysis program, "j_presto Ens_Ana".
This option specifies the topology file (*.tpl) for topology information, such as atomic charges and van der Waals radii, when such physical properties are required for the analysis.
The tpl file can be generated using "j_presto prep".
It is used to provide atomic radii information for analyses such as Qvalue, contact, and distribution analysis.
>input_PDB_list
@u:Ens_Ana.inp,p:input_topology,n:PDB_consistency_check
An option that can be set in the input file (Ens_Ana.inp) for the ensemble analysis program, "j_presto Ens_Ana".
This option specifies a list file containing the names of PDB files to be used in the analysis.
Ens_Ana is designed to perform analyses on multiple structures (ensemble).
To input numerous structures in PDB format, create a list file where each line contains on PDB file name as follows:
	1.pdb
	2.pdb
	3.pdb
	...
and specify this list file using this option.
>PDB_consistency_check
@u:Ens_Ana.inp,p:input_PDB_list,n:input_binary_list
An option that can be set in the input file (Ens_Ana.inp) for the ensemble analysis program, "j_presto Ens_Ana".
This option is a flag to check the consistency between the PDB files provided through "input_PDB_list" and the template PDB specified by "template_PDB".
If inconsistencies exist, Ens_Ana cannnot perform accurate analysis; thus, the default setting is "YES".
However, as this check requires additonal computation time, it can be set to "NO" to reduce the time if you are confident that the files are already consistent.
This option also applies to consistency check for reference PDB files provided through "input_reference_PDB" and "input_reference_PDB_list".
>input_binary_list
@u:Ens_Ana.inp,p:PDB_consistency_check,n:output_PDB_flag
An option that can be set in the input file (Ens_Ana.inp) for the ensemble analysis program, "j_presto Ens_Ana".
This option specifies a list file containing the names of j_presto coordinate binary format files (*.cod) to be used for analysis.
The format of this file is as follows:
	1.cod
	51  99999999
	2.cod
	51  99999999
	...
Each binary file's information is written in two lines.
The first line specifies the file name and the second one is the range of structures to be analyzed, defined by the first and last structure numbers included in the binary file.
In the above example, the initial 50 structures are excluded, starting the analysis from the 51st structure.
If the last number exceeds the total number in the binary file, all structures up to the last one are analyzed.

In the previous example, two simulation trajectories (1.cod and 2.cod) were used as input.
However, in practical simulation workflows, it is often not feasible to run one long trajectory continuously.
Instead, simulations are typically executed in shorter segments, with each new segment starting from the final structure of the previous one.
In such cases, if you want Ens_Ana to treat these segmented trajectories as a single continuous trajectory, you can link them by inserting a space and the following symbol "->" after the filename like:
        1.cod ->
        51  99999999
        2.cod
        51  99999999
        ...
In this case the sum of trajectories of 1.cod and 2.cod is treated as a long trajectory.
This technique is especially useful when performing time-series analyses.

The binary files are generated by executing "j_presto md_run" with the "NAMECO" option to specify their names.
Note that if only partial coordinates were output using the "OUTATM" option, the PDB file specified by "template_PDB" option must also include only the corresponding atoms.
>output_PDB_flag
@u:Ens_Ana.inp,p:input_binary_list,n:output_binary_flag
An option that can be set in the input file (Ens_Ana.inp) for the ensemble analysis program, "j_presto Ens_Ana".
When this flag is set to "YES," the input structures are output as PDB files.
For example, if "project_name = test" is specified, PDB files will be saved under the directory "Ens_Ana_test/test_PDB/" with names such as "1.pdb".
This option can be used to tranform j_presto binary format files to PDB files.
Additionally, if RMSD analysis is performed simultaneously, the structures aligned to the reference structure can be output.
Note that a large number of PDB files may be generated depending on the number of input structures.
>output_binary_flag
@u:Ens_Ana.inp,p:output_PDB_flag,n:reference_PDB
An option that can be set in the input file (Ens_Ana.inp) for the ensemble analysis program, "j_presto Ens_Ana".
This option outputs the input structures as a j_presto binary format file (*.cod).
>reference_PDB
@u:Ens_Ana.inp,p:output_binary_flag,n:input_reference_PDB_list
An option that can be set in the input file (Ens_Ana.inp) for the ensemble analysis program, "j_presto Ens_Ana".
This option specifies reference PDB file name.
This reference PDB file is used for RMSD and Qvalue analyses.
>input_reference_PDB_list
@u:Ens_Ana.inp,p:reference_PDB,n:input_reference_binary_list
An option that can be set in the input file (Ens_Ana.inp) for the ensemble analysis program, "j_presto Ens_Ana".
If you input multiple reference PDB files, this option specifies a list file containing the names of PDB files.
The list file format is as follows:
	1.pdb
	2.pdb
	3.pdb
	...
For example, this option is used when calculating RMSD against multiple reference structures, such as NMR models, or determining Native Contact Pairs (NCPs) for Qvalue analysis based on multiple reference structures.
>input_reference_binary_list
@u:Ens_Ana.inp,p:input_reference_PDB_list,n:atom_spec_output
An option that can be set in the input file (Ens_Ana.inp) for the ensemble analysis program, "j_presto Ens_Ana".
If you input multiple reference PDB files, this option specifies a list file containing the names of j_presto coordinate binary format files (*.cod).
The list file format is as follows:
	1.cod
	51  999999
	2.cod
	51  999999
	...
Each binary file's information is written in two lines.
The first line specifies the file name and the second one is the range of structures to be analyzed, defined by the first and last structure numbers included in the binary file.
In the above example, the initial 50 structures are excluded, starting the analysis from the 51st structure. If the last number exceeds the total number in the binary file, all structures up to the last one are analyzed.
The binary files are generated by executing "j_presto md_run" with the "NAMECO" option to specify their names.
Note that if only partial coordinates were output using the "OUTATM" option, the PDB file specified by "template_PDB" option must also include only the corresponding atoms.
For example, this option is used when calculating RMSD against multiple reference structures, such as NMR models, or determining Native Contact Pairs (NCPs) for Qvalue analysis based on multiple reference structures.
>atom_spec_output
@u:Ens_Ana.inp,p:input_reference_binary_list,n:interval
An option that can be set in the input file (Ens_Ana.inp) for the ensemble analysis program, "j_presto Ens_Ana".
This option allows you to specify the atoms you want to output using the "output_PDB_flag" or "output_binary_flag", or the atoms to be analyzed by DSSP, in atom specifier format.
Refer to the "atom specifier" documentation for the specification.
>interval
@u:Ens_Ana.inp,p:atom_spec_output,n:input_prob_file
An option that can be set in the input file (Ens_Ana.inp) for the ensemble analysis program, "j_presto Ens_Ana".
This option is used when you want to reduce the number of input structures for analysis, typically for reasons related to computational time.
The default value is 1 (using all structures).
For example, setting "interval = 50" will analyze every 50th structure from the input.
>input_prob_file
@u:Ens_Ana.inp,p:interval,n:weight_method
An option that can be set in the input file (Ens_Ana.inp) for the ensemble analysis program, "j_presto Ens_Ana".
This option specifies the probability file (*.prob) that contains the weight information for each structure, typically used in analyses where the occurrence probability of each structure is considered, such as in GE simulations like McMD or ALSD.
The probability file can be obtained by running "j_presto GEprep".
>weight_method
@u:Ens_Ana.inp,p:input_prob_file,n:weight_threshold
An option that can be set in the input file (Ens_Ana.inp) for the ensemble analysis program, "j_presto Ens_Ana".
This option specifies the method for analyzing the ensemble obtained from GE simulations.
The available options are:
	weight	: Performs analysis by considering the occurrence probability of each input structure as a weight.
		  This method allows for more precise analysis but requires a longer computation time.
	select	: Generates a random number between 0 and 1, then compares it to the occurrence probability of the input structures.
		  If the probability is greater than the random number, the structure is accepted; otherwise, it is rejected, and the analysis is conducted accordingly.
		  This method is useful when a quicker, simpler analysis is needed or when generating a subensemble set considering the weights.
The random seed required for generating random numbers can be specified using the option "random_seed".
>weight_threshold
@u:Ens_Ana.inp,p:weight_method,n:random_seed
An option that can be set in the input file (Ens_Ana.inp) for the ensemble analysis program, "j_presto Ens_Ana".
If you set the option "weight_method = weight" and the occurrence probability of each structure obtained from GE simulations such as McMD or ALSD is smaller than the value set by this option, it will be excluded from the analysis.
This helps to exclude structures with extremely low contributions to the analysis, thereby improving calculation speed.
The default value is 0.00001.
>random_seed
@u:Ens_Ana.inp,p:weight_threshold,n:input_energy_file
An option that can be set in the input file (Ens_Ana.inp) for the ensemble analysis program, "j_presto Ens_Ana".
When you select the option "weight_method = select", the random numbers generated using the random seed set here will be used to select structures.
The default value is 999999.
>input_energy_file
@u:Ens_Ana.inp,p:random_seed,n:periodic_boundary
An option that can be set in the input file (Ens_Ana.inp) for the ensemble analysis program, "j_presto Ens_Ana".
If you want to perform physically meaningful analyses using structures obtained from GE simulations such as McMD or ALSD, it is necessary to consider the occurrence probabilities of each structure.
These probabilities are assigned based on the file specified by the option "input_prob_file," which requires energy information for each structure.
When the structures are provided in the j_presto binary format specified by the option "input_binary_list", this energy information is included along with the coordinate data.
On the other hand, when the structure information is provided via the option "input_PDB_list", these values are not included.
Therefore, the file specified by this option must include the energy as supplementary information.
In the specified file, the energy values of each structure listed in "input_PDB_list" must be written in the same order as the input PDB files, with one energy value per line.
For McMD, each line should contain a single energy value for the entire system.
For ALSD, each line should include two values: EAA (the energy within region A where structural changes are enhanced) and EAB (the energy between region A and region B, where structural changes occur similarly to conventional MD).
>periodic_boundary
@u:Ens_Ana.inp,p:input_energy_file,n:DSSP_flag
An option that can be set in the input file (Ens_Ana.inp) for the ensemble analysis program, "j_presto Ens_Ana".
If the input structural information assumes periodic boundary conditions, this option specifies the lower and upper bounds of the boundaries.
The periodic boundary conditions in j_presto only support rectangular shapes.
The specification format is:
	periodic_boundary = [xmin:xmax,ymin:ymax,zmin:zmax]
Note that no spaces are allowed within the square brackets.
>DSSP_flag
@u:Ens_Ana.inp,p:periodic_boundary,n:atom_spec_Rg
An option that can be set in the input file (Ens_Ana.inp) for the ensemble analysis program, "j_presto Ens_Ana".
If the program DSSP (mkdssp), which determines secondary structures from protein three-dimensional structural information, is installed and executable in your computational environment, the Ens_Ana program can internally execute mkdssp to analyze secondary structures.
Since mkdssp is an external program, it must be installed at your own responsibility.
Please note that the developers of j_presto assume no liability for the use of this program.

When the option "DSSP_flag = yes" is set, Ens_Ana internally outputs each input structure as a PDB file and executes the mkdssp program.
Be aware that this analysis involves a large amount of data output and may significantly increase computation time.
During DSSP analysis, log files for the analysis results of each structure (*.dssp) will be generated.
If analyzing a large number of structures, these files may consume substantial disk space; therefore, they are deleted after the analysis of each structure is completed.
If you wish to retain these files while performing DSSP analysis, set the option to "DSSP_flag = output".
The default setting is "DSSP_flag = no".

When DSSP analysis is performed, multiple result files will be output, including:
	*.SS 	: Each structure's secondary structure is output on one line, with each residue's secondary structure represented by a single character (e.g., "H" for alpha-helix, "S" for bend, " " for no secondary structure and so on).
	*.sscs 	: The number of secondary structure elements in each structure is output on one line.
	*.sscr	: The occurrence probabilities of secondary structures for each residue are output.
	*.sscw	: The proportions of secondary structures for the entire ensemble are output.
>atom_spec_Rg
@u:Ens_Ana.inp,p:DSSP_flag,n:atom_spec_RMSD
An option that can be set in the input file (Ens_Ana.inp) for the ensemble analysis program, "j_presto Ens_Ana".
This option allows you to specify the atoms for calculating radius of gyration (Rg).
Refer to the "atom specifier" documentation for the specification.
>atom_spec_RMSD
@u:Ens_Ana.inp,p:atom_spec_Rg,n:atom_spec_RMSD_fit
An option that can be set in the input file (Ens_Ana.inp) for the ensemble analysis program, "j_presto Ens_Ana".
This option allows you to specify the atoms for calculating Root Mean Square Deviation (RMSD).
Refer to the "atom specifier" documentation for the specification.

In RMSD calculations, if the region for structural superposition differs from the region for RMSD calculation, this option specifies the region for RMSD calculation, whilile the region for superposition should be specified using "atom_spec_RMSD_fit".
If not specified, the two regions are assumed to be the same.

Additionally, if the reference structure for the RMSD calculation differs from the input structure, you can specify the region of the reference structure to be used in the calculation and the region for the superposition separately using "atom_spec_RMSD_ref" and "atom_spec_RMSD_reffit", respectively.
>atom_spec_RMSD_fit
@u:Ens_Ana.inp,p:atom_spec_RMSD,n:atom_spec_RMSD_ref
An option that can be set in the input file (Ens_Ana.inp) for the ensemble analysis program, "j_presto Ens_Ana".
This option allows you to specify the atoms to superimpose the conformations for Root Mean Square Deviation (RMSD) calculation.
Refer to the "atom specifier" documentation for the specification.

In RMSD calculations, if the region for structural superposition differs from the region for RMSD calculation, this option specifies the region for RMSD superposition, while the region for calculation should be specified using "atom_spec_RMSD".

Additionally, if the reference structure for the RMSD calculation differs from the input structure, you can specify the region of the reference structure to be used in the calculation and the region for the superposition separately using "atom_spec_RMSD_ref" and "atom_spec_RMSD_reffit", respectively.
>atom_spec_RMSD_ref
@u:Ens_Ana.inp,p:atom_spec_RMSD_fit,n:atom_spec_RMSD_reffit
An option that can be set in the input file (Ens_Ana.inp) for the ensemble analysis program, "j_presto Ens_Ana".
This option allows you to specify the atoms in the reference conformation for calculating Root Mean Square Deviation (RMSD).
Refer to the "atom specifier" documentation for the specification.

In RMSD calculations, if the region for RMSD calculation in input structures differs from those in reference structures, this option specifies the region for reference structures, while the region for input structures should be specified using "atom_spec_RMSD".

Additionally, if you want to set different regions for RMSD calculation and superimposition in the reference structures, this option specifies the region for RMSD calculation, while the region for superimposition using "atom_spec_RMSD_reffit".
>atom_spec_RMSD_reffit
@u:Ens_Ana.inp,p:atom_spec_RMSD_ref,n:RMSD_mode
An option that can be set in the input file (Ens_Ana.inp) for the ensemble analysis program, "j_presto Ens_Ana".
This option allows you to specify the atoms in the reference conformation to superimpose for Root Mean Square Deviation (RMSD) calculation.
Refer to the "atom specifier" documentation for the specification.

In RMSD calculations, if the region for RMSD calculation in reference structures differs from the region for superimposing in reference structures, this option specifies the region for superimposing, while the region for RMSD calculation should be specified using "atom_spec_RMSD_ref".
>RMSD_mode
@u:Ens_Ana.inp,p:atom_spec_RMSD_reffit,n:interval_for_timeseries_RMSD
An option that can be set in the input file (Ens_Ana.inp) for the ensemble analysis program, "j_presto Ens_Ana".
When multiple reference structures are provided for RMSD calculation, the RMSD calculation mode can be specified as follows:
	RMSD_mode = average 	: The average structure of all reference structures is calculated, and the RMSD values of the input structures are then calculated relative to this average structure.
	RMSD_mode = multi	: The RMSD is calculated for each of the input reference structures individually.
>interval_for_timeseries_RMSD
@u:Ens_Ana.inp,p:RMSD_mode,n:RMSF_flag
An option that can be set in the input file (Ens_Ana.inp) for the ensemble analysis program, "j_presto Ens_Ana".
This option can be used when you want to evaluate structural changes over time by inputting simulation trajectories.
For example, if you set "interval_for_timeseries_RMSD = 5", it will calculate the RMSD of the current input structure relative to the structure 5 earlier.
>RMSF_flag
@u:Ens_Ana.inp,p:interval_for_timeseries_RMSD,n:PCA_method
An option that can be set in the input file (Ens_Ana.inp) for the ensemble analysis program, "j_presto Ens_Ana".
To calculate the Root Mean Square Fluctuation (RMSF) of the input ensemble relative to the reference structure, set this option to "RMSF_flag = yes".
>PCA_method
@u:Ens_Ana.inp,p:RMSF_flag,n:atom_spec_PCA
An option that can be set in the input file (Ens_Ana.inp) for the ensemble analysis program, "j_presto Ens_Ana".
This option specifies the format of the coordinate data to be used for principal component analysis (PCA).
Please specify the atoms to be used for PCA analysis with the "atom_spec_PCA" option.
The available formats are as follows:
	1 : Residue based method
		This option specifies the structural representation using internal coordinates, where the distance between specified residues is used.
		If the total number of residues in the system is N, the number of dimensions of the structural representation will be (N*(N-1))/2.
		For GE simulations like McMD or ALSD, which consider significant structural changes, using internal coordinates for PCA is often more effective for structural classification than using Cartesian coordinates.
		Residue pairs that are always in close proximity via covalent bonds typically contribute less to the PCA, so the "neighbor_residue_PCA" option can be used to exclude residue pairs adjacent in the amino acid sequence from the structural representation, reducing the number of dimensions in the analysis.
		Depending on how the inter-residue distances are defined, the following options can be selected:

		1-1 : PCA_method = average
			The distance between two residues is defined as the average of the distances between all pairs of atoms, one from each residue.
		1-2 : PCA_method = min
			The distance between two residues is defined as the minimum distance between all pairs of atoms, one from each residue.
		1-3 : PCA_method = max
			The distance between two residues is defined as the maximum distance between all pairs of atoms, one from each residue.
		1-4 : PCA_method = contact
			This option represents the structure using internal coordinates, where a value of 1 is assigned when two residues are in contact and 0 when they are not.
			The contact threshold distance can be specified using the "tolerance_PCA" option.
	2 : Atom based method
		This option provides the structure representation at the atomic level.
		The following options can be specified:

		2-1 : PCA_method = cord
			The structure is represented by the Cartesian coordinates of the selected atoms.
			If N atoms are selected, the representation will be in 3N dimensions.
			This representation is commonly used for PCA in analyses of conformational fluctuation in constant temperature simulations around the initial structure.
		2-2 : PCA_method = intercord
			The structure is represented using the pairwise distances of the specified atoms as internal coordinates.
			If N atoms are selected, the number of internal coordinates will be N*(N-1)/2.
			Note that this method can result in a significantly larger number of dimensions compared to other approaches.
The final coordinate data file for PCA is output in binary format with the name "*.PCAcod".
This file is used when running the "j_presto PCAaxis" program to calculate the axes for PCA through diagonalization, or the "j_presto PCAproj" program to project each structure onto those axes.
>atom_spec_PCA
@u:Ens_Ana.inp,p:PCA_method,n:neighbor_residue_PCA
An option that can be set in the input file (Ens_Ana.inp) for the ensemble analysis program, "j_presto Ens_Ana".
This option allows you to specify the atoms for principal component analysis (PCA).
Refer to the "atom specifier" documentation for the specification.
>neighbor_residue_PCA
@u:Ens_Ana.inp,p:atom_spec_PCA,n:tolerance_PCA
An option that can be set in the input file (Ens_Ana.inp) for the ensemble analysis program, "j_presto Ens_Ana".
In some methods specified by the "PCA_method" option, the structure is represented using internal coordinates based on residue pair distances.
Since the distance between nearby residues in the amino acid sequence often does not change significantly during structural variations, these pairs typically do not contribute to the PCA analysis.
By excluding such nearby residue pairs, the dimensionality of the structural representation can be reduced, effectively cutting down the computational cost.
For example, setting "neighbor_residue_PCA = 2" will exclude distances between each residue and its two adjacent residues in the sequence.
The default value is 1.
>tolerance_PCA
@u:Ens_Ana.inp,p:neighbor_residue_PCA,n:atom_spec_Qvalue
An option that can be set in the input file (Ens_Ana.inp) for the ensemble analysis program, "j_presto Ens_Ana".
When the option "PCA_method = contact" is selected, this option specifies the distance threshold for determining residue-residue contacts.

If a topology file is provided by the "input_topology" option, contact between two atoms is determined if the sum of their vdW radii plus the specified distance is less than or equal to the distance between them.
The default value for this is 2.8 Å (the diameter of a water molecule) when a topology file is used.

If no topology file is provided, the vdW radii are not considered, and contact is determined simply based on whether the distance between two atoms is less than or equal to the specified distance, with a default of 6.0 Å.
>atom_spec_Qvalue
@u:Ens_Ana.inp,p:tolerance_PCA,n:neighbor_residue_Qvalue
An option that can be set in the input file (Ens_Ana.inp) for the ensemble analysis program, "j_presto Ens_Ana".
This option allows you to specify the atoms for Qvalue (native contact pair reproduction rate) analysis.
Refer to the "atom specifier" documentation for the specification.
>neighbor_residue_Qvalue
@u:Ens_Ana.inp,p:atom_spec_Qvalue,n:tolerance_Qvalue
An option that can be set in the input file (Ens_Ana.inp) for the ensemble analysis program, "j_presto Ens_Ana".
In Qvalue analysis (native contact pair reproduction rate analysis), residue pairs that are in contact in the native structure (Native Contact Pairs, NCPs) are identified, and the proportion of these NCPs reproduced in the simulation structure is calculated to assess how closely the structure resembles the native one.
Residue pairs that are in close proximity on the amino acid sequence and are likely to be in contact even when the structure changes can artificially inflate the Qvalue, hindering accurate representation of native structure reproduction.
This option is used to exclude such adjacent residue pairs from Qvalue analysis.
For example, setting "neighbor_residue_Qvalue = 2" will exclude pairs of residues within two positions of each other on the amino acid sequence from being considered as NCPs.
>tolerance_Qvalue
@u:Ens_Ana.inp,p:neighbor_residue_Qvalue,n:tolerance_NCP
An option that can be set in the input file (Ens_Ana.inp) for the ensemble analysis program, "j_presto Ens_Ana".
This option specifies the distance threshold for judging reproduction of native contact pairs (NPCs) in the input structure.

When a topology file is provided by the "input_topology" option, if the minimum atomic distance between two residues forming an NCP is within the sum of their vdW radii plus the specified distance, the NCP is considered to be reproduced. 
The default value for this is 2.8 Å (the diameter of a water molecule) when a topology file is used.

When no topology file is provided, the vdW radii are not considered, and NCP reproduction is judged simply based on whether the minimum distance is within the specified distance, with a default of 6.0 Å.
>tolerance_NCP
@u:Ens_Ana.inp,p:tolerance_Qvalue,n:NCP_rate
An option that can be set in the input file (Ens_Ana.inp) for the ensemble analysis program, "j_presto Ens_Ana".
This option specifies the distance threshold for determining native contact pairs (NPCs) in the reference structures.

When a topology file is provided by the "input_topology" option, if the minimum atomic distance between two residues is within the sum of their vdW radii plus the specified distance, the residue pair is determined as an NCP.
The default value for this is 2.8 Å (the diameter of a water molecule) when a topology file is used.

When no topology file is provided, the vdW radii are not considered, and NCP is determined simply based on whether the minimum distance is within the specified distance, with a default of 6.0 Å.
>NCP_rate
@u:Ens_Ana.inp,p:tolerance_NCP,n:cell_boundary
An option that can be set in the input file (Ens_Ana.inp) for the ensemble analysis program, "j_presto Ens_Ana".
This option allows you to set a threshold ratio for determining NCPs (Native Contact Pairs) when multiple reference structures are used for Qvalue analysis.
Specifically, NCPs are identified in each reference structure, and an NCP is considered for inclusion if it is found in a specified percentage or more of the reference structures.
This ensures that only NCPs that are common across multiple reference structures are used, allowing for a more reliable analysis.
The default is 0.7.
>cell_bounary
@u:Ens_Ana.inp,p:NCP_rate,n:atom_spec_distribution
An option that can be set in the input file (Ens_Ana.inp) for the ensemble analysis program, "j_presto Ens_Ana".
In distribution analysis, the spatial region occupied by the group of atoms specified using the "atom_spec_distribution" option is analyzed.
The boundaries of the grid used for this analysis are specified by this option.
The cell boundary only support rectangular shapes.
The specification format is:
	cell_boundary = [xmin:xmax,ymin:ymax,zmin:zmax]
Note that no spaces are allowed within the square brackets.
>atom_spec_distribution
@u:Ens_Ana.inp,p:cell_boundary,n:distribution_cell_size
An option that can be set in the input file (Ens_Ana.inp) for the ensemble analysis program, "j_presto Ens_Ana".
In distribution analysis, the spatial region occupied by the group of atoms specified using this option is analyzed.
Refer to the "atom specifier" documentation for the specification.
>distribution_cell_size
@u:Ens_Ana.inp,p:atom_spec_distribution,n:atom_spec_contact
An option that can be set in the input file (Ens_Ana.inp) for the ensemble analysis program, "j_presto Ens_Ana".
In distribution analysis, the spatial region occupied by the group of atoms specified using the "atom_spec_distribution" option is analyzed.
The spatial range specified by the "cell_boundary" option is divided into a grid of cells, with each cell having the size specified by the "distribution_cell_size" option.
The analysis checks whether atoms are present in each cell.
While setting a smaller cell size allows for higher resolution analysis, it should be noted that this will increase the required computation time.
>atom_spec_contact
@u:Ens_Ana.inp,p:distribution_cell_size,n:tolerance_contact
An option that can be set in the input file (Ens_Ana.inp) for the ensemble analysis program, "j_presto Ens_Ana".
This option is specified as follows:
	atom_spec_contact = [atom specifier for probe group]_[atom specifier for target group]
Please connect the two atom specifiers with an underscore (_).
Refer to the "atom specifier" documentation for the specification.
It analyzes the probability of each atom in target group contacting any atom in probe atom.
>tolerance_contact
@u:Ens_Ana.inp,p:atom_spec_contact,n:measurements
An option that can be set in the input file (Ens_Ana.inp) for the ensemble analysis program, "j_presto Ens_Ana".
Contact analysis calculates the probability that the target atom group comes into contact with the probe atom group specified by "atom_spec_contact" option.
This option sets the threshold for contact detection.
If the "input_topology" option provides the van der Waals radii information of the atoms, these values are used.
If not, default radius values for each atom type are used.
If two atoms come within the sum of their radii plus the threshold specified by this option, they are considered to be in contact.
The default is 2.8 Å (diameter of water molecule).
>measurements
@u:Ens_Ana.inp,p:tolerance_contact
An option that can be set in the input file (Ens_Ana.inp) for the ensemble analysis program, "j_presto Ens_Ana".
This option is used to measure the distance, angle, and dihedral angles of the specified atoms.
Multiple metrics can be measured, and they are specified in the following format:
	measurements = [metric 1];[metric 2];[metric 3];...
Each metric should be listed separated by semicolons, and it is important to note that no spaces should be included between them.
Each metric is specified by connecting atom specifiers with an underscore(_)

If two atom specifiers (A and B) are provided in the metric, the distance between atoms A and B is measured.
	[atom_spec A]_[atom_spec B]
If three atom specifiers (A, B, and C) are provided, the angle between atoms A, B, and C is measured.
	[atom_spec A]_[atom_spec B]_[atom_spec C]
If four atom specifiers (A, B, C, and D) are provided, the dihedral angle formed by atoms A, B, C, and D is measured.
	[atom_spec A]_[atom_spec B]_[atom_spec C]_[atom_spec D]
Refer to the "atom specifier" documentation for the specification.
>PCAaxis
@u:j_presto,p:Ens_Ana,n:PCAproj
The command "j_presto PCAaxis" calculates PCA axes through diagonalization.
If you would like to know how to use the arguments, please enter them such as "PCAaxis -i"

Option list:
        PCAaxis -i : Specification of the input PCA coordinate files.
        PCAaxis -o : Specification of the output file name.
>PCAaxis -i
@u:PCAaxis,n:PCAaxis -o
How to use: j_presto PCAaxis -i INPUT [INPUT ...]

Argument for inputting PCA coordinate files (*.PCAcod).
The files can be generated by the "j_presto Ens_Ana" command.
Please refer to the "PCA_method" for the details.
This argument allows multiple files to be specified at once.
>PCAaxis -o
@u:PCAaxis,p:PCAaxis -i
How to use: j_presto PCAaxis -o OUTPUT

Specification of the output axes file name (*.axis).
If this argument is not set, the default name "test" will be used.
This means that the output files will be named test.axis.
>PCAproj
@u:j_presto,p:PCAaxis,n:distrib
The command "j_presto PCAproj" projects each conformation on the PCA axes generated by "j_presto PCAaxis" command.
If you would like to know how to use the arguments, please enter them such as "PCAproj -i"

Option list:
        PCAproj -i : Specify the input PCA coordinate files.
        PCAproj -o : Specify the output file name.
	PCAproj -a : Specify the PCA axis file.
	PCAproj -n : Specify the number of PC axes for output
>PCAproj -i
@u:PCAproj,n:PCAproj -o
How to use: j_presto PCAproj -i INPUT [INPUT ...]

Argument for inputting PCA coordinate files (*.PCAcod).
The files can be generated by the "j_presto Ens_Ana" command.
Please refer to the "PCA_method" for the details.
This argument allows multiple files to be specified at once.
>PCAproj -o
@u:PCAproj,p:PCAproj -i, n:PCAproj -a
How to use: j_presto PCAproj -o OUTPUT

Specification of the output coordinate file name on PCA space (*.proj).
If this argument is not set, the default name "test" will be used.
This means that the output files will be named test.proj.
>PCAproj -a
@u:PCAproj,p:PCAproj -o, n:PCAproj -n
How to use: j_presto PCAproj -a AXIS_FILE

Argument for specifying PC axis file (*.axis).
The file can be generated by the "j_presto PCAaxis" command.
>PCAproj -n
@u:PCAproj,p:PCAproj -a
How to use: j_presto PCAproj -n NUMBER

This argument specifies N, the number of PC axes for projection, ranging from the first (largest) to the N-th principal component.
If you set "j_presto PCAproj -n 2", the PCA space coordinates of each structure are output in the *.proj file as rows of data with N+1 columns: the first column represents the weight coefficient of the structure, the second column the coordinate on the first PCA axis, and the third column the coordinate on the second PCA axis.
>distrib
@u:j_presto,p:PCAproj,n:pick_conf
The command "j_presto distrib" analyzes input data containing one- two-, or three-dimensional variables with optional weights and sub-grouping, and generates statistical distributions or free energy landscapes.
This program is designed to analyze structural ensemble data generated from multiple MD simulations using the Trivial Trajectory Parallelization (TTP) method.
It reads the combined output of these parallel simulations and calculates the average and standard error of physical quantities for each individual run, referred to as a "sub-group".
The program can comput weighted averages and standard errors across all sub-group.
It supports various output types including raw distribution, normalized distributions, log-transformed distributions, and free energy landspaces, and allows fine control over binning, axis selection, and plotting ranges.
If you would like to know how to use the arguments, please enter them such as "distrib -i"

Option list:
	distrib -i  	: Specify input data files (required).
	distrib -o  	: Specify the name of output file. 
	distrib -f  	: Set the type of figure to output
	distrib -a  	: Choose which column(s) of the input file to use as variable(s)
	distrib -w  	: Specify the column containing weight values for each data point
	distrib -s  	: Set sub-group information for data separation
	distrib -r  	: Define plot axis range
	distrib -t  	: Set temperature for free energy calculation
	distrib -bn 	: Specify the number of bins for the histogram
	distrib -bs 	: Specify bin size for the histogram
	distrib -xnorm 	: Probability distribution is normalized along each x-axis bin individually

Various types of files will be output depending on the dimensionality (1D, 2D, or 3D) of the input data and the types of analysis performed.
The -o (output) option determines the common part (*) in the filenames like *.avg, *.dist etc.

Output files and their contents by dimensionality:
-- 1D input data
	*.avg    : Average and standart error across sub-groups for x values.
	*.count  : Number of sub-groups that contributed data to each x-bin.
	*.dist   : Distribution data on x axis. The distribution type is selected by -f (figure-type) option
	*.edist  : Distribution data on x axis for each sub-group.
-- 2D input data
	*.avg    : Average and standart error across sub-groups for y values on each x-bin.
	*.count  : Number of sub-groups that contributed data to each x bin.
	*.dist   : Distribution data on x-y plane. The distribution type is selected by -f (figure-type) option
	*.edist  : Distribution data on x-y plane for each sub-group.
	*.avgp   : Reformatted grid versions of *.avg for contour plotting using gnuplot
	*.countp : Reformatted grid versions of *.count for contour plotting using gnuplot
	*.distp  : Reformatted grid versions of *.dist for contour plotting using gnuplot
	*.edistp : Reformatted grid versions of *.edist for contour plotting using gnuplot
-- 3D input data
	*.avg    : Average and standart error across sub-groups for z values on each xy-bin.
	*.avgp   : Reformatted grid versions of *.avg for contour plotting using gnuplot

To generate these plots using Gnuplot, it is convenient to obtain the Gnuplot batch file provided by "j_presto get_tmpl gnu.plot" for 1D distribution, or "j_presto get_tmpl gnu.splot" for 2D contour map and modified it as needed for your specific purpose.
>distrib -i
@u:distrib,n:distrib -o
How to use: j_presto distrib -i INPUT [INPUT ...]

This option is used to specify input files that contain the data to be analyzed.
The files should be plain text files with numeric columns, and each file can contain multiple columns of data.
You can specify multiple files by separation them with spaces.
This option is required.

The files must be plain text, with data columns separated by tabs or spaces.
Each line corresponds to one data point.
The columns to be used for analysis (e.g. x, y, z) are selected via the -a (--axis) option.
It is not necessary for all files to have the same number of rows, but the number and structure of columns should match if used with options like -a (--axis) or -w (-weight)
>distrib -o
@u:distrib,p:distrib -i,n:distrib -f
How to use: j_presto distrib -o OUTPUT

This option sets the prefix for all output files generated by the program.
The -o (output) option determines the common part (*) in the filenames like *.avg, *.dist etc.
>distrib -f
@u:distrib,p:distrib -o,n:distrib -a
How to use: j_presto distrib -f {DIST, NORM, LOG, FEL}

This option specifies the figure type to generate.
The following options are available
	DIST : Distribution (default)
	NORM : Normalized distribution
	LOG  : Log-transformed distribution
	FEL  : Free energy landspace
>distrib -a
@u:distrib,p:distrib -o,n:distrib -w
How to use: j_presto distrib -a COL_NUM1 [COL_NUM2 [COL_NUM3]]

This option specifies which column(s) from the input data file should be used to construct the distribution.
The COL_NUM1 to COL_NUM3 should be integers.

If only COL_NUM1 is given:
	Use the specified column as x-axis (1D distribution)
If COL_NUM1 and COL_NUM2 are given:
	Use both as x and y axes (2D distribution)
If all the three (COL_NUM1, COL_NUM2, COL_NUM3) are given:
	x and y define the plane, and the z-values (from COL_NUM3) are averaged with standart error across sub-groups.
>distrib -w
@u:distrib,p:distrib -a,n:distrib -s
How to use: j_presto distrib -w COL_NUM

This option specifies the column number (integer) in the input file to be used as weights for the distribution calculation.
This is especially useful for data generated by GEPS simulations such as McMD or ALSD, where statistical weights are assigned to each sampled structure.
Users may also manually assign custom weights to each structure in the specified column.
The COL_NUM should be an integer indicating the column number in the input file.
>distrib -s
@u:distrib,p:distrib -w,n:distrib -r
How to use: j_presto distrib -s {TTPNCNF, [integer], NFILE}

This option specifies how sub-grouping of data is handled.
This is essential for computing group-wise averages and standard errors, a key feature of this program.
This option is particularly important when analyzing results from simulations parallelized using Trivial Trajectory Parallelization (TTP), where a single ensemble is explored by multiple simulation trajectories.
In such cases, this program calculates the average and standard error of physical quantities across different trajectories.
To do so, it must know which data points belong to the same trajectry.
Here, a group of data points originating from the same trajectory is referred to as a sub-group.

The argument (-s) can take one of the following forms:
	1: A filename (e.g. *.TTPncnf)
	   If your input data was generated using the "j_presto Ens_Ana" program, and a corresponding "*.TTPncnf" file was created at the same time, specifying that file as the argument to -s is the most straightforward and recommended method.
	2: An integer (e.g., 3)
	   Specifies the column number in the input file specified by -i option that contains sub-group identifiers.
	3: NFILE
	   When you give multiple input files by -i option, each input file represents a different sub-group.
	   For example, you perform the command "j_presto distrib -i file1 file2 file3 -s NFILE", the data from file1, 2, and 3 are assigned to sub-group1, 2, and 3, respectively.
>distrib -r
@u:distrib,p:distrib -s,n:distrib -t
How to use: j_presto distrib -r xmin:xmax[,ymin:ymax]

This option allows you to explicitly specify the minimum and maximum values for the x and y axes when plotting a distribution graph.

For 1-dimensional (x-axis) distribution:
	You can specify only xmin or xmax (e.g., "-r :5.0" or "-r 0.0:")
	If neither is specified, the range will be automatically determined from the input data.
For 2-dimensional (x,y plane) distribution:
	Specify the ranges for the x- and y-axes using colons and separate them with a comma (e.g., "-r 0.0:5.0,-1.0:1.0").
	x-axis: 0.0-5.0, y-axis: -1.0-1.0
If a range is not specified, it will be automatically determined based on the input data.
If min and max values are given in reverse order, the program will automatically correct them.
>distrib -t
@u:distrib,p:distrib -r,n:distrib -bn
How to use: j_presto distrib -t TEMPERATURE

This option specifies the temperature used when plotting the free energy landscape.
Since the free energy landscape is calculated based on the Boltzmann factor, the temperature affects the resulting energy values.
Here, temperature is given in Kelvin.
If not specified, the default temperature used is 300K.
>distrib -bn
@u:distrib,p:distrib -t,n:distrib -bs
How to use: j_presto distrib -bn NX[,NY]

This option allows you to specify the number of bins (for both x-axis and y-axis) when plotting a distribution.
The number of bins determines how finely the data distribution is divided.

For 1-dimensional (x-axis) distribution:
	nx is the number of bins for the x-axis.
	The default value is 50.
For 2-dimensional (x,y plane) distribution:
	nx is the number of bins for the x-axis, and ny is the number of bins for the y-axis.
	The default value is 50,50.

For example, "j_presto distrib -bn 100,150", 100 bins will be used for the x-axis and 150 bins for the y-axis.
>distrib -bs
@u:distrib,p:distrib -bn,n:distrib -xnorm
How to use: j_presto distrib -bs SX[,SY]

This option is used to specify the size (width) of each bin when plotting the graph.
If bin size is explicitly specified, the number of bins is calculated accordingly.
If not specified, the bin size is derived from the number of bins set by "-bn".
The calculated bin size is applied to the axis ranges (X and optionally Y) and used in plotting.

For 1-dimensional (x-axis) distribution:
	sx is the bin size for the x-axis.
For 2-dimensional (x,y plane) distribution:
	sx is the bin size for the x-axis, and sy is the bin size for the y-axis.
>distrib -xnorm
@u:distrib,p:distrib -bs
How to use: j_presto distrib -xnorm

When this option is specified, the probability distribution is normalized along each x-axis bin individually.

With "-xnorm", for each x-bin, the sum of probabilities along the y axis is normalized to 1.
This is useful when examining conditional distributions or local profiles for each x position.
This option is only effective when "-f" is not "DIST".
>pick_conf
@u:j_presto,p:distrib,n:ttp_se
The command "j_presto pick_conf" extracts specific structures from simulation data based on user-defined conditions.
When used together with the analysis program "j_presto Ens_Ana", it enables advanced post-processing such as ensemble filtering and event detection.

Objectives of this program
1 : Reconstruct an ensemble that satisfy specific conditions

	Example : Extract an ensemble containg structures with RMSD < 1.2 Å, or within a specific area in the PCA plane etc.

	This program outputs a "*.list" file, which is a list of structures that meet specified conditions based on Ens_Ana analysis results.
	The *.list file can be used as "input_binary_list" in Ens_Ana to re-analyze only the selected subset.
	For example, in enzyme design workflows like MSPER, it helps extract structures where the active site and ligand are in proximity.

2 : Detect the time it takes for a defined event to occur

	Example : Detect how long it takes for a protein to fold into its native structure.

	This program detects the first time point at which a specified condition is met within each trajectory.
	The results are saved as an event detection file (*.ed).
	If you want to detect the time, you have to set the argument "pick_conf -m" correctly.

3 : Rank structures that are closest to the target condition

	Example : Rank and select the top 5 structures closest to a target point on a free energy landscape.

	This program allows you to rank structures based on their proximity to the target condition and extract the top structures.
	The results are saved as "*.pick" file.
	This is useful for examining structures in the neighborhood of the condition.

Option list:
	pick_conf -i	: Input file name, column number, and reaction coordinate name (multiple allowed).
	pick_conf -o	: Prefix for output files.
	pick_conf -l 	: Input log information file from Ens_Ana.
	pick_conf -w	: Input weight file from Ens_Ana (*.weight).
	pick_conf -t	: TTPncnf file for assigning simulation ID and time.
	pick_conf -m	: Define new reaction coordinates by combining multiple reaction coordinates.
	pick_conf -pr	: Specify condition range (multiple allowed).
	pick_conf -s	: Sorting order of output (multiple allowed).
	pick_conf -n	: Number of top-ranked structures to output.
	pick_conf -e	: Specify condition for event detection (required with -l, -w, -t, -ti).
	pick_conf -ti	: Time step and initial time for event detection.

If you would like to know how to use the arguments, please enter them such as "pick_conf -l"

This program may generate the following output files:

	*.list	: When both -l and -w are specified, a list file for structures satisfying the condition defined by the -pr option is generated.
	*.ed	: When the -e option is specified, the results of event detection are output.
	*.pick	: Data related to structures that meet the condition specified by the -pr option are output.
>pick_conf -i
@u:pick_conf,n:pick_conf -o
How to use: j_presto pick_conf -i FILE_NAME1 COLUMN_NUMBER1 RC_NAME1 [FILE_NAME2 COLUMN_NUMBER2 RC_NAME2 ...]

This option is specified as a set of three elements:
	1 : Input file name
	2 : Column number to read
	3 : Name to assign to the data as a reaction coordinate.

For example, the following input:
	j_presto pick_conf -i test.rmsd 2 rmsd test.proj 2 PCA1 test.proj 3 PCA2
means that the data in column 2 of the file "test.rmsd" will be read and assigned the name "rmsd", and that columns 2 and 3 of the file "test.proj" will be read and assigned the names "PCA1" and "PCA2", respectively.

You can specify multiple such triplets.
The names assigned here (reaction coordinate names) can later be used in other arguments such as -pr, -s, or -e to define conditions.
>pick_conf -o
@u:pick_conf,p:pick_conf -i,n:pick_conf -l
How to use: j_presto pick_conf -o OUTPUT_PREFIX

This option specifies prefix for output files.
The default is "test" (i.e. The output files name as test.list, test.ed, etc...).
>pick_conf -l
@u:pick_conf,p:pick_conf -o,n:pick_conf -w
How to use: j_presto pick_conf -l LOGINFO_FILE_NAME

This option specifies the log file generated when executing "j_presto Ens_Ana".
If you wish to obtain a list (*,list) of structures that satisfy your specified conditions, this option must be provided.

If you used the execution template provided by "j_presto get_tmpl Ens_Ana.exe" command when running Ens_Ana, the log file is automatically saved as "Ens_Ana.log" by default—please specify this file.
If you did not use the template, the log is typically printed to the screen (standard output) and not saved to a file.
In such cases, use the "tee" command or similar methods to save the output to a file manually.
This log file is essential for determining the correspondence between structure numbers and the original structure files (e.g., *.cod) from which they were generated.
>pick_conf -w
@u:pick_conf,p:pick_conf -l,n:pick_conf -t
How to use: j_presto pick_conf -w WEIGHT_FILE_NAME

This option specifies the weight file (*.weight) generated when executing "j_presto Ens_Ana".
If you wish to obtain a list (*,list) of structures that satisfy your specified conditions, this option must be provided.
When this option is specified, the first and second columns of the input file are automatically assigned as reaction coordinates named "index" and "weight", respectively.
Therefore, do not specify reaction coordinates with these names using the -i option.
pick_conf -t
@u:pick_conf,p:pick_conf -w,n:pick_conf -m
How to use: j_presto pick_conf -t TTPNCNF_FILE

This option specifies the TTPncnf file, which contains information on the structure numbering and simulation frame index.
When using the -e option for event detection, this option is required.
The TTPncnf file is used to associate each structure with a simulation ID (simID) and simulation time (simtime), enabling time-based event analysis.
>pick_conf -m  
@u:pick_conf,p:pick_conf -t,n:pick_conf -pr
How to use: j_presto pick_conf -m RCNAME1:RCNAME2:[...]:[ref1,ref2,...]  

This option defines the distance from a specified reference point [ref1,ref2,...] in a multidimensional reaction coordinate (RC) space as a new reaction coordinate.  
You can specify multiple existing RC names followed by the coordinates of a reference point in square brackets.  
For example, "-m PCA1:PCA2[2,3]" defines a new RC as the Euclidean distance from the point (PCA1=2, PCA2=3) in the PCA1–PCA2 space.
In this case, the newly created RC name is "PCA1:PCA2[2,3]".
This name can be used for -pr, -s, -e options.

The newly created distance-based RC can be used in subsequent condition specifications (e.g., with the -pr option).  
Note: The reaction coordinates specified here must already be defined using the `-i` option.
>pick_conf -pr
@u:pick_conf,p:pick_conf -m,n:pick_conf -s
How to use: j_presto pick_conf -pr RC_NAME1 RANGE1 [RC_NAME2 RANGE2] ...]

This option specifies value ranges to extract data based on reaction coordinates.

Example:
	j_presto pick_conf -i test.rmsd 2 rmsd test.proj 2 PCA1 -pr rmsd 0:2 PCA1 5:
Note that you must always specify in pairs of two items for -pr options: "reaction coordinate name" and "range".
The reaction coordinate names are defined by the option "pick_conf -i".
In the above case,
	rmsd 0:2
		Use data where rmsd is between 0 and 2.
	PCA1 5:
		Use data where PCA1 is 5 or more.
Only the structures that satisfied conditions (i.e., logical AND, not OR) will be picked.
>pick_conf -s
@u:pick_conf,p:pick_conf -pr,n:pick_conf -n
How to use: j_presto pick_conf -s RC_NAME1 ORDER1 [RC_NAME2 ORDER2] ...

This option is used to sort data based on specified criteria.
You can specify pairs of reaction coordinate name and the order (a (ascending) or d (descending).
Multiple sorting criteria can be applied in sequence, and the data will be sorted accordingly.

Example 1 : Sort by a single axis
	j_presto pick_conf -i test.rmsd 2 rmsd -s rmsd a
In this example, the data is sorted in ascending order based on the rmsd value.

Example 2 : Sort by a composite axis
	j_presto pick_conf -i test.proj 2 PCA1 test.proj 3 PCA2 -m PCA1:PCA2[2,3] -s PCA1:PCA2[2,3] a
In this case, the data are sorted in order of increasing distance from the point [2,3] on the PCA1-PCA2 plane.

Example 3 : Sort by multiple criteria
	j_presto pick_conf -i test.rmsd 2 rmsd test.proj 2 PCA1 test.proj 3 PCA2 -m PCA1:PCA2[2,3] -s rmsd a PCA1:PCA2[2,3] a
In this example, the data is first sorted by rmsd in ascending order, and then by the distance from the center coordinates [2,3] on the PCA1:PCA2 plane in ascending order.
>pick_conf -n
@u:pick_conf,p:pick_conf -pr,n:pick_conf -e
How to use: j_presto pick_conf -t NUMBER

This option limits the output to the top N structures based on the ranking defined by the `-s` option.
For example, "pick_conf -n 5" will output only the top 5 structures that best satisfy the specified condition.
If not specified, all matching structures will be included in the output.
>pick_conf -e
@u:pick_conf,p:pick_conf -n,n:pick_conf -ti
How to use: j_presto pick_conf -e RCNAME1 RANGE1 [RCNAME2 RANGE2] ...

This option enables event detection from time-series data across multiple simulation runs.
To detect event by this option, you must define two reaction coordinates: "simID" (simulation run ID) and "simtime"` (simulation time).
These reaction coordinates indicate which simulation run each input data point originates from and the simulation time at which the data was obtained, respectively.
To give these two reaction coordinates, you must set -l, -w, -t, and -ti options.

Use this option to specify the event condition you wish to detect.
Examples:
- To detect when rmsd value becomes less than 1.2, use: "-e rmsd :1.2"
- To detect when the distance from the point [2,3] on the PCA1–PCA2 plane exceeds 0.9, use: "-e PCA1:PCA2[2,3] 0.9:"

If this option is specified, the results of event detection will be saved in a "*.ed" file.
>pick_conf -ti
@u:pick_conf,p:pick_conf -e
How to use: j_presto pick_conf -ti TIME_STEP INITIAL_TIME

This option defines time index information for event detection.
You must specify two values:
	TIME_STEP: time interval between data points in the simulation (e.g., 0.005)
	INITIAL_TIME: starting time of the simulation (e.g., 0)

This option is required when using the -e option for event detection.
The time values will be used to compute simtime from structure index and are essential for determining when events occur during the simulation.
>ttp_se
@u:j_presto,p:pick_conf,n:pdb_movie
The command "j_presto ttp_se" calculates weighted averages and standard errors of input data from multiple simulation runs.

How to use: j_presto ttp_se INPUT TTPNCNF [OPTIONS]
	INPUT	: Input data file.
	TTPNCNF : TTPncnf file (*.TTPncnf).

The TTPncnf file, usually generated by running the Ens_Ana program, is provided as input here.
This file is used to specify which simulation run each data point in the input data file originates from among multiple simulation runs.

Option list:
	ttp_se -w	: Input weight file (*.weight).
	ttp_se -c	: Specify a column number (integer) or a single character (e.g., DSSP code) to select input data.
	ttp_se -o	: Output file name (default is "output.txt").

If you would like to know how to use the arguments, please enter them such as "ttp_se -w"
>ttp_se -w
@u:ttp_se,n:ttp_se -c
How to use: j_presto ttp_se -w WEIGHTFILE

This option is used to define the weights of each data entry read from the input file.
The *.weight file is generated when running Ens_Ana, so please use that file as input.
If this option is not specified, all data entries are assigned a weight of 1.
>ttp_se -c
@u:ttp_se,p:ttp_se -w,n:ttp_se -o
How to use: j_presto ttp_se -c COLUMN_OR_CHAR

This option specifies which data to process from the input file and determines how the program interprets the input: as numeric data or as character data.

For character data, input a single-character string (e.g., a DSSP secondary structure code like H for alpha-helix).
The input file is expected to be a *.SS file output by the Ens_Ana program, where each line contains a string representing the secondary structure of each residue (one character per residue).
When character data is specified, the program calculates the average occurrence probability and standard error of the specified character at each residue position across all data.

For numeric data, input an integer indicating the column number of the data to use (e.g., 2 for the second column).
The program then reads numeric values from that column and calculates their weighted average and standard error.

If the argument is neither a single character nor an integer, or if multiple characters are given, the program will raise an error.
>ttp_se -o
@u:ttp_se,p:ttp_se -c
How to use: j_presto ttp_se -o OUTPUT

This option specifies output file name.
If you do not set this option, the result is output as "output.txt".
>pdb_movie
@u:j_presto,n:pdb_movie -o
The command "j_presto pdb_movie" combines multiple single-structure PDB or PDB.GZ files from a specified directory into a single multi-model PDB file.
This multi-model PDB can then be loaded into molecular visualization software such as PyMOL to display the structures sequentially as an animation or trajectory.
Each input file is treated as one model and wrapped between MODEL and ENDMDL records.
The input files are sorted by their filenames using natural sorting, supporting both plain and gzip-compressed (.pdb.gz) files.
Additionally, the original filename is included as a REMARK in each model for traceability.

How to use: j_presto pdb_movie INPUT_DIR [options]

The INPUT_DIR specifies the directory containing the input PDB or PDB.GZ files.
All matching files are combined in natural sorted order into one output PDB file.

Option list:
        pdb_movie -o	: Specify the output filename for the combined multi-model PDB file.
			  The default output filename is "movie.pdb".
        pdb_movie -p	: Specify a glob pattern to select input files within the directory.
			  The default pattern is "*.pdb", and corresponding "*.pdb.gz" files are also included automatically.

If you would like to know how to use the arguments, please enter them such as "pdb_movie -o".
>pdb_movie -o
@u:pdb_movie,n:pdb_movie -p
How to use: j_presto pdb_movie -o OUTPUT

This option specifies the filename of the combined output multi-model PDB file.
If not specified, the default output filename is "movie.pdb".
>pdb_movie -p
@u:pdb_movie,p:pdb_movie -o
How to use: j_presto pdb_movie -p PATTERN

This option specifies a glob pattern to filter input files within the input directory.
For example, to combine only files starting with "frame_" and ending with ".pdb", specify:
        j_presto pdb_movie -p "frame_*.pdb"

Both matching plain and gzip-compressed files (.pdb and .pdb.gz) with the given pattern prefix will be included.
If this option is omitted, the default pattern "*.pdb" is used.
>MSPER
@u:j_presto,p:pdb_movie,n:conmut
The command "j_presto MSPER" performs MPSER (Mutation site prediction method for enhancing regioselectivity of substrate reaction site) analysis to improve the selectivity of enzymatic reactions.
MPSER takes as input both "desiable" complex structures that can lead to the desired product and "undesiable" ones that may lead to undesired byproducts.
The concept of MPSER is that the amino acid residues of the enzyme in contact with the substrate are important for stabilizing the complex structure, and substituting these residues tends to destabilize the complex.
Based on this principle, MPSER predicts mutation sites that can suppress the formation of byproducts while maintaining the production of the desired product.
Specifically, it calculates the contact ratio between the substrate and the enzyme within various complex structures, and identifies residues that show low contact in desiable complexes and high contact in undesiable ones.
These residues are then proposed as mutation sites to enhance the selectivity of the enzymatic reaction.

How to use : j_presto MSPER [OPTIONS]

Option list:
	MSPER -d	: A PDB file including enzyme contact rates with substrates for desirable ensemble.
	MSPER -u	: A PDB file including enzyme contact rates with substrates for undesirable ensemble.
	MSPER -o	: Prefix for the output files. The default is "MSPER".
	MSPER -e	: Residue numbers for excluding from the MSPER ranking list (e.g. active sites, substrate etc.).
	MSPER -a	: Adjust residue numbers in *.list and *.scr files by this shift value (default: 0)
	MSPER -s	: Specify *.scr files to create an integrated ranking by averaging ranks from these files. When used, only the integrated ranking is output, and the regular MSPER scoring is skipped.

If you would like to know how to use the arguments, please enter them such as "MSPER -d"

When the MSPER program is executed, it generates the following output files (where * is the prefix specified by the -o option):
	*.scr
		An output file containing MSPER score.
	*.list
		An MSPER ranking list.
	*.pdb
		A PDB file with the difference in contact rates (undesirable − desirable) recorded in the B-factor column.
>MSPER -d
@u:MSPER,n:MSPER -u
How to use: j_presto MSPER -u DESIRABLE

This option specifies a PDB file including enzyme contact rates with substrates for desirable ensemble.
This PDB file is assumed to be the output from the contact analysis of "j_presto Ens_Ana", where the contact rates are recorded in the b-factor column.
Please refer to the "tutorial MSPER" for instructions on how to prepare this file.
>MSPER -u
@u:MSPER,p:MSPER -d,n:MSPER -o
How to use: j_presto MSPER -u DESIRABLE

This option specifies a PDB file including enzyme contact rates with substrates for undesirable ensemble.
This PDB file is assumed to be the output from the contact analysis of "j_presto Ens_Ana", where the contact rates are recorded in the b-factor column.
Please refer to the "tutorial MSPER" for instructions on how to prepare this file.
>MSPER -o
@u:MSPER,p:MSPER -u,n:MSPER -e
How to use: j_presto MSPER -o PREFIX

This option sets the prefix for the output files.
If not specified, the default prefix is "MSPER".
>MSPER -e
@u:MSPER,p:MSPER -o,n:MSPER -a
How to use: j_presto MSPER -e EXCLUDE_RESIDUES

This option specifies residue numbers to exclude from the MSPER ranking list in advance (e.g., active sites, substrate, etc.).
You can specify multiple residues.
For example, to exclude residues 31, 32, 33, and 35, use "-e 31:33 35".
>MSPER -a
@u:MSPER,p:MSPER -e,n:MSPER -s
How to use: j_presto MSPER -a ADJUST_RESNUM

This option adjusts residue numbers in the output *.list and *.scr files by the specified integer shift value.
The default value is 0 (no adjustment).
>MSPER -s
@u:MSPER,p:MSPER -a
How to use: j_presto MSPER -s SCR_FILES1 SCR_FILES2 [SCR_FILES3 ...]

Specify *.scr files to generate an integrated ranking by averaging the ranks from these files.
When this option is used, only the integrated ranking is output and the normal MSPER scoring calculation is skipped.
>conmut
@u:j_presto,p:MSPER,n:get_tmpl
The command "j_presto conmut" utilizes an external tool, blastp, to collect homologous protein sequences with high similarity to a given query amino acid sequence.
These sequences are then aligned using a multiple sequence alignment tool, such as MAFFT or ClustalW, to generate a consensus sequence.
A consensus sequence represents the most common amino acid found at each position among the aligned sequences, and reflects evolutionarily conserved residues that are often important for structural stability or function.

By comparing the query sequence to the consensus sequence, the program identifies positions where the query differs from the consensus.
It then proposes amino acid substitutions that replace the original residues in the query with those found in the consensus.
These substitutions are expected to improve the stability of the protein—particularly its thermostability—by introducing more conserved and potentially more structurally favorable amino acids.

How to use: j_presto conmut QUERY [OPTIONS]
        QUERY   : Query amino acid sequence in FASTA format.

Option list:
        conmut -e        : Email address (required for web BLAST).  
        conmut -l        : Use local BLAST instead of web BLAST.  
        conmut -d        : Specify path to local BLAST database (default: "nr").  
        conmut -b        : E-value threshold for BLAST search (default: 1e-5).  
        conmut -m        : Maximum number of target sequences for BLAST (default: 1000).  
        conmut -i        : Minimum identity threshold (default: 0.9 = 90%).  
        conmut -c        : Minimum coverage threshold (default: 0.9 = 90%).  
        conmut -H        : Input homologous sequences in FASTA format (skip BLAST).  
        conmut -a        : Multiple sequence aligner to use ("mafft" or "clustalw", default: "mafft").  
        conmut -s        : Residue number to start counting from (default: 1).  
        conmut -o        : Prefix for output files (default: "result").  

If you would like to know how to use the arguments, please enter them such as "conmut -e"

When the conmut program is executed, it generates the following output files (where * is the prefix specified by the -o option):
	*_all.fasta
		A FASTA file containing all sequences retrieved by the BLAST search.
	*_flt.fasta
		A FASTA file of sequences filtered based on the identity_threshold and coverage_threshold criteria.
	*_res.fasta
		A FASTA file containing representative sequences selected from each species.
	*_aln.fasta
		The result of multiple sequence alignment (MSA), showing aligned sequences.
	*_consensus.fasta
		The consensus sequence derived from the aligned sequences.
	*_aln_view.txt
		A formatted, human-readable view of the MSA results.
	*_suggested_mutations.txt
		A list of mutations suggested based on the consensus sequence method.
>conmut -e  
@u:conmut,n:conmut -l  
How to use: j_presto conmut -e EMAIL

This option specifies the email address required for using the web-based BLAST (NCBI BLAST).
NCBI mandates an email address to identify users when accessing their BLAST services.  
You must use this option unless you are running BLAST locally (i.e., when "-l" is not specified).
If no email is provided and the program attempts to use web BLAST, it will terminate with an error.
>conmut -l  
@u:conmut -e,p:conmut -e,n:conmut -d  
How to use: j_presto conmut -l

This option enables the use of local BLAST instead of NCBI web-based BLAST.
When this flag is specified, the program uses the "blastp" command installed on your local machine to search for homologous sequences.  
This is useful in environments without internet access, or when you want to speed up processing using a pre-downloaded local database.

If you use this option, make sure:
	- "blastp" is properly installed and accessible from your command line
	- A valid local BLAST database is available (use the "-d" option to specify its path)
>conmut -d  
@u:conmut,p:conmut -l,n:conmut -b  
How to use: conmut -d DB_PATH

This option specifies the path to the local BLAST database when using the "-l" option for local BLAST execution (default: "nr").
If you are running BLAST locally (with "-l"), this option tells the program where to find your pre-formatted BLAST database.
The database must be formatted with "makeblastdb" and compatible with "blastp".
>conmut -b  
@u:conmut,p:conmut -d,n:conmut -m
How to use: j_presto conmut -b EVALUE

This option sets the E-value threshold for BLAST searches (default: 1e-5).
The E-value (expectation value) specifies the maximum number of hits expected by chance when searching a database of a particular size.  
Lower values make the search more stringent, returning only high-confidence homologs.
	- A smaller E-value (e.g., `1e-10`) yields more reliable hits, but may return fewer sequences.
	- A larger E-value (e.g., `1e-2`) allows more matches but may include unrelated sequences.

This option applies to both web-based and local BLAST runs.
>conmut -m  
@u:conmut -b,n:conmut -i  
How to use: j_presto conmut -m MAX_TARGET_SEQS

This option sets the maximum number of target sequences to retain from the BLAST search results (default: `1000`).
By specifying this value, you control how many homologous sequences are retrieved and used in downstream processing, such as filtering and multiple sequence alignment.
	- Setting a smaller number (e.g., `100`) can reduce runtime and focus analysis on the most relevant sequences.
	- Setting a larger number (e.g., `5000`) increases coverage but may result in longer processing time and memory usage.
This option is relevant for both web-based and local BLAST searches.
>conmut -i  
@u:conmut,p:conmut -m,n:conmut -c
How to use: j_presto conmut -i IDENTITY_THRESHOLD

This option sets the minimum sequence identity threshold for filtering BLAST hits (default: `0.9`, i.e., 90%).
After retrieving homologous sequences via BLAST, the program filters them by calculating pairwise sequence identity with the query.
Only sequences with an identity greater than or equal to this threshold are retained.
	- Input value should be a float between 0 and 1, representing the identity ratio.
	- Lowering this value includes more divergent sequences, potentially increasing diversity but reducing confidence.
	- Increasing this value tightens similarity, which may improve reliability but reduce coverage.
This filtering is performed after BLAST search but before multiple sequence alignment and consensus sequence generation.
>conmut -c  
@u:conmut,p:conmut -i,n:conmut -H
How to use: j_presto conmut -c COVERAGE_THRESHOLD

This option sets the minimum coverage threshold for filtering BLAST hits (default: `0.9`, i.e., 90%).
Coverage is calculated as the ratio of the aligned region length to the full length of the query sequence.
Only sequences with a coverage greater than or equal to this threshold are retained for further analysis.
	- Input value should be a float between 0 and 1, representing the required fraction of coverage.
	- A higher value ensures the homologs align with most of the query, which is important for reliable consensus prediction.
	- Lowering the threshold may allow inclusion of partial sequences, which could reduce the quality of the alignment and consensus.
This filtering is performed after BLAST search but before multiple sequence alignment and consensus sequence generation.
>conmut -H  
@u:conmut -c,p:conmut -c,n:conmut -a  
How to use: j_presto conmut -H HOMOLOGS_FASTA

This option allows you to directly provide a FASTA file containing homologous sequences, instead of running a BLAST search.
Use this option if you have already prepared a set of homologous sequences (e.g., from a previous search or curated database) and want to skip the BLAST step.
	- Input file must be in FASTA format.
	- When this option is used, BLAST (both web and local) is completely skipped, and only the provided sequences are used for alignment and consensus calculation.
>conmut -a  
@u:conmut,p:conmut -H,n:conmut -s  
How to use: j_presto conmut -a {mafft|clustalw}

This option specifies the multiple sequence alignment (MSA) tool to use for aligning homologous sequences.

Available choices:
	mafft (default)
	clustalw
Notes:
The chosen aligner must be installed on your system beforehand and accessible via your system’s PATH environment variable.
>conmut -s  
@u:commut,p:conmut -a,n:conmut -o  
How to use: j_presto conmut -s START_RESIDUE_NUMBER

This option sets the starting residue number for counting residues in output files.
	- Default is 1.
	- Useful when your query sequence numbering starts from a different residue number, allowing the output files to reflect the correct residue numbering according to your reference.
>conmut -o  
@u:conmut,p:conmut -s
How to use: j_presto conmut -o OUTPUT_PREFIX

This option specifies the prefix for output files generated by the program.
	- Default prefix is "result".
	- All output files will be named using this prefix followed by specific suffixes.  
>get_tmpl
@u:j_presto,p:conmut,n:genlist
This command is used to obtain the input file or the script templates necessary for executing j_presto (get template).
The usage is as follows:
	j_presto get_tmpl [file name to retrieve]
The list of files that can be obtained is as follows:
	gen_db             : Script for generating parameter database files (*.tpldb) for j_presto.
	prep               : Script for preparing the necessary files for MD simulations and energy minimization (*.pdb, *.tpl, *.shk).
	min.inp            : Input file for performing an energy minimization calculation.
	md.inp             : Input file for performing a single MD simulation.
	CAPbound.inp       : Input file to perform calculations with CAP boundary.
	psr.inp            : Input file to restrain position of atoms.
	dsr.inp            : Input file to restrain distances between atoms.
	dhr.inp            : Input file to restrain dihedral angles.
	md_run             : Script for running a single MD simulation or energy minimization.
	batch_set.inp      : Input file for batch_set to prepare input files for multiple MD simulations in bulk, used to specify the MD schedule.
	batch_set_ALSD.inp : Input file for batch_set to prepare input files for ALSD simulations in bulk, used to specify the MD schedule.
	md_multi           : Script for running multiple MD simulations as a single MPI job.
Additionally, to retrieve all of these files at once, you can use "j_presto get_tmpl all".
>genlist
@u:j_presto,p:get_tmpl,n:manual
The command "j_presto genlist" generates a list of file paths based on a flexible path pattern, with optional data ranges and control over continuation markers.
This can be used for specifying input files in MD simulations or analysis pipelines.
The PATTERN argument accepts a directory/filename format with embedded index specifications.
The "->" symbol is used to indicate continuation between file groups unless suppressed with the "-na" flag.
The "->" symbol indicates that a file is continuously connected in time to the next file in the list (except for the last file in a sequence).
This is essential when a single long simulation is split into multiple segments due to limitations such as computational resources.
By including this marker, the user can explicitly declare temporal continuity, which is important for tools such as Ens_Ana or GEprep to correctly interpret the number and structure of trajectories, especially in parallel exploration with trivial trajectory parallelization (TTP).

How to use: j_presto genlist PATTERN [OPTIONS]

PATTERN defines the structure of file paths with index ranges.
Use #start:end to expand indices.
	Example: 	j_presto genlist ../md#0:2/n#1:2/md.cod
This expands to all combinations:
	../md0/n1/md.cod
	../md1/n1/md.cod
	../md2/n1/md.cod
	../md0/n2/md.cod
	...

Option list:
        genlist -r	: Specify the data range as "start:end".
        genlist -na	: Disable "->" symbols
	genlist -o	: Specify the output file name (default: "file.list")

If you want detailed usage of each argument, please enter, for example, "genlist -r".

For example, if you execute "j_presto genlist ../md#0:1/n#1:2/md.cod -r 1:100 -o file.list, produces "file.list" with content like:
	../md0/n1/md.cod
	1 100 ->
	../md1/n1/md.cod
	1 100
	../md0/n2/md.cod
	1 100 ->
	../md1/n2/md.cod
	1 100

This file list can be used with tools such as:
	Ens_Ana (for "input_binary_list" option)
	GEprep (for "CODLST" option)
	and other programs that consume structured file path lists.
>genlist -r
@u:j_presto,n:genlist -na
How to use: j_presto genlist -r START:END

Add a numeric data range after each file path.
Format must be "START:END", both integers.
This can represent, for example, a frame range in MD simulation data.
>genlist -na
@u:j_presto,p:genlist -r,n:genlist -o
How to use: j_presto genlist -na

Disables the "->" mark after data range lines.
Useful when continuation markers are not required in output files.
>genlist -o
@u:j_presto,p:genlist -na
How to use: j_presto genlist -o OUTPUT_FILE

Specify the output file name.
If omitted, default is "file.list".
>manual
@u:j_presto,p:genlist
The command "j_presto manual" is the command you are currently using.
It provides an interactive explanation of commands and options available in j_presto.
>atom specifier
In the j_presto program, atom groups can sometimes be specified using "atom specifier".
The atom specifier is provided as a sequence of characters without spaces, represented by combinations of "atom specification blocks" and "block concatenation operators".
There are two types of atom specifier blocks: (1) specification by name or ID, and (2) specification by coordinate range.

(1) specification by name or ID
As shown below, atoms can be selected based on their atomic IDs.
	14		: An atom with atomic ID 14
	1<20		: Atoms with atomic IDs from 1 to 20
	10<30,40<50	: Atoms with atomic IDs from 10 to 30 and from 40 to 50

Additionally, atoms can be specified by their names as shown below.
	CA		: All "CA" atoms
	N,CA,C,O	: Main chain atoms of proteins
	C*		: All carbon atoms (atoms starting with the letter "C")
	!H*,h*		: All atoms except hydrogen (atoms that do not start with "H" or "h")
In atom specifiers, as shown in the third example, atom names can be specified using the wildcard "*".
However, note that the wildcard can only be used at the end of the name.
For example, specifying "*H" is not allowed.
Additionally, by placing "!" at the beginning of each atom specifier block, as shown in the fourth example, negation of conditions can be performed.

By specifying as shown below, you can also select residues.
	1<20:CA		: CA atoms of residues 1 to 20
	LYS,ARG:*	: All atoms of "LYS" and "ARG" residues
	WAT:O		: All oxygen atoms of water molecules
	!ALA:*		: All atoms except those of "ALA" residue

Furthermore, selection by chains can be made as shown below.
	1:*:*		: All atoms of the first chain
	A,B:ARG:CA	: CA atoms of the "ARG" residue in chains "A" and "B"

(2) specification by coordinate range
Atoms can be specified based on a range of coordinates as shown below.
	[-5.0<5.0:2<:<-3]	: All atoms with x coordinates between -5.0 and 5.0, y greater than or equal to 2, and z less than or equal to -3
	[-2<-1,1<2::]		: All atoms with x coordinates between -2 and -1 or between 1 and 2

Each block can be concatenated using "block concatenation operators (&, |)"
"A&B" means A and B, while "A|B" is A or B.
	!H*,h*&[:5<:]		: All atoms that are not hydrogen and have a y-coordinate greater than or equal to 5
	1<5:CA|11<20:N		: Either "CA" atoms of residues 1 to 5 or "N" atoms of residues 11 to 20
Atom specifiers are resolved from left to right.
If you want to prioritize a certain part, you can enclose it in parentheses, which allows you to specify the order of resolution, similar to how arithmetic operations are handled.
	ARG:*|1<15:*&!H*,h*	: Non hydrogen atoms that belong to residue "ARG" or residues 1 to 15
	ARG:*|(1<15:*&!H*,h*)	: All atoms of residue "ARG" and non-hydrogen atoms of residue 1 to 15

>tutorial
If you want to check the details of the tutorial, type the item number like "tutorial install".

Preparation for j_presto program
	tutorial install :
		1 : Download AMBERtools
		2 : Download j_presto repository
		3 : Install j_presto

For those working with specialized simulations, such as non-standard molecules; others can ignore.
	tutorial prep_extra 1 : Fix inconsistencies between atom and residue names in the prep and PDB files.

Execution of MD simulation
	tutorial MD 1   : Create a topology database file (*.tpldb) with "j_presto gen_db"
	tutorial MD 2   : Prepare input files for MD simulation with "j_presto prep"
	tutorial MD 3   : Execute energy minimization calculations with "j_presto md_run min.inp"
	tutorial MD 4-1 : Execute a single MD simulation with "j_presto md_run md.inp"
	tutorial MD 4-2 : Execute multiple MD simulations as a single MPI job with "j_presto_mpi" or "j_presto_master"

Execution of various ensemble analysis
	Please refer to "Ens_Ana".

Execution of Principal Component Analysis (PCA) 
	tutorial PCA 1 : Generate a PCA coordinate file using "j_presto Ens_Ana".
	tutorial PCA 2 : Compute the PCA axes using "j_presto PCAaxis" and project the structures using "j_presto PCAproj".
	tutorial PCA 3 : Create the distribution or free energy landscape from the projected data using "j_presto distrib".

Execution of MSPER
	tutorial MSPER : Predict mutation sites to enhance the selectivity of enzymes.
>tutorial install
@u:tutorial
1 : Download AMBERtools  ***************************

To create simulation parameter files for j_presto, a database provided by AMBERtools is required.
AMBERtools is an external program provided by the AMBER project at the University of California, San Diego (UCSD) in the United States, and the developers of j_presto do not hold its copyright.
Users are responsible for downloading it at their own risk.
	1 : Access the AMBERtools webpage (https://ambermd.org/AmberTools.php).
	2 : Click the "Download AmberTools" link
	3 : Read the description on the linked page carefully and download AmberTools using your preferred method.
	4 : Extract the downloaded file (AmberTools***.tar.bz2, where *** is the version number) and copy the directory containing the parameter files (leaprc, dat, lib, frcmod, prep files) to a location of your choice.
	    For example, in the case of AmberTools24, these files are stored inside the amber24_src/dat/leap directory.
	5 : If you are using bash, add the line 
		export J_PRESTO_AMBER_DATABASE_PATH="[the path where you placed the db directory]"
	    to your .bashrc or .bash_profile file, and then run
		source .bashrc (if you added it to the .bashrc file)
	    to set the path to the AMBER database directory.

2 : Download j_presto repository ******************

	1 : Access the GitHub Repository:
		Open your web browser and navigate to the j_presto GitHub repository page.
	2 : Clone or Download the Repository:
		To clone the repository, click on the green "Code" button located on the right side of the page.
		Copy the URL provided in the dropdown menu.
		Open your terminal and enter the following command:
			git clone [copied URL]
		Alternatively, you can choose to download the repository as a ZIP file.
		Click the "Code" button, then select "Download ZIP".
		This will download the repository contents as a compressed file to your local machine.
		Extract the Files.

3 : Install j_presto ******************************

	1 : The j_presto program is written in Fortran and Python3.
	    Before installing the program, please ensure that you have installed the following three components:
		1 : Intel Fortran (ifort) or gfortran
		2 : python3
		3 : f2py, which is required to compile Fortran subroutines into Python modules.
	2 : Navigate into the downloaded j_presto directory and execute the installation script named "setup.sh" as follows:
		./setup.sh
	3 : The setup.sh script first checks whether the necessary Python modules for installation are present.
	    If any modules are missing, their names will be displayed, and the installation of j_presto will be aborted.
	    In this case, please install the missing Python modules with "pip" command or similar, and then run setup.sh again.
	    !! CAUTION !!
	    Even when the Python modules are installed, if their versions are outdated, it can cause Python errors and lead to abnormal termination of the j_presto program.
	    In such cases, it is recommended to check the error messages and update the relevant Python modules to their latest versions.
	4 : When you run setup.sh, you will be prompted to specify two things: the location to store the j_presto executable files, and the Fortran compiler to use.
	    For the first, choose an appropriate directory (the default is ~/local/bin/), and for the latter, select either ifort or gfortran (the default is ifort).
	5 : Finally, if you are using bash, add the path where you saved the j_presto directry including executable files to your .bashrc or .bash_profile file as follows:
		export J_PRESTO_PATH="[the path where you placed the J_PRESTO directory]"
	   and please add J_PRESTO_PATH to your PATH as shown below:
		export PATH="$PATH:$J_PRESTO_PATH"
	   After that, run
		source .bashrc (if you added it to the .bashrc file)
	   to set the directory containing the j_presto executables to your system's path.
>tutorial prep_extra 1
@u:tutorial
Fixing Inconsistencies Between Atom and Residue Names in Prep and PDB Files.

Note: This term is only necessary when you need to prepare your own parameters as prep files.
If you are working with standard amino acids or nucleic acids, or if you're using pre-prepared parameter files, you can skip this section.

For simulations involving specialized amino acids or ligand small molecules etc., it may be necessary to prepare custom prep files.
These files are often created using external programs like Gaussian.
However, during this preparation process, the atom names assigned in the original PDB file may change, resulting in discrepancies between the PDB and prep files.

Manually matching the atom names in both files can be time-consuming and error-prone.
To automate this process, "j_presto nt_gen" command generates a table of corresponding atom names, and "j_presto nt_conv" command uses this table to perform the necessary conversions, ensuring consistency between the files.

Steps:
	1 : Use "j_presto nt_gen" to create a table of atom name correspondences.
	2 : Use "j_presto nt_conv" to apply the conversions based on the generated table, ensuring that the atom names in your PDB and prep files match correctly.

Please refer to the respective terms for detailed usage of "nt_gen" and "nt_conv".
>tutorial MD 1
@u:tutorial,n:tutorial MD 2
Create a topology database file (*.tpldb) with "j_presto gen_db"

To run simulations with j_presto, you first need to create a database file (*.tpldb) that includes the parameters for the proteins, nucleic acids, glycans, lipids, or small molecule ligands you wish to use in the calculations.
These files require input from the AMBERtools database (see tutorial 1).
If the AMBER database path (J_PRESTO_AMBER_DATABASE_PATH) is correctly set, you can specify just the names of the parameter files (dat, prep, lib, frcmod, leaprc files) without needing to specify their absolute or relative paths.

If you want to simulate molecules that are not included in the AMBER database, you can create parameters using quantum chemistry programs such as Gaussian or GAMESS, and translate the file to AMBER-compatible parameter files using the Antechamber program included in AMBERtools.
The files you create (prep, frcmod files) can be incorporated into the j_presto topology database file by running
	j_presto gen_db -i [created file path]
This allows you to use these custom parameters in j_presto simulations.

For instructions on how to use the gen_db command, please refer to the help section (j_prest gen_db -h) or ask for details in this manual by typing "gen_db".
If you're using j_presto gen_db for the first time, you can obtain a script template for executing gen_db by running
	j_presto get_tmpl gen_db
Adjust this template according to your settings to easily execute the command.
Once you have completed this task, please proceed to "tutorial MD 2".
>tutorial MD 2
@u:tutorial,p:tutorial MD 1,n:tutorial MD 3
Prepare input files for MD simulation with "j_presto prep"

To execute a simulation with j_presto, you will need the topology database file (.tpldb) created in the tutorial 4 and a PDB file including coordinate data of your target system.
The command "j_presto prep" uses these two files to perform the pre-setup for the simulation system and generates the coordinate information file (.pdb), topology file (.tpl), and, if applicable, the SHAKE constraint file (.shk).
These files can then be used as input for executing the simulation with "j_presto md_run".

For instructions on how to use the prep command, please refer to the help section (j_prest prep -h) or ask for details in this manual by typing "prep".
If you're using j_presto prep for the first time, you can obtain a script template for executing prep by running
        j_presto get_tmpl prep
Adjust this template according to your settings to easily execute the command.
Once you have completed this task, please proceed to "tutorial MD 3".
>tutorial MD 3
@u:tutorial,p:tutorial MD 2,n:tutorial MD 4-1
Execute energy minimization calculations with "j_presto md_run min.inp"

After preparing the necessary files with "j_presto prep", before starting the MD simulation, you should first perform an energy minimization calculation to resolve any atomic clashes or structural distortions in the initial structure provided by the PDB file.
To run this calculation, you need to prepare an input file (min.inp) with the necessary settings and execute it by running
	j_presto md_run min.inp
You can obtain a template for this min.inp file using
	j_presto get_tmpl min.inp
Feel free to modify the settings in this file to your preferences and execute it.
For options you can configure in min.inp, launch the manual with "j_presto manual" and refer to the section on "min.inp".
Additionally, you can also get a template for the minimization calculation execution script with
	j_presto get_tmpl md_run
, which might serve as a helpful reference.

If necessary, you will need to prepare several additional input files.
For example, a configuration file for introducing CAP boundaries (CAPbound.inp), a reference structure PDB file for applying position restraints, a position restraint input file (psr.inp), a distance restraint input file (dsr.inp), and a dihedral restraint input file (dhr.inp).
You can obtain templates for each of these files using
	j_presto get_tmpl [desired file name]
For the settings that can be configured in each file, please refer to "j_presto manual" and ask about the specific items.

If you have set the "OCOORD" option in the "EXE > OUTPUT" block of min.inp, you will be able to obtain the structural information after energy minimization as a PDB file.
This file will be used as the initial structure for the subsequent MD simulation.

After completing this task, proceed to "tutorial MD 4-1" if you want to run a single MD simulation.
If you wish to run multiple MD simulations as a MPI job, move on to "tutorial MD 4-2".
>tutorial MD 4-1
@u:tutorial,p:tutorial MD 3,n:tutorial MD 4-2
Execute a single MD simulation with "j_presto md_run md.inp"

Once you have minimized the energy of the input structure, you can start the MD simulation.
This calculation can be executed with
	j_presto md_run md.inp
You can obtain a template for the input file (md.inp) by using
	j_presto get_tmpl md.inp"
so please set the options in this file to your preferences and execute it.
For options that can be used in md.inp, refer to "j_presto manual" and ask about md.inp.
You can also obtain a template for the execution script with "j_presto get_tmpl md_run", which you can utilize as needed.

If necessary, you will need to prepare several additional input files.
For example, a configuration file for introducing CAP boundaries (CAPbound.inp), a reference structure PDB file for applying position restraints, a position restraint input file (psr.inp), a distance restraint input file (dsr.inp), and a dihedral restraint input file (dhr.inp).
You can obtain templates for each of these files using
        j_presto get_tmpl [desired file name]
For the settings that can be configured in each file, please refer to "j_presto manual" and ask about the specific items.

If you have set the "NAMECO" option in the "EXE > MD" block of md.inp, you will be able to output the structural coordinates during the MD simulation.
This file will be used for the subsequent analyses.
>tutorial MD 4-2
@u:tutorial,p:tutorial MD 4-1
Execusion multiple MD simulations as a single MPI job with "j_presto_mpi" or "j_presto_master"

When you execute a single MD simulation run, you prepare an input file (md.inp) describing the desired settings, and then execute the calculation with "j_presto md_run md.inp".
However, in practical operations, you may need to run multiple MD simulations simultaneously with different initial velocities, or in McMD or ALSD simulations, repeatedly execute numerous MD runs for conformational sampling.
Preparing input files and executing for each of these runs is a very labor-intensive task.
In j_presto, bundle programs, "j_presto_mpi" or "j_presto_master", is provided to execute multiple MD runs collectively as a single MPI job, and the "j_presto batch_set" is responsible for automatically preparing the input files and execution scripts necessary for these runs.

Please refer to the "j_presto manual" for instructions on preparing the input files required for "j_presto batch_set" and on how to execute it, and ask about "batch_set".
>tutorial PCA 1
@u:tutorial,n:tutorial PCA 2
Generate a PCA coordinate file using "j_presto Ens_Ana".

To perform PCA using j_presto, you must generate a "*.PCAcod" file containing the coordinate data of each structure obtained from the simulations.
This file is created by executing the "j_presto Ens_Ana" command.
This program supports two main types of coordinate representations for structural ensembles:
	1 : Cartesian Coordinates
	2 : Internal Coordinates Based on Inter-Residue Distances

1 : Cartesian Coordinates
	Cartesian coordinates use the absolute atomic positions directly for PCA.
	This method is suited for analyzing structural ensembles that fluctuate around the native conformation, such as those obtained from conventional isothermal simulations.
	However, it may not be appropriate for simulation ensembles that promote large conformational changes, such as McMD or ALSD.
	In such cases, we recommend using the internal coordinate-based PCA described below.

	To generate a PCAcod file using Cartesian coordinates, set the "PCA_method" option to "cord" and specify a suitable value for "atom_spec_PCA" in the Ens_Ana.inp (input file for Ens_Ana execution).
	Note that in Cartesian coordinate-based PCA, even identical structures will be treated as different if they are translated or rotated.
	To avoid this, it is common practice to set the "atom_spec_RMSD" option to align structures to a reference structure during PCA preparation.

2 : Internal Coordinates Based on Inter-Residue Distances
	This method is suitable for analyzing diverse ensembles that include both native-like and unfolded structures.
	With internal coordinates, identical conformations remain invariant under translation and rotation, providing a more robust representation for PCA.

	To generate a PCAcod file using internal coordinates, configure the following options in the Ens_Ana.inp file:
		1 : PCA_method
		2 : atom_spec_PCA
		3 : neighbor_residue_PCA
		4 : tolerance_PCA
	Then, run the "j_presto Ens_Ana" command.

For details on how to run Ens_Ana, refer to the "Ens_Ana" term.
For available options, see the "Ens_Ana.inp" term.
>tutorial PCA 2
@u:tutorial,p:tutorial PCA 1,n:tutorial PCA 3
Compute the PCA axes and project the structures.
Next, load the generated *.PCAcod file and perform PCA to compute the principal component axes, which are then written to an "*.axis" file using the "j_presto PCAaxis" command.
For details on how to use this command, refer to the "PCAaxis" term.

Afterward, each structure described in the *.PCAcod file is projected into the space defined by the principal component axes in the *.axis file using the "j_presto PCAproj" command.
Please refer to the "PCAproj" term for instructions on how to use this command.
>tutorial PCA 3
@u:tutorial,p:tutorial PCA 2
Create the distribution or free energy landscape from the projected data.

The "*.proj" file, which contains the coordinates of structures projected onto the principal component space and is generated by the "j_presto PCAproj" command, is used as input to the "j_presto distrib" command to generate distribution or free energy landscape data (*.dist or *.distp) for plotting.
The "distrib" program calculates spatial distributions in either one dimension (x-axis) or two dimensions (x–y plane).
You must specify which dimensions of the coordinate data in the *.proj file to use for plotting via the "distrib -a" option.

Note that in the *.proj file, each row corresponds to one structure and the first column contains the weight factor for that structure, while the second and subsequent columns contain coordinate data.
For more details on the file format, refer to "PCAproj -n".

The "j_presto distrib" command outputs a "*.dist" file for 1D analysis and a "*.distp" file for 2D analysis.
These output files can be visualized as distribution plots or free energy landscapes using external programs "gnuplot".

To assist with plotting using gnuplot, template batch scripts can be obtained with "j_presto get_tmpl gnu.plot" (for 1D) or "j_presto get_tmpl gnu.splot" (for 2D), which can then be modified as needed for your visualization.
>tutorial MSPER
@u:tutorial
MPSER (Mutation site prediction method for enhancing regioselectivity of substrate reaction site) is an analytical method developed to improve the selectivity of enzymatic reactions.
MPSER takes as input both "desiable" complex structures that can lead to the desired product and "undesiable" ones that may lead to undesired byproducts.
The concept of MPSER is that the amino acid residues of the enzyme in contact with the substrate are important for stabilizing the complex structure, and substituting these residues tends to destabilize the complex.
Based on this principle, MPSER predicts mutation sites that can suppress the formation of byproducts while maintaining the production of the desired product.
Specifically, it calculates the contact ratio between the substrate and the enzyme within various complex structures, and identifies residues that show low contact in desiable complexes and high contact in undesiable ones.
These residues are then proposed as mutation sites to enhance the selectivity of the enzymatic reaction.

Compared to conventional methods, MPSER offers the following three key advantages:
	1 : Ensemble-based prediction.
		Enhancing enzymatic selectivity requires precise detection of subtle differences in complex structures with similar substrates.
		Traditional methods such as free energy calculations often rely on a single or few structural models, which can yield inconsistent predictions depending on slight variations in the input structure.
		MPSER, by contrast, can incorporate large structural ensembles derived from molecular dynamics (MD) simulations, enabling predictions that are less dependent on specific conformations and more robust.

	2 : Specialized for regioselectivity enhancement.
		For improvements such as thermostability, it is possible to apply AI-based methods trained on large public databases.
		However, in the case of selectivity enhancement, the problem is highly specific to each enzyme-substrate pair, and no general database exists.
		Furthermore, building such a database would require numerous low-throughput experiments to distinguish between structurally similar substrates.
		MPSER circumvents this limitation by enabling predictions without reliance on extensive experimental datasets.

	3 : Objective and reproducible predictions.
		Traditional approaches rely on human intuition and expertise, such as manually inspecting docked models to select mutation sites, which introduces subjectivity.
		MPSER, on the other hand, provides consistent predictions for the same input data, eliminating human bias and improving reproducibility.

The following section describes the procedure for performing MPSER analysis using the j_presto program.
The overall workflow consists of the following four steps:
	1 : Generate enzyme–substrate complex structures via molecular dynamics (MD) simulations.
	2 : Extract desirable and undesirable structural ensembles.
	3 : Calculate the probability that each enzyme atom is in contact with the substrate across the ensembles.
	4 : Predict mutation sites to improve the selectivity of the enzymatic reaction.

1 : Generate enzyme–substrate complex structures via molecular dynamics (MD) simulations.

To create the ensemble of enzyme–substrate complex structures required as input for MPSER analysis, perform MD simulations using the "j_presto md_run" command.
In cases where multiple products are generated from a single enzyme–substrate pair (i.e., to improve the regioselectivity of substrate reaction sites), prepare an initial structure by manually positioning the substrate within the enzyme pocket or by using existing docking simulations, then run MD simulations.
When the objective is to develop an enzyme that selectively reacts with only the desired substrate among closely related undesirable substrates (i.e., to improve substrate selectivity), it is necessary to perform multiple simulations for each substrate.
Although it is also possible to use multiple complex models generated by docking simulations or a very limited number of experimentally determined complex models as inputs for MPSER instead of MD simulations, it should be noted that this may diminish the advantage of MPSER, which lies in its ability to utilize structural ensembles as input.

2 : Extract desirable and undesirable structural ensembles.

Among the numerous complex structures obtained from the simulations, extract the desirable and undesirable ensembles using "j_presto Ens_Ana" and "j_presto pick_conf".
For example, define the desirable structures as those where the enzyme’s active site and the substrate’s reaction site are within a reactive distance, and the undesirable structures as those where the enzyme’s active site is close to the substrate’s reaction site leading to byproducts.
First, analyze the ensemble using "j_presto Ens_Ana".
By setting the "measurements" option in the Ens_Ana input file, you can measure the distance between the enzyme active site and the substrate reaction site for each structure in the ensemble.
The results are output to files named "*.distan".
Then, use "j_presto pick_conf" to extract only those structures whose measured distances are within a specified threshold, creating a file list (*.list) of the desirable ensemble structures.
Similarly, perform the same analysis for the undesirable ensemble.

 3 : Calculate the probability that each enzyme atom is in contact with the substrate across the ensembles.

Specify the "*.list" file for "input_binary_list" field of the "j_presto Ens_Ana" input file, and appropriately set the enzyme and substrate atoms for contact analysis in "atom_spec_contact" and perform "j_presto Ens_Ana" again.
This calculates the contact frequency between enzyme atoms and the substrate in the desirable ensemble, outputting the results as a file named "*_con.pdb".
This output file is in PDB format, with the contact frequency recorded in the B-factor column for each atom.
Similarly, perform the same analysis for the undesirable ensemble, resulting in two *_con.pdb files representing the contact frequencies for both the desirable and undesirable ensembles.

These files serve as the input for the subsequent MSPER analysis.

 4 : Predict mutation sites to improve the selectivity of the enzymatic reaction.

Using the two previously generated *_con.pdb files as input, run the MSPER analysis with "j_presto MSPER".
The scores for MSPER ranking and the list ranking mutation sites are output as a file named "*.scr" and "*.list". respectively.
The accuracy of this ranking depends on whether the MD simulations used to generate the input ensemble performed sufficient structural sampling.
Since it is generally difficult to determine this, the original MSPER paper performs MSPER analyses independently on two sets of simulations starting from different initial structures, producing separate ranking lists.
If the structural sampling is adequate, the mutation site rankings in these lists tend to be similar.
Conversely, insufficient sampling can result in large differences between the two ranking lists.
If the results have not converged well, extending the simulation time is recommended.

You can merge the results of the two MSPER analyses (1.scr and 2.scr) into a combined ranking list using the following command:
	j_presto MSPER -s 1.scr 2.scr
The combined ranking is based on the average rank of mutation sites across the individual rankings.
>FAQ
1  : Regarding j_presto prep

	1-1 : 	Please tell me how to introduce disulfide bonds and covalent bonds.

		In the PDB file format, disulfide bonds and covalent bonds are represented with "SSBOND" and "LINK" lines, respectively.
		For more details, please look up the PDB format online.
		The 'j_presto prep' reads these pieces of information from the PDB file and assigns parameters for disulfide bonds and covalent bonds in simulations, outputting a topology file (*.tpl).
		If you want to introduce disulfide bonds or covalent bonds, you should add the corresponding "SSBOND" or "LINK" lines to the input PDB file and execute "j_presto prep".

	1-2 :	The duplex pair of DNA will be removed due to the trimming of the system.

		To prevent this issue, you can use "j_presto prep -pair." Please refer to "prep -pair" for more details.

	1-3 :	I want to cancel out the charge at the ends of the peptide chain.

		In such cases, you can use "j_presto prep -ACE" and "j_presto prep -NME" to add the ACE and NME groups to the N-terminus and C-terminus of the peptide chain, respectively.
		For more details, please refer to "prep -ACE" and "prep -NME."

2  : Regarding j_presto md_run

	2-1 : 	After running j_presto md_run, memory or OpenMP-related errors are occured that prevent the calculation from proceeding.

		There is a possibility that the simulation will stop due to insufficient memory required for execution.
		Below are examples of countermeasures.
		In the script that executes j_presto md_run, set the following variables.
		The examples provided are for a bash script, so be aware that the corresponding syntax may differ in other scripts such as csh.
			ulimit -s 16384
			export OMP_STACKSIZE=16M
			export OMP_NUM_THREADS=8

			j_presto md_run md.inp > md.log
		OMP_NUM_THREADS:
			This variable sets the number of threads for OpenMP parallelization.
			When OpenMP generates threads for parallel calculations, it needs to allocate memory for the threads in proportion to the number of threads.
			Therefore, in high parallel calculations, there is a possibility of running out of memory.
			Reducing the value of this variable may alleviate memory shortages (however, the calculation speed is generally reduced as well).
		ulimit and OMP_STACKSIZE:
			Generally, the maximum amount of memory that a program can use is limited by the hardware.
			The commands and variables to change this upper limit are ulimit and the OMP_STACKSIZE variable.
			For example, to set the limit to 16 megabytes, ulimit should be set in KB (16MB = 16 * 1024KB = 16384), and OMP_STACKSIZE should be set to 16M.
			Note that these two values must match.

	2-2 :	Can parallel computation be performed with "j_presto md_run"?
		The program "j_presto md_run" supports parallelization with OpenMP, but it does not support MPI parallelization.
