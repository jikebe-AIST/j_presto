#!/usr/bin/env python3

import sys, os, re, readline, argparse

def read_manual_file(filename, unlock_mode=False):
    data = {} ; links = {} ; key = None ; value_lines = []
    link = {"n": None, "p": None, "u": None}
    with open(filename, 'r') as file:
        for line in file:
            line = line.rstrip()
            if line.startswith('#'):
                if unlock_mode:
                    line = line[1:]
                else:
                    continue
            if line.startswith('>'):
                if key is not None:
                    data[key] = '\n'.join(value_lines)
                    links[key] = link
                    link = {"n": None, "p": None, "u": None}
                    value_lines = []
                key = line[1:].strip() if line[1:].strip() else ""
            elif line.startswith('@'):
                for part in line[1:].split(','):
                    if ':' in part:
                        tag, val = part.split(':', 1)
                        tag, val = tag.strip(), val.strip()
                        if tag in link and val:
                            link[tag] = val
            else:
                value_lines.append(line)
        if key is not None:  # Capture the last block if exists
            data[key] = '\n'.join(value_lines)
            links[key] = link
    return data, links

def highlight_text(text, search_term):
    return re.sub(f"({re.escape(search_term)})", r"\033[1;31m\1\033[0m", text, flags=re.IGNORECASE)

def complete_input(text, state):
    options = [key for key in manual_data if key.startswith(text)]
    return options[state] if state < len(options) else None

def print_manual_entry(key):
    print(f"\n{key}\n\n{manual_data[key]}\n")
    link_info = manual_link.get(key, {})
    navigation = []
    if link_info.get('p'):
        navigation.append(f"p(previous): {link_info['p']}")
    if link_info.get('n'):
        navigation.append(f"n(next): {link_info['n']}")
    if link_info.get('u'):
        navigation.append(f"u(up): {link_info['u']}")
    if navigation:
        print("   [ " + " / ".join(navigation) + " ]")

def main():
    license_path = os.path.join(os.environ.get("J_PRESTO_PATH"), "LICENSE.md")
    try:
        with open(license_path, "r", encoding="utf-8") as file:
            license_content = file.read()
    except:
        print("Error: License file not found.")
        sys.exit(1)

    parser = argparse.ArgumentParser(description="Manual reader program.")
    parser.add_argument('access_key', help=argparse.SUPPRESS)
    parser.add_argument('filename', help=argparse.SUPPRESS)
    parser.add_argument('--unlock', '-u', action='store_true', help=argparse.SUPPRESS)
    args = parser.parse_args()

    if args.access_key != "j_presto":
        sys.exit(1)

    global manual_data, manual_link
    try:
        manual_data, manual_link = read_manual_file(args.filename, unlock_mode=args.unlock)
    except FileNotFoundError:
        print(f"Error: File '{args.filename}' not found.")
        sys.exit(1)

    readline.set_startup_hook(lambda: readline.insert_text(''))
    readline.set_completer(complete_input)
    readline.parse_and_bind('tab: complete')

    # Start the interactive part
    current_key = ''
    print(f"\n\n\n{manual_data['']}")
    
    while True:
        user_input = input("\n*** What would you like to ask about? (type 'q' to quit): ").strip()

        if user_input.lower() in ['q', 'quit']:
            print(f"\nExiting the manual program.")
            break
        elif user_input.lower() in ['s', 'search']:
            search_term = input("Enter the search term: ").strip()
            found = False
            for key, content in manual_data.items():
                if re.search(re.escape(search_term), content, re.IGNORECASE):
                    found = True
                    print(f"\nTerm: {key}")
                    highlighted_content = highlight_text(content, search_term)
                    print(f"\n{highlighted_content}\n")
            if not found:
                print(f"'{search_term}' not found in the manual.")
        elif user_input.lower() in ['f', 'faq']:
            current_key = 'FAQ' ; print_manual_entry(current_key)
        elif user_input.lower() in ['t', 'tutorial']:
            current_key = 'tutorial' ; print_manual_entry(current_key)
        elif user_input in ['n', 'p', 'u']:
            link = manual_link[current_key][user_input]
            if link and link in manual_data:
                current_key = link ; print_manual_entry(current_key)
        elif user_input in manual_data:
            current_key = user_input ; print_manual_entry(current_key)
        else:
            print(f"'{user_input}' not found in the manual. Please try another word.")

if __name__ == "__main__":
    main()

