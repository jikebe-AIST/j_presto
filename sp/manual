#!/usr/bin/env python3

import sys, os, re, readline

def read_manual_file(filename):
    data = {}
    key = None
    value_lines = []
    with open(filename, 'r') as file:
        for line in file:
            line = line.rstrip()
            if line.startswith('>'):
                if key is not None:
                    data[key] = '\n'.join(value_lines)
                    value_lines = []
                key = line[1:].strip() if line[1:].strip() else ""
            else:
                value_lines.append(line)
        if key is not None:  # Capture the last block if exists
            data[key] = '\n'.join(value_lines)
    return data

def highlight_text(text, search_term):
    highlighted = re.sub(f"({re.escape(search_term)})", r"\033[1;31m\1\033[0m", text, flags=re.IGNORECASE)
    return highlighted

def complete_input(text, state):
    options = [key for key in manual_data if key.startswith(text)]
    if state < len(options):
        return options[state]
    else:
        return None

def main():
    license_path = os.path.join(os.environ.get("J_PRESTO_PATH"), "LICENSE.md")
    try:
        with open(license_path, "r", encoding="utf-8") as file:
            license_content = file.read()
    except:
        print("Error: License file not found.")
        sys.exit()

    access_key = sys.argv[1]
    filename = sys.argv[2]
    if len(sys.argv) != 3 or access_key != "j_presto":
        sys.exit(1)

    try:
        global manual_data
        manual_data = read_manual_file(filename)
    except FileNotFoundError:
        print(f"Error: File '{filename}' not found.")
        sys.exit(1)

    readline.set_startup_hook(lambda: readline.insert_text(''))
    readline.set_completer(complete_input)
    readline.parse_and_bind('tab: complete')

    # Start the interactive part
    print(f"\n\n\n{manual_data['']}")
    
    while True:
        user_input = input("\nWhat would you like to ask about? (type 'show_list' for available words, 'q' to quit, 'search' to search the manual): ").strip()

        if user_input.lower() in ['q', 'quit']:
            print(f"\nExiting the manual program.")
            break
        elif user_input.lower() == 'show_list':
            print("\nAvailable keys in the manual:")
            count = 0
            for key in manual_data:
                print(key, end=' | ')
                count += 1
                if count % 10 == 0:
                    print()
            print()
        elif user_input.lower() == 'search':
            search_term = input("Enter the search term: ").strip()
            found = False
            for key, content in manual_data.items():
                if re.search(re.escape(search_term), content, re.IGNORECASE):
                    found = True
                    print(f"\nTerm: {key}")
                    highlighted_content = highlight_text(content, search_term)
                    print(f"\n{highlighted_content}\n")
            if not found:
                print(f"'{search_term}' not found in the manual.")
        elif user_input in manual_data:
            print(f"\n{user_input}\n\n{manual_data[user_input]}\n")
        else:
            print(f"'{user_input}' not found in the manual. Please try another word.")

if __name__ == "__main__":
    main()

